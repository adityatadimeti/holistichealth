/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["app/layout"],{

/***/ "(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2FUsers%2Fsathviknallamalli%2Fholistichealth%2Fholisticreact%2Fapp%2FConvexClientProvider.jsx&modules=%2FUsers%2Fsathviknallamalli%2Fholistichealth%2Fholisticreact%2Fapp%2Fglobals.css&modules=%2FUsers%2Fsathviknallamalli%2Fholistichealth%2Fholisticreact%2Fnode_modules%2Fnext%2Ffont%2Fgoogle%2Ftarget.css%3F%7B%22path%22%3A%22app%2Flayout.js%22%2C%22import%22%3A%22Inter%22%2C%22arguments%22%3A%5B%7B%22subsets%22%3A%5B%22latin%22%5D%7D%5D%2C%22variableName%22%3A%22inter%22%7D&server=false!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2FUsers%2Fsathviknallamalli%2Fholistichealth%2Fholisticreact%2Fapp%2FConvexClientProvider.jsx&modules=%2FUsers%2Fsathviknallamalli%2Fholistichealth%2Fholisticreact%2Fapp%2Fglobals.css&modules=%2FUsers%2Fsathviknallamalli%2Fholistichealth%2Fholisticreact%2Fnode_modules%2Fnext%2Ffont%2Fgoogle%2Ftarget.css%3F%7B%22path%22%3A%22app%2Flayout.js%22%2C%22import%22%3A%22Inter%22%2C%22arguments%22%3A%5B%7B%22subsets%22%3A%5B%22latin%22%5D%7D%5D%2C%22variableName%22%3A%22inter%22%7D&server=false! ***!

/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./app/ConvexClientProvider.jsx */ \"(app-pages-browser)/./app/ConvexClientProvider.jsx\"));\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./app/globals.css */ \"(app-pages-browser)/./app/globals.css\"));\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/font/google/target.css?{\"path\":\"app/layout.js\",\"import\":\"Inter\",\"arguments\":[{\"subsets\":[\"latin\"]}],\"variableName\":\"inter\"} */ \"(app-pages-browser)/./node_modules/next/font/google/target.css?{\\\"path\\\":\\\"app/layout.js\\\",\\\"import\\\":\\\"Inter\\\",\\\"arguments\\\":[{\\\"subsets\\\":[\\\"latin\\\"]}],\\\"variableName\\\":\\\"inter\\\"}\", 23))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtZmxpZ2h0LWNsaWVudC1lbnRyeS1sb2FkZXIuanM/bW9kdWxlcz0lMkZVc2VycyUyRnNhdGh2aWtuYWxsYW1hbGxpJTJGaG9saXN0aWNoZWFsdGglMkZob2xpc3RpY3JlYWN0JTJGYXBwJTJGQ29udmV4Q2xpZW50UHJvdmlkZXIuanN4Jm1vZHVsZXM9JTJGVXNlcnMlMkZzYXRodmlrbmFsbGFtYWxsaSUyRmhvbGlzdGljaGVhbHRoJTJGaG9saXN0aWNyZWFjdCUyRmFwcCUyRmdsb2JhbHMuY3NzJm1vZHVsZXM9JTJGVXNlcnMlMkZzYXRodmlrbmFsbGFtYWxsaSUyRmhvbGlzdGljaGVhbHRoJTJGaG9saXN0aWNyZWFjdCUyRm5vZGVfbW9kdWxlcyUyRm5leHQlMkZmb250JTJGZ29vZ2xlJTJGdGFyZ2V0LmNzcyUzRiU3QiUyMnBhdGglMjIlM0ElMjJhcHAlMkZsYXlvdXQuanMlMjIlMkMlMjJpbXBvcnQlMjIlM0ElMjJJbnRlciUyMiUyQyUyMmFyZ3VtZW50cyUyMiUzQSU1QiU3QiUyMnN1YnNldHMlMjIlM0ElNUIlMjJsYXRpbiUyMiU1RCU3RCU1RCUyQyUyMnZhcmlhYmxlTmFtZSUyMiUzQSUyMmludGVyJTIyJTdEJnNlcnZlcj1mYWxzZSEiLCJtYXBwaW5ncyI6IkFBQUEsc0xBQXVIO0FBQ3ZILDRKQUEwRztBQUMxRyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvP2VlMDkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIgKi8gXCIvVXNlcnMvc2F0aHZpa25hbGxhbWFsbGkvaG9saXN0aWNoZWFsdGgvaG9saXN0aWNyZWFjdC9hcHAvQ29udmV4Q2xpZW50UHJvdmlkZXIuanN4XCIpO1xuaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIgKi8gXCIvVXNlcnMvc2F0aHZpa25hbGxhbWFsbGkvaG9saXN0aWNoZWFsdGgvaG9saXN0aWNyZWFjdC9hcHAvZ2xvYmFscy5jc3NcIik7XG5pbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIi9Vc2Vycy9zYXRodmlrbmFsbGFtYWxsaS9ob2xpc3RpY2hlYWx0aC9ob2xpc3RpY3JlYWN0L25vZGVfbW9kdWxlcy9uZXh0L2ZvbnQvZ29vZ2xlL3RhcmdldC5jc3M/e1xcXCJwYXRoXFxcIjpcXFwiYXBwL2xheW91dC5qc1xcXCIsXFxcImltcG9ydFxcXCI6XFxcIkludGVyXFxcIixcXFwiYXJndW1lbnRzXFxcIjpbe1xcXCJzdWJzZXRzXFxcIjpbXFxcImxhdGluXFxcIl19XSxcXFwidmFyaWFibGVOYW1lXFxcIjpcXFwiaW50ZXJcXFwifVwiKSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2FUsers%2Fsathviknallamalli%2Fholistichealth%2Fholisticreact%2Fapp%2FConvexClientProvider.jsx&modules=%2FUsers%2Fsathviknallamalli%2Fholistichealth%2Fholisticreact%2Fapp%2Fglobals.css&modules=%2FUsers%2Fsathviknallamalli%2Fholistichealth%2Fholisticreact%2Fnode_modules%2Fnext%2Ffont%2Fgoogle%2Ftarget.css%3F%7B%22path%22%3A%22app%2Flayout.js%22%2C%22import%22%3A%22Inter%22%2C%22arguments%22%3A%5B%7B%22subsets%22%3A%5B%22latin%22%5D%7D%5D%2C%22variableName%22%3A%22inter%22%7D&server=false!\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/jwt-decode/build/jwt-decode.esm.js":
/*!*********************************************************!*\
  !*** ./node_modules/jwt-decode/build/jwt-decode.esm.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InvalidTokenError: function() { return /* binding */ n; }\n/* harmony export */ });\nfunction e(e) {\n    this.message = e;\n}\ne.prototype = new Error, e.prototype.name = \"InvalidCharacterError\";\nvar r =  true && window.atob && window.atob.bind(window) || function(r) {\n    var t = String(r).replace(/=+$/, \"\");\n    if (t.length % 4 == 1) throw new e(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n    for(var n, o, a = 0, i = 0, c = \"\"; o = t.charAt(i++); ~o && (n = a % 4 ? 64 * n + o : o, a++ % 4) ? c += String.fromCharCode(255 & n >> (-2 * a & 6)) : 0)o = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\".indexOf(o);\n    return c;\n};\nfunction t(e) {\n    var t = e.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    switch(t.length % 4){\n        case 0:\n            break;\n        case 2:\n            t += \"==\";\n            break;\n        case 3:\n            t += \"=\";\n            break;\n        default:\n            throw \"Illegal base64url string!\";\n    }\n    try {\n        return function(e) {\n            return decodeURIComponent(r(e).replace(/(.)/g, function(e, r) {\n                var t = r.charCodeAt(0).toString(16).toUpperCase();\n                return t.length < 2 && (t = \"0\" + t), \"%\" + t;\n            }));\n        }(t);\n    } catch (e) {\n        return r(t);\n    }\n}\nfunction n(e) {\n    this.message = e;\n}\nfunction o(e, r) {\n    if (\"string\" != typeof e) throw new n(\"Invalid token specified\");\n    var o = !0 === (r = r || {}).header ? 0 : 1;\n    try {\n        return JSON.parse(t(e.split(\".\")[o]));\n    } catch (e) {\n        throw new n(\"Invalid token specified: \" + e.message);\n    }\n}\nn.prototype = new Error, n.prototype.name = \"InvalidTokenError\";\n/* harmony default export */ __webpack_exports__[\"default\"] = (o);\n //# sourceMappingURL=jwt-decode.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9qd3QtZGVjb2RlL2J1aWxkL2p3dC1kZWNvZGUuZXNtLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxTQUFTQSxFQUFFQSxDQUFDO0lBQUUsSUFBSSxDQUFDQyxPQUFPLEdBQUNEO0FBQUM7QUFBQ0EsRUFBRUUsU0FBUyxHQUFDLElBQUlDLE9BQU1ILEVBQUVFLFNBQVMsQ0FBQ0UsSUFBSSxHQUFDO0FBQXdCLElBQUlDLElBQUUsS0FBYSxJQUFlQyxPQUFPQyxJQUFJLElBQUVELE9BQU9DLElBQUksQ0FBQ0MsSUFBSSxDQUFDRixXQUFTLFNBQVNELENBQUM7SUFBRSxJQUFJSSxJQUFFQyxPQUFPTCxHQUFHTSxPQUFPLENBQUMsT0FBTTtJQUFJLElBQUdGLEVBQUVHLE1BQU0sR0FBQyxLQUFHLEdBQUUsTUFBTSxJQUFJWixFQUFFO0lBQXFFLElBQUksSUFBSWEsR0FBRUMsR0FBRUMsSUFBRSxHQUFFQyxJQUFFLEdBQUVDLElBQUUsSUFBR0gsSUFBRUwsRUFBRVMsTUFBTSxDQUFDRixNQUFLLENBQUNGLEtBQUlELENBQUFBLElBQUVFLElBQUUsSUFBRSxLQUFHRixJQUFFQyxJQUFFQSxHQUFFQyxNQUFJLEtBQUdFLEtBQUdQLE9BQU9TLFlBQVksQ0FBQyxNQUFJTixLQUFJLEVBQUMsSUFBRUUsSUFBRSxNQUFJLEVBQUVELElBQUUsb0VBQW9FTSxPQUFPLENBQUNOO0lBQUcsT0FBT0c7QUFBQztBQUFFLFNBQVNSLEVBQUVULENBQUM7SUFBRSxJQUFJUyxJQUFFVCxFQUFFVyxPQUFPLENBQUMsTUFBSyxLQUFLQSxPQUFPLENBQUMsTUFBSztJQUFLLE9BQU9GLEVBQUVHLE1BQU0sR0FBQztRQUFHLEtBQUs7WUFBRTtRQUFNLEtBQUs7WUFBRUgsS0FBRztZQUFLO1FBQU0sS0FBSztZQUFFQSxLQUFHO1lBQUk7UUFBTTtZQUFRLE1BQUs7SUFBMkI7SUFBQyxJQUFHO1FBQUMsT0FBTyxTQUFTVCxDQUFDO1lBQUUsT0FBT3FCLG1CQUFtQmhCLEVBQUVMLEdBQUdXLE9BQU8sQ0FBQyxRQUFRLFNBQVNYLENBQUMsRUFBQ0ssQ0FBQztnQkFBRSxJQUFJSSxJQUFFSixFQUFFaUIsVUFBVSxDQUFDLEdBQUdDLFFBQVEsQ0FBQyxJQUFJQyxXQUFXO2dCQUFHLE9BQU9mLEVBQUVHLE1BQU0sR0FBQyxLQUFJSCxDQUFBQSxJQUFFLE1BQUlBLENBQUFBLEdBQUcsTUFBSUE7WUFBQztRQUFJLEVBQUVBO0lBQUUsRUFBQyxPQUFNVCxHQUFFO1FBQUMsT0FBT0ssRUFBRUk7SUFBRTtBQUFDO0FBQUMsU0FBU0ksRUFBRWIsQ0FBQztJQUFFLElBQUksQ0FBQ0MsT0FBTyxHQUFDRDtBQUFDO0FBQUMsU0FBU2MsRUFBRWQsQ0FBQyxFQUFDSyxDQUFDO0lBQUUsSUFBRyxZQUFVLE9BQU9MLEdBQUUsTUFBTSxJQUFJYSxFQUFFO0lBQTJCLElBQUlDLElBQUUsQ0FBQyxNQUFJLENBQUNULElBQUVBLEtBQUcsQ0FBQyxHQUFHb0IsTUFBTSxHQUFDLElBQUU7SUFBRSxJQUFHO1FBQUMsT0FBT0MsS0FBS0MsS0FBSyxDQUFDbEIsRUFBRVQsRUFBRTRCLEtBQUssQ0FBQyxJQUFJLENBQUNkLEVBQUU7SUFBRSxFQUFDLE9BQU1kLEdBQUU7UUFBQyxNQUFNLElBQUlhLEVBQUUsOEJBQTRCYixFQUFFQyxPQUFPO0lBQUM7QUFBQztBQUFDWSxFQUFFWCxTQUFTLEdBQUMsSUFBSUMsT0FBTVUsRUFBRVgsU0FBUyxDQUFDRSxJQUFJLEdBQUM7QUFBb0IsK0RBQWVVLENBQUNBLEVBQUM7QUFBK0IsQ0FDNXNDLDBDQUEwQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvand0LWRlY29kZS9idWlsZC9qd3QtZGVjb2RlLmVzbS5qcz8xZDkzIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGUoZSl7dGhpcy5tZXNzYWdlPWV9ZS5wcm90b3R5cGU9bmV3IEVycm9yLGUucHJvdG90eXBlLm5hbWU9XCJJbnZhbGlkQ2hhcmFjdGVyRXJyb3JcIjt2YXIgcj1cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiZ3aW5kb3cuYXRvYiYmd2luZG93LmF0b2IuYmluZCh3aW5kb3cpfHxmdW5jdGlvbihyKXt2YXIgdD1TdHJpbmcocikucmVwbGFjZSgvPSskLyxcIlwiKTtpZih0Lmxlbmd0aCU0PT0xKXRocm93IG5ldyBlKFwiJ2F0b2InIGZhaWxlZDogVGhlIHN0cmluZyB0byBiZSBkZWNvZGVkIGlzIG5vdCBjb3JyZWN0bHkgZW5jb2RlZC5cIik7Zm9yKHZhciBuLG8sYT0wLGk9MCxjPVwiXCI7bz10LmNoYXJBdChpKyspO35vJiYobj1hJTQ/NjQqbitvOm8sYSsrJTQpP2MrPVN0cmluZy5mcm9tQ2hhckNvZGUoMjU1Jm4+PigtMiphJjYpKTowKW89XCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPVwiLmluZGV4T2Yobyk7cmV0dXJuIGN9O2Z1bmN0aW9uIHQoZSl7dmFyIHQ9ZS5yZXBsYWNlKC8tL2csXCIrXCIpLnJlcGxhY2UoL18vZyxcIi9cIik7c3dpdGNoKHQubGVuZ3RoJTQpe2Nhc2UgMDpicmVhaztjYXNlIDI6dCs9XCI9PVwiO2JyZWFrO2Nhc2UgMzp0Kz1cIj1cIjticmVhaztkZWZhdWx0OnRocm93XCJJbGxlZ2FsIGJhc2U2NHVybCBzdHJpbmchXCJ9dHJ5e3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHIoZSkucmVwbGFjZSgvKC4pL2csKGZ1bmN0aW9uKGUscil7dmFyIHQ9ci5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpO3JldHVybiB0Lmxlbmd0aDwyJiYodD1cIjBcIit0KSxcIiVcIit0fSkpKX0odCl9Y2F0Y2goZSl7cmV0dXJuIHIodCl9fWZ1bmN0aW9uIG4oZSl7dGhpcy5tZXNzYWdlPWV9ZnVuY3Rpb24gbyhlLHIpe2lmKFwic3RyaW5nXCIhPXR5cGVvZiBlKXRocm93IG5ldyBuKFwiSW52YWxpZCB0b2tlbiBzcGVjaWZpZWRcIik7dmFyIG89ITA9PT0ocj1yfHx7fSkuaGVhZGVyPzA6MTt0cnl7cmV0dXJuIEpTT04ucGFyc2UodChlLnNwbGl0KFwiLlwiKVtvXSkpfWNhdGNoKGUpe3Rocm93IG5ldyBuKFwiSW52YWxpZCB0b2tlbiBzcGVjaWZpZWQ6IFwiK2UubWVzc2FnZSl9fW4ucHJvdG90eXBlPW5ldyBFcnJvcixuLnByb3RvdHlwZS5uYW1lPVwiSW52YWxpZFRva2VuRXJyb3JcIjtleHBvcnQgZGVmYXVsdCBvO2V4cG9ydHtuIGFzIEludmFsaWRUb2tlbkVycm9yfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWp3dC1kZWNvZGUuZXNtLmpzLm1hcFxuIl0sIm5hbWVzIjpbImUiLCJtZXNzYWdlIiwicHJvdG90eXBlIiwiRXJyb3IiLCJuYW1lIiwiciIsIndpbmRvdyIsImF0b2IiLCJiaW5kIiwidCIsIlN0cmluZyIsInJlcGxhY2UiLCJsZW5ndGgiLCJuIiwibyIsImEiLCJpIiwiYyIsImNoYXJBdCIsImZyb21DaGFyQ29kZSIsImluZGV4T2YiLCJkZWNvZGVVUklDb21wb25lbnQiLCJjaGFyQ29kZUF0IiwidG9TdHJpbmciLCJ0b1VwcGVyQ2FzZSIsImhlYWRlciIsIkpTT04iLCJwYXJzZSIsInNwbGl0IiwiSW52YWxpZFRva2VuRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/jwt-decode/build/jwt-decode.esm.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js ***!
  \*********************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("var __dirname = \"/\";\n\n(()=>{\n    \"use strict\";\n    var e = {\n        686: (e, r, t)=>{\n            var n = t(808);\n            var i = Object.create(null);\n            var a = typeof document === \"undefined\";\n            var o = Array.prototype.forEach;\n            function debounce(e, r) {\n                var t = 0;\n                return function() {\n                    var n = this;\n                    var i = arguments;\n                    var a = function functionCall() {\n                        return e.apply(n, i);\n                    };\n                    clearTimeout(t);\n                    t = setTimeout(a, r);\n                };\n            }\n            function noop() {}\n            function getCurrentScriptUrl(e) {\n                var r = i[e];\n                if (!r) {\n                    if (document.currentScript) {\n                        r = document.currentScript.src;\n                    } else {\n                        var t = document.getElementsByTagName(\"script\");\n                        var a = t[t.length - 1];\n                        if (a) {\n                            r = a.src;\n                        }\n                    }\n                    i[e] = r;\n                }\n                return function(e) {\n                    if (!r) {\n                        return null;\n                    }\n                    var t = r.split(/([^\\\\/]+)\\.js$/);\n                    var i = t && t[1];\n                    if (!i) {\n                        return [\n                            r.replace(\".js\", \".css\")\n                        ];\n                    }\n                    if (!e) {\n                        return [\n                            r.replace(\".js\", \".css\")\n                        ];\n                    }\n                    return e.split(\",\").map(function(e) {\n                        var t = new RegExp(\"\".concat(i, \"\\\\.js$\"), \"g\");\n                        return n(r.replace(t, \"\".concat(e.replace(/{fileName}/g, i), \".css\")));\n                    });\n                };\n            }\n            function updateCss(e, r) {\n                if (!r) {\n                    if (!e.href) {\n                        return;\n                    }\n                    r = e.href.split(\"?\")[0];\n                }\n                if (!isUrlRequest(r)) {\n                    return;\n                }\n                if (e.isLoaded === false) {\n                    return;\n                }\n                if (!r || !(r.indexOf(\".css\") > -1)) {\n                    return;\n                }\n                e.visited = true;\n                var t = e.cloneNode();\n                t.isLoaded = false;\n                t.addEventListener(\"load\", function() {\n                    if (t.isLoaded) {\n                        return;\n                    }\n                    t.isLoaded = true;\n                    e.parentNode.removeChild(e);\n                });\n                t.addEventListener(\"error\", function() {\n                    if (t.isLoaded) {\n                        return;\n                    }\n                    t.isLoaded = true;\n                    e.parentNode.removeChild(e);\n                });\n                t.href = \"\".concat(r, \"?\").concat(Date.now());\n                if (e.nextSibling) {\n                    e.parentNode.insertBefore(t, e.nextSibling);\n                } else {\n                    e.parentNode.appendChild(t);\n                }\n            }\n            function getReloadUrl(e, r) {\n                var t;\n                e = n(e, {\n                    stripWWW: false\n                });\n                r.some(function(n) {\n                    if (e.indexOf(r) > -1) {\n                        t = n;\n                    }\n                });\n                return t;\n            }\n            function reloadStyle(e) {\n                if (!e) {\n                    return false;\n                }\n                var r = document.querySelectorAll(\"link\");\n                var t = false;\n                o.call(r, function(r) {\n                    if (!r.href) {\n                        return;\n                    }\n                    var n = getReloadUrl(r.href, e);\n                    if (!isUrlRequest(n)) {\n                        return;\n                    }\n                    if (r.visited === true) {\n                        return;\n                    }\n                    if (n) {\n                        updateCss(r, n);\n                        t = true;\n                    }\n                });\n                return t;\n            }\n            function reloadAll() {\n                var e = document.querySelectorAll(\"link\");\n                o.call(e, function(e) {\n                    if (e.visited === true) {\n                        return;\n                    }\n                    updateCss(e);\n                });\n            }\n            function isUrlRequest(e) {\n                if (!/^[a-zA-Z][a-zA-Z\\d+\\-.]*:/.test(e)) {\n                    return false;\n                }\n                return true;\n            }\n            e.exports = function(e, r) {\n                if (a) {\n                    console.log(\"no window.document found, will not HMR CSS\");\n                    return noop;\n                }\n                var t = getCurrentScriptUrl(e);\n                function update() {\n                    var e = t(r.filename);\n                    var n = reloadStyle(e);\n                    if (r.locals) {\n                        console.log(\"[HMR] Detected local css modules. Reload all css\");\n                        reloadAll();\n                        return;\n                    }\n                    if (n) {\n                        console.log(\"[HMR] css reload %s\", e.join(\" \"));\n                    } else {\n                        console.log(\"[HMR] Reload all css\");\n                        reloadAll();\n                    }\n                }\n                return debounce(update, 50);\n            };\n        },\n        808: (e)=>{\n            function normalizeUrl(e) {\n                return e.reduce(function(e, r) {\n                    switch(r){\n                        case \"..\":\n                            e.pop();\n                            break;\n                        case \".\":\n                            break;\n                        default:\n                            e.push(r);\n                    }\n                    return e;\n                }, []).join(\"/\");\n            }\n            e.exports = function(e) {\n                e = e.trim();\n                if (/^data:/i.test(e)) {\n                    return e;\n                }\n                var r = e.indexOf(\"//\") !== -1 ? e.split(\"//\")[0] + \"//\" : \"\";\n                var t = e.replace(new RegExp(r, \"i\"), \"\").split(\"/\");\n                var n = t[0].toLowerCase().replace(/\\.$/, \"\");\n                t[0] = \"\";\n                var i = normalizeUrl(t);\n                return r + n + i;\n            };\n        }\n    };\n    var r = {};\n    function __nccwpck_require__(t) {\n        var n = r[t];\n        if (n !== undefined) {\n            return n.exports;\n        }\n        var i = r[t] = {\n            exports: {}\n        };\n        var a = true;\n        try {\n            e[t](i, i.exports, __nccwpck_require__);\n            a = false;\n        } finally{\n            if (a) delete r[t];\n        }\n        return i.exports;\n    }\n    if (typeof __nccwpck_require__ !== \"undefined\") __nccwpck_require__.ab = __dirname + \"/\";\n    var t = __nccwpck_require__(686);\n    module.exports = t;\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ \nif (true) {\n    (function() {\n        \"use strict\";\n        var React = __webpack_require__(/*! next/dist/compiled/react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n        // ATTENTION\n        // When adding new symbols to this file,\n        // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n        // The Symbol used to tag the ReactElement-like types.\n        var REACT_ELEMENT_TYPE = Symbol.for(\"react.element\");\n        var REACT_PORTAL_TYPE = Symbol.for(\"react.portal\");\n        var REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\");\n        var REACT_STRICT_MODE_TYPE = Symbol.for(\"react.strict_mode\");\n        var REACT_PROFILER_TYPE = Symbol.for(\"react.profiler\");\n        var REACT_PROVIDER_TYPE = Symbol.for(\"react.provider\");\n        var REACT_CONTEXT_TYPE = Symbol.for(\"react.context\");\n        var REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\");\n        var REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\");\n        var REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\");\n        var REACT_MEMO_TYPE = Symbol.for(\"react.memo\");\n        var REACT_LAZY_TYPE = Symbol.for(\"react.lazy\");\n        var REACT_OFFSCREEN_TYPE = Symbol.for(\"react.offscreen\");\n        var REACT_CACHE_TYPE = Symbol.for(\"react.cache\");\n        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\n        var FAUX_ITERATOR_SYMBOL = \"@@iterator\";\n        function getIteratorFn(maybeIterable) {\n            if (maybeIterable === null || typeof maybeIterable !== \"object\") {\n                return null;\n            }\n            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n            if (typeof maybeIterator === \"function\") {\n                return maybeIterator;\n            }\n            return null;\n        }\n        var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n        function error(format) {\n            {\n                {\n                    for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){\n                        args[_key2 - 1] = arguments[_key2];\n                    }\n                    printWarning(\"error\", format, args);\n                }\n            }\n        }\n        function printWarning(level, format, args) {\n            // When changing this logic, you might want to also\n            // update consoleWithStackDev.www.js as well.\n            {\n                var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n                var stack = ReactDebugCurrentFrame.getStackAddendum();\n                if (stack !== \"\") {\n                    format += \"%s\";\n                    args = args.concat([\n                        stack\n                    ]);\n                } // eslint-disable-next-line react-internal/safe-string-coercion\n                var argsWithFormat = args.map(function(item) {\n                    return String(item);\n                }); // Careful: RN currently depends on this prefix\n                argsWithFormat.unshift(\"Warning: \" + format); // We intentionally don't use spread (or .apply) directly because it\n                // breaks IE9: https://github.com/facebook/react/issues/13610\n                // eslint-disable-next-line react-internal/no-production-logging\n                Function.prototype.apply.call(console[level], console, argsWithFormat);\n            }\n        }\n        // -----------------------------------------------------------------------------\n        var enableScopeAPI = false; // Experimental Create Event Handle API.\n        var enableCacheElement = false;\n        var enableTransitionTracing = false; // No known bugs, but needs performance testing\n        var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n        // stuff. Intended to enable React core members to more easily debug scheduling\n        // issues in DEV builds.\n        var enableDebugTracing = false;\n        var REACT_CLIENT_REFERENCE$2 = Symbol.for(\"react.client.reference\");\n        function isValidElementType(type) {\n            if (typeof type === \"string\" || typeof type === \"function\") {\n                return true;\n            } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {\n                return true;\n            }\n            if (typeof type === \"object\" && type !== null) {\n                if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n                // types supported by any Flight configuration anywhere since\n                // we don't know which Flight build this will end up being used\n                // with.\n                type.$$typeof === REACT_CLIENT_REFERENCE$2 || type.getModuleId !== undefined) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        function getWrappedName(outerType, innerType, wrapperName) {\n            var displayName = outerType.displayName;\n            if (displayName) {\n                return displayName;\n            }\n            var functionName = innerType.displayName || innerType.name || \"\";\n            return functionName !== \"\" ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n        } // Keep in sync with react-reconciler/getComponentNameFromFiber\n        function getContextName(type) {\n            return type.displayName || \"Context\";\n        }\n        var REACT_CLIENT_REFERENCE$1 = Symbol.for(\"react.client.reference\"); // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n        function getComponentNameFromType(type) {\n            if (type == null) {\n                // Host root, text node or just invalid type.\n                return null;\n            }\n            if (typeof type === \"function\") {\n                if (type.$$typeof === REACT_CLIENT_REFERENCE$1) {\n                    // TODO: Create a convention for naming client references with debug info.\n                    return null;\n                }\n                return type.displayName || type.name || null;\n            }\n            if (typeof type === \"string\") {\n                return type;\n            }\n            switch(type){\n                case REACT_FRAGMENT_TYPE:\n                    return \"Fragment\";\n                case REACT_PORTAL_TYPE:\n                    return \"Portal\";\n                case REACT_PROFILER_TYPE:\n                    return \"Profiler\";\n                case REACT_STRICT_MODE_TYPE:\n                    return \"StrictMode\";\n                case REACT_SUSPENSE_TYPE:\n                    return \"Suspense\";\n                case REACT_SUSPENSE_LIST_TYPE:\n                    return \"SuspenseList\";\n                case REACT_CACHE_TYPE:\n                    {\n                        return \"Cache\";\n                    }\n            }\n            if (typeof type === \"object\") {\n                {\n                    if (typeof type.tag === \"number\") {\n                        error(\"Received an unexpected object in getComponentNameFromType(). \" + \"This is likely a bug in React. Please file an issue.\");\n                    }\n                }\n                switch(type.$$typeof){\n                    case REACT_CONTEXT_TYPE:\n                        var context = type;\n                        return getContextName(context) + \".Consumer\";\n                    case REACT_PROVIDER_TYPE:\n                        var provider = type;\n                        return getContextName(provider._context) + \".Provider\";\n                    case REACT_FORWARD_REF_TYPE:\n                        return getWrappedName(type, type.render, \"ForwardRef\");\n                    case REACT_MEMO_TYPE:\n                        var outerName = type.displayName || null;\n                        if (outerName !== null) {\n                            return outerName;\n                        }\n                        return getComponentNameFromType(type.type) || \"Memo\";\n                    case REACT_LAZY_TYPE:\n                        {\n                            var lazyComponent = type;\n                            var payload = lazyComponent._payload;\n                            var init = lazyComponent._init;\n                            try {\n                                return getComponentNameFromType(init(payload));\n                            } catch (x) {\n                                return null;\n                            }\n                        }\n                }\n            }\n            return null;\n        }\n        var assign = Object.assign;\n        // Helpers to patch console.logs to avoid logging during side-effect free\n        // replaying on render function. This currently only patches the object\n        // lazily which won't cover if the log function was extracted eagerly.\n        // We could also eagerly patch the method.\n        var disabledDepth = 0;\n        var prevLog;\n        var prevInfo;\n        var prevWarn;\n        var prevError;\n        var prevGroup;\n        var prevGroupCollapsed;\n        var prevGroupEnd;\n        function disabledLog() {}\n        disabledLog.__reactDisabledLog = true;\n        function disableLogs() {\n            {\n                if (disabledDepth === 0) {\n                    /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;\n                    prevInfo = console.info;\n                    prevWarn = console.warn;\n                    prevError = console.error;\n                    prevGroup = console.group;\n                    prevGroupCollapsed = console.groupCollapsed;\n                    prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n                    var props = {\n                        configurable: true,\n                        enumerable: true,\n                        value: disabledLog,\n                        writable: true\n                    }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n                    Object.defineProperties(console, {\n                        info: props,\n                        log: props,\n                        warn: props,\n                        error: props,\n                        group: props,\n                        groupCollapsed: props,\n                        groupEnd: props\n                    });\n                /* eslint-enable react-internal/no-production-logging */ }\n                disabledDepth++;\n            }\n        }\n        function reenableLogs() {\n            {\n                disabledDepth--;\n                if (disabledDepth === 0) {\n                    /* eslint-disable react-internal/no-production-logging */ var props = {\n                        configurable: true,\n                        enumerable: true,\n                        writable: true\n                    }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n                    Object.defineProperties(console, {\n                        log: assign({}, props, {\n                            value: prevLog\n                        }),\n                        info: assign({}, props, {\n                            value: prevInfo\n                        }),\n                        warn: assign({}, props, {\n                            value: prevWarn\n                        }),\n                        error: assign({}, props, {\n                            value: prevError\n                        }),\n                        group: assign({}, props, {\n                            value: prevGroup\n                        }),\n                        groupCollapsed: assign({}, props, {\n                            value: prevGroupCollapsed\n                        }),\n                        groupEnd: assign({}, props, {\n                            value: prevGroupEnd\n                        })\n                    });\n                /* eslint-enable react-internal/no-production-logging */ }\n                if (disabledDepth < 0) {\n                    error(\"disabledDepth fell below zero. \" + \"This is a bug in React. Please file an issue.\");\n                }\n            }\n        }\n        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\n        var prefix;\n        function describeBuiltInComponentFrame(name, source, ownerFn) {\n            {\n                if (prefix === undefined) {\n                    // Extract the VM specific prefix used by each line.\n                    try {\n                        throw Error();\n                    } catch (x) {\n                        var match = x.stack.trim().match(/\\n( *(at )?)/);\n                        prefix = match && match[1] || \"\";\n                    }\n                } // We use the prefix to ensure our stacks line up with native stack frames.\n                return \"\\n\" + prefix + name;\n            }\n        }\n        var reentry = false;\n        var componentFrameCache;\n        {\n            var PossiblyWeakMap = typeof WeakMap === \"function\" ? WeakMap : Map;\n            componentFrameCache = new PossiblyWeakMap();\n        }\n        /**\n * Leverages native browser/VM stack frames to get proper details (e.g.\n * filename, line + col number) for a single component in a component stack. We\n * do this by:\n *   (1) throwing and catching an error in the function - this will be our\n *       control error.\n *   (2) calling the component which will eventually throw an error that we'll\n *       catch - this will be our sample error.\n *   (3) diffing the control and sample error stacks to find the stack frame\n *       which represents our component.\n */ function describeNativeComponentFrame(fn, construct) {\n            // If something asked for a stack inside a fake render, it should get ignored.\n            if (!fn || reentry) {\n                return \"\";\n            }\n            {\n                var frame = componentFrameCache.get(fn);\n                if (frame !== undefined) {\n                    return frame;\n                }\n            }\n            reentry = true;\n            var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe[incompatible-type] It does accept undefined.\n            Error.prepareStackTrace = undefined;\n            var previousDispatcher;\n            {\n                previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n                // for warnings.\n                ReactCurrentDispatcher.current = null;\n                disableLogs();\n            }\n            /**\n   * Finding a common stack frame between sample and control errors can be\n   * tricky given the different types and levels of stack trace truncation from\n   * different JS VMs. So instead we'll attempt to control what that common\n   * frame should be through this object method:\n   * Having both the sample and control errors be in the function under the\n   * `DescribeNativeComponentFrameRoot` property, + setting the `name` and\n   * `displayName` properties of the function ensures that a stack\n   * frame exists that has the method name `DescribeNativeComponentFrameRoot` in\n   * it for both control and sample stacks.\n   */ var RunInRootFrame = {\n                DetermineComponentFrameRoot: function() {\n                    var control;\n                    try {\n                        // This should throw.\n                        if (construct) {\n                            // Something should be setting the props in the constructor.\n                            var Fake = function() {\n                                throw Error();\n                            }; // $FlowFixMe[prop-missing]\n                            Object.defineProperty(Fake.prototype, \"props\", {\n                                set: function() {\n                                    // We use a throwing setter instead of frozen or non-writable props\n                                    // because that won't throw in a non-strict mode function.\n                                    throw Error();\n                                }\n                            });\n                            if (typeof Reflect === \"object\" && Reflect.construct) {\n                                // We construct a different control for this case to include any extra\n                                // frames added by the construct call.\n                                try {\n                                    Reflect.construct(Fake, []);\n                                } catch (x) {\n                                    control = x;\n                                }\n                                Reflect.construct(fn, [], Fake);\n                            } else {\n                                try {\n                                    Fake.call();\n                                } catch (x) {\n                                    control = x;\n                                } // $FlowFixMe[prop-missing] found when upgrading Flow\n                                fn.call(Fake.prototype);\n                            }\n                        } else {\n                            try {\n                                throw Error();\n                            } catch (x) {\n                                control = x;\n                            } // TODO(luna): This will currently only throw if the function component\n                            // tries to access React/ReactDOM/props. We should probably make this throw\n                            // in simple components too\n                            var maybePromise = fn(); // If the function component returns a promise, it's likely an async\n                            // component, which we don't yet support. Attach a noop catch handler to\n                            // silence the error.\n                            // TODO: Implement component stacks for async client components?\n                            if (maybePromise && typeof maybePromise.catch === \"function\") {\n                                maybePromise.catch(function() {});\n                            }\n                        }\n                    } catch (sample) {\n                        // This is inlined manually because closure doesn't do it for us.\n                        if (sample && control && typeof sample.stack === \"string\") {\n                            return [\n                                sample.stack,\n                                control.stack\n                            ];\n                        }\n                    }\n                    return [\n                        null,\n                        null\n                    ];\n                }\n            }; // $FlowFixMe[prop-missing]\n            RunInRootFrame.DetermineComponentFrameRoot.displayName = \"DetermineComponentFrameRoot\";\n            var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, \"name\"); // Before ES6, the `name` property was not configurable.\n            if (namePropDescriptor && namePropDescriptor.configurable) {\n                // V8 utilizes a function's `name` property when generating a stack trace.\n                Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, // is set to `false`.\n                // $FlowFixMe[cannot-write]\n                \"name\", {\n                    value: \"DetermineComponentFrameRoot\"\n                });\n            }\n            try {\n                var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(), sampleStack = _RunInRootFrame$Deter[0], controlStack = _RunInRootFrame$Deter[1];\n                if (sampleStack && controlStack) {\n                    // This extracts the first frame from the sample that isn't also in the control.\n                    // Skipping one frame that we assume is the frame that calls the two.\n                    var sampleLines = sampleStack.split(\"\\n\");\n                    var controlLines = controlStack.split(\"\\n\");\n                    var s = 0;\n                    var c = 0;\n                    while(s < sampleLines.length && !sampleLines[s].includes(\"DetermineComponentFrameRoot\")){\n                        s++;\n                    }\n                    while(c < controlLines.length && !controlLines[c].includes(\"DetermineComponentFrameRoot\")){\n                        c++;\n                    } // We couldn't find our intentionally injected common root frame, attempt\n                    // to find another common root frame by search from the bottom of the\n                    // control stack...\n                    if (s === sampleLines.length || c === controlLines.length) {\n                        s = sampleLines.length - 1;\n                        c = controlLines.length - 1;\n                        while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]){\n                            // We expect at least one stack frame to be shared.\n                            // Typically this will be the root most one. However, stack frames may be\n                            // cut off due to maximum stack limits. In this case, one maybe cut off\n                            // earlier than the other. We assume that the sample is longer or the same\n                            // and there for cut off earlier. So we should find the root most frame in\n                            // the sample somewhere in the control.\n                            c--;\n                        }\n                    }\n                    for(; s >= 1 && c >= 0; s--, c--){\n                        // Next we find the first one that isn't the same which should be the\n                        // frame that called our sample function and the control.\n                        if (sampleLines[s] !== controlLines[c]) {\n                            // In V8, the first line is describing the message but other VMs don't.\n                            // If we're about to return the first line, and the control is also on the same\n                            // line, that's a pretty good indicator that our sample threw at same line as\n                            // the control. I.e. before we entered the sample frame. So we ignore this result.\n                            // This can happen if you passed a class to function component, or non-function.\n                            if (s !== 1 || c !== 1) {\n                                do {\n                                    s--;\n                                    c--; // We may still have similar intermediate frames from the construct call.\n                                    // The next one that isn't the same should be our match though.\n                                    if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                                        // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                                        var _frame = \"\\n\" + sampleLines[s].replace(\" at new \", \" at \"); // If our component frame is labeled \"<anonymous>\"\n                                        // but we have a user-provided \"displayName\"\n                                        // splice it in to make the stack more readable.\n                                        if (fn.displayName && _frame.includes(\"<anonymous>\")) {\n                                            _frame = _frame.replace(\"<anonymous>\", fn.displayName);\n                                        }\n                                        if (true) {\n                                            if (typeof fn === \"function\") {\n                                                componentFrameCache.set(fn, _frame);\n                                            }\n                                        } // Return the line we found.\n                                        return _frame;\n                                    }\n                                }while (s >= 1 && c >= 0);\n                            }\n                            break;\n                        }\n                    }\n                }\n            } finally{\n                reentry = false;\n                {\n                    ReactCurrentDispatcher.current = previousDispatcher;\n                    reenableLogs();\n                }\n                Error.prepareStackTrace = previousPrepareStackTrace;\n            } // Fallback to just using the name if we couldn't make it throw.\n            var name = fn ? fn.displayName || fn.name : \"\";\n            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : \"\";\n            {\n                if (typeof fn === \"function\") {\n                    componentFrameCache.set(fn, syntheticFrame);\n                }\n            }\n            return syntheticFrame;\n        }\n        function describeFunctionComponentFrame(fn, source, ownerFn) {\n            {\n                return describeNativeComponentFrame(fn, false);\n            }\n        }\n        function shouldConstruct(Component) {\n            var prototype = Component.prototype;\n            return !!(prototype && prototype.isReactComponent);\n        }\n        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n            if (type == null) {\n                return \"\";\n            }\n            if (typeof type === \"function\") {\n                {\n                    return describeNativeComponentFrame(type, shouldConstruct(type));\n                }\n            }\n            if (typeof type === \"string\") {\n                return describeBuiltInComponentFrame(type);\n            }\n            switch(type){\n                case REACT_SUSPENSE_TYPE:\n                    return describeBuiltInComponentFrame(\"Suspense\");\n                case REACT_SUSPENSE_LIST_TYPE:\n                    return describeBuiltInComponentFrame(\"SuspenseList\");\n            }\n            if (typeof type === \"object\") {\n                switch(type.$$typeof){\n                    case REACT_FORWARD_REF_TYPE:\n                        return describeFunctionComponentFrame(type.render);\n                    case REACT_MEMO_TYPE:\n                        // Memo may contain any component type so we recursively resolve it.\n                        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n                    case REACT_LAZY_TYPE:\n                        {\n                            var lazyComponent = type;\n                            var payload = lazyComponent._payload;\n                            var init = lazyComponent._init;\n                            try {\n                                // Lazy may contain any component type so we recursively resolve it.\n                                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n                            } catch (x) {}\n                        }\n                }\n            }\n            return \"\";\n        }\n        // $FlowFixMe[method-unbinding]\n        var hasOwnProperty = Object.prototype.hasOwnProperty;\n        var loggedTypeFailures = {};\n        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n        function setCurrentlyValidatingElement$1(element) {\n            {\n                if (element) {\n                    var owner = element._owner;\n                    var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n                    ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\n                } else {\n                    ReactDebugCurrentFrame$1.setExtraStackFrame(null);\n                }\n            }\n        }\n        function checkPropTypes(typeSpecs, values, location, componentName, element) {\n            {\n                // $FlowFixMe[incompatible-use] This is okay but Flow doesn't know it.\n                var has = Function.call.bind(hasOwnProperty);\n                for(var typeSpecName in typeSpecs){\n                    if (has(typeSpecs, typeSpecName)) {\n                        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n                        // fail the render phase where it didn't fail before. So we log it.\n                        // After these have been cleaned up, we'll let them throw.\n                        try {\n                            // This is intentionally an invariant that gets caught. It's the same\n                            // behavior as without this statement except with a better message.\n                            if (typeof typeSpecs[typeSpecName] !== \"function\") {\n                                // eslint-disable-next-line react-internal/prod-error-codes\n                                var err = Error((componentName || \"React class\") + \": \" + location + \" type `\" + typeSpecName + \"` is invalid; \" + \"it must be a function, usually from the `prop-types` package, but received `\" + typeof typeSpecs[typeSpecName] + \"`.\" + \"This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.\");\n                                err.name = \"Invariant Violation\";\n                                throw err;\n                            }\n                            error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, \"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\");\n                        } catch (ex) {\n                            error$1 = ex;\n                        }\n                        if (error$1 && !(error$1 instanceof Error)) {\n                            setCurrentlyValidatingElement$1(element);\n                            error(\"%s: type specification of %s\" + \" `%s` is invalid; the type checker \" + \"function must return `null` or an `Error` but returned a %s. \" + \"You may have forgotten to pass an argument to the type checker \" + \"creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and \" + \"shape all require an argument).\", componentName || \"React class\", location, typeSpecName, typeof error$1);\n                            setCurrentlyValidatingElement$1(null);\n                        }\n                        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n                            // Only monitor this failure once because there tends to be a lot of the\n                            // same error.\n                            loggedTypeFailures[error$1.message] = true;\n                            setCurrentlyValidatingElement$1(element);\n                            error(\"Failed %s type: %s\", location, error$1.message);\n                            setCurrentlyValidatingElement$1(null);\n                        }\n                    }\n                }\n            }\n        }\n        var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n        function isArray(a) {\n            return isArrayImpl(a);\n        }\n        /*\n * The `'' + value` pattern (used in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */ // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n        function typeName(value) {\n            {\n                // toStringTag is needed for namespaced types like Temporal.Instant\n                var hasToStringTag = typeof Symbol === \"function\" && Symbol.toStringTag;\n                var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || \"Object\"; // $FlowFixMe[incompatible-return]\n                return type;\n            }\n        } // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n        function willCoercionThrow(value) {\n            {\n                try {\n                    testStringCoercion(value);\n                    return false;\n                } catch (e) {\n                    return true;\n                }\n            }\n        }\n        function testStringCoercion(value) {\n            // If you ended up here by following an exception call stack, here's what's\n            // happened: you supplied an object or symbol value to React (as a prop, key,\n            // DOM attribute, CSS property, string ref, etc.) and when React tried to\n            // coerce it to a string using `'' + value`, an exception was thrown.\n            //\n            // The most common types that will cause this exception are `Symbol` instances\n            // and Temporal objects like `Temporal.Instant`. But any object that has a\n            // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n            // exception. (Library authors do this to prevent users from using built-in\n            // numeric operators like `+` or comparison operators like `>=` because custom\n            // methods are needed to perform accurate arithmetic or comparison.)\n            //\n            // To fix the problem, coerce this object or symbol value to a string before\n            // passing it to React. The most reliable way is usually `String(value)`.\n            //\n            // To find which value is throwing, check the browser or debugger console.\n            // Before this exception was thrown, there should be `console.error` output\n            // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n            // problem and how that type was used: key, atrribute, input value prop, etc.\n            // In most cases, this console output also shows the component and its\n            // ancestor components where the exception happened.\n            //\n            // eslint-disable-next-line react-internal/safe-string-coercion\n            return \"\" + value;\n        }\n        function checkKeyStringCoercion(value) {\n            {\n                if (willCoercionThrow(value)) {\n                    error(\"The provided key is an unsupported type %s.\" + \" This value must be coerced to a string before using it here.\", typeName(value));\n                    return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n                }\n            }\n        }\n        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\n        var RESERVED_PROPS = {\n            key: true,\n            ref: true,\n            __self: true,\n            __source: true\n        };\n        var specialPropKeyWarningShown;\n        var specialPropRefWarningShown;\n        var didWarnAboutStringRefs;\n        {\n            didWarnAboutStringRefs = {};\n        }\n        function hasValidRef(config) {\n            {\n                if (hasOwnProperty.call(config, \"ref\")) {\n                    var getter = Object.getOwnPropertyDescriptor(config, \"ref\").get;\n                    if (getter && getter.isReactWarning) {\n                        return false;\n                    }\n                }\n            }\n            return config.ref !== undefined;\n        }\n        function hasValidKey(config) {\n            {\n                if (hasOwnProperty.call(config, \"key\")) {\n                    var getter = Object.getOwnPropertyDescriptor(config, \"key\").get;\n                    if (getter && getter.isReactWarning) {\n                        return false;\n                    }\n                }\n            }\n            return config.key !== undefined;\n        }\n        function warnIfStringRefCannotBeAutoConverted(config, self) {\n            {\n                if (typeof config.ref === \"string\" && ReactCurrentOwner$1.current && self && ReactCurrentOwner$1.current.stateNode !== self) {\n                    var componentName = getComponentNameFromType(ReactCurrentOwner$1.current.type);\n                    if (!didWarnAboutStringRefs[componentName]) {\n                        error('Component \"%s\" contains the string ref \"%s\". ' + \"Support for string refs will be removed in a future major release. \" + \"This case cannot be automatically converted to an arrow function. \" + \"We ask you to manually fix this case by using useRef() or createRef() instead. \" + \"Learn more about using refs safely here: \" + \"https://reactjs.org/link/strict-mode-string-ref\", getComponentNameFromType(ReactCurrentOwner$1.current.type), config.ref);\n                        didWarnAboutStringRefs[componentName] = true;\n                    }\n                }\n            }\n        }\n        function defineKeyPropWarningGetter(props, displayName) {\n            {\n                var warnAboutAccessingKey = function() {\n                    if (!specialPropKeyWarningShown) {\n                        specialPropKeyWarningShown = true;\n                        error(\"%s: `key` is not a prop. Trying to access it will result \" + \"in `undefined` being returned. If you need to access the same \" + \"value within the child component, you should pass it as a different \" + \"prop. (https://reactjs.org/link/special-props)\", displayName);\n                    }\n                };\n                warnAboutAccessingKey.isReactWarning = true;\n                Object.defineProperty(props, \"key\", {\n                    get: warnAboutAccessingKey,\n                    configurable: true\n                });\n            }\n        }\n        function defineRefPropWarningGetter(props, displayName) {\n            {\n                var warnAboutAccessingRef = function() {\n                    if (!specialPropRefWarningShown) {\n                        specialPropRefWarningShown = true;\n                        error(\"%s: `ref` is not a prop. Trying to access it will result \" + \"in `undefined` being returned. If you need to access the same \" + \"value within the child component, you should pass it as a different \" + \"prop. (https://reactjs.org/link/special-props)\", displayName);\n                    }\n                };\n                warnAboutAccessingRef.isReactWarning = true;\n                Object.defineProperty(props, \"ref\", {\n                    get: warnAboutAccessingRef,\n                    configurable: true\n                });\n            }\n        }\n        /**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */ function ReactElement(type, key, ref, self, source, owner, props) {\n            var element = {\n                // This tag allows us to uniquely identify this as a React Element\n                $$typeof: REACT_ELEMENT_TYPE,\n                // Built-in properties that belong on the element\n                type: type,\n                key: key,\n                ref: ref,\n                props: props,\n                // Record the component responsible for creating this element.\n                _owner: owner\n            };\n            {\n                // The validation flag is currently mutative. We put it on\n                // an external backing store so that we can freeze the whole object.\n                // This can be replaced with a WeakMap once they are implemented in\n                // commonly used development environments.\n                element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n                // the validation flag non-enumerable (where possible, which should\n                // include every environment we run tests in), so the test framework\n                // ignores it.\n                Object.defineProperty(element._store, \"validated\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: true,\n                    value: false\n                }); // self and source are DEV only properties.\n                Object.defineProperty(element, \"_self\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: false,\n                    value: self\n                }); // Two elements created in two different places should be considered\n                // equal for testing purposes and therefore we hide it from enumeration.\n                Object.defineProperty(element, \"_source\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: false,\n                    value: source\n                });\n                if (Object.freeze) {\n                    Object.freeze(element.props);\n                    Object.freeze(element);\n                }\n            }\n            return element;\n        }\n        /**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */ function jsxDEV$1(type, config, maybeKey, source, self) {\n            {\n                var propName; // Reserved names are extracted\n                var props = {};\n                var key = null;\n                var ref = null; // Currently, key can be spread in as a prop. This causes a potential\n                // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n                // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n                // but as an intermediary step, we will use jsxDEV for everything except\n                // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n                // key is explicitly declared to be undefined or not.\n                if (maybeKey !== undefined) {\n                    {\n                        checkKeyStringCoercion(maybeKey);\n                    }\n                    key = \"\" + maybeKey;\n                }\n                if (hasValidKey(config)) {\n                    {\n                        checkKeyStringCoercion(config.key);\n                    }\n                    key = \"\" + config.key;\n                }\n                if (hasValidRef(config)) {\n                    ref = config.ref;\n                    warnIfStringRefCannotBeAutoConverted(config, self);\n                } // Remaining properties are added to a new props object\n                for(propName in config){\n                    if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n                        props[propName] = config[propName];\n                    }\n                } // Resolve default props\n                if (type && type.defaultProps) {\n                    var defaultProps = type.defaultProps;\n                    for(propName in defaultProps){\n                        if (props[propName] === undefined) {\n                            props[propName] = defaultProps[propName];\n                        }\n                    }\n                }\n                if (key || ref) {\n                    var displayName = typeof type === \"function\" ? type.displayName || type.name || \"Unknown\" : type;\n                    if (key) {\n                        defineKeyPropWarningGetter(props, displayName);\n                    }\n                    if (ref) {\n                        defineRefPropWarningGetter(props, displayName);\n                    }\n                }\n                return ReactElement(type, key, ref, self, source, ReactCurrentOwner$1.current, props);\n            }\n        }\n        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n        var REACT_CLIENT_REFERENCE = Symbol.for(\"react.client.reference\");\n        function setCurrentlyValidatingElement(element) {\n            {\n                if (element) {\n                    var owner = element._owner;\n                    var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n                    ReactDebugCurrentFrame.setExtraStackFrame(stack);\n                } else {\n                    ReactDebugCurrentFrame.setExtraStackFrame(null);\n                }\n            }\n        }\n        var propTypesMisspellWarningShown;\n        {\n            propTypesMisspellWarningShown = false;\n        }\n        /**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */ function isValidElement(object) {\n            {\n                return typeof object === \"object\" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n            }\n        }\n        function getDeclarationErrorAddendum() {\n            {\n                if (ReactCurrentOwner.current) {\n                    var name = getComponentNameFromType(ReactCurrentOwner.current.type);\n                    if (name) {\n                        return \"\\n\\nCheck the render method of `\" + name + \"`.\";\n                    }\n                }\n                return \"\";\n            }\n        }\n        function getSourceInfoErrorAddendum(source) {\n            {\n                if (source !== undefined) {\n                    var fileName = source.fileName.replace(/^.*[\\\\\\/]/, \"\");\n                    var lineNumber = source.lineNumber;\n                    return \"\\n\\nCheck your code at \" + fileName + \":\" + lineNumber + \".\";\n                }\n                return \"\";\n            }\n        }\n        /**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */ var ownerHasKeyUseWarning = {};\n        function getCurrentComponentErrorInfo(parentType) {\n            {\n                var info = getDeclarationErrorAddendum();\n                if (!info) {\n                    var parentName = getComponentNameFromType(parentType);\n                    if (parentName) {\n                        info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n                    }\n                }\n                return info;\n            }\n        }\n        /**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */ function validateExplicitKey(element, parentType) {\n            {\n                if (!element._store || element._store.validated || element.key != null) {\n                    return;\n                }\n                element._store.validated = true;\n                var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n                if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n                    return;\n                }\n                ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n                // property, it may be the creator of the child that's responsible for\n                // assigning it a key.\n                var childOwner = \"\";\n                if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n                    // Give the component that originally created this child.\n                    childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n                }\n                setCurrentlyValidatingElement(element);\n                error('Each child in a list should have a unique \"key\" prop.' + \"%s%s See https://reactjs.org/link/warning-keys for more information.\", currentComponentErrorInfo, childOwner);\n                setCurrentlyValidatingElement(null);\n            }\n        }\n        /**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */ function validateChildKeys(node, parentType) {\n            {\n                if (typeof node !== \"object\" || !node) {\n                    return;\n                }\n                if (node.$$typeof === REACT_CLIENT_REFERENCE) ;\n                else if (isArray(node)) {\n                    for(var i = 0; i < node.length; i++){\n                        var child = node[i];\n                        if (isValidElement(child)) {\n                            validateExplicitKey(child, parentType);\n                        }\n                    }\n                } else if (isValidElement(node)) {\n                    // This element was passed in a valid location.\n                    if (node._store) {\n                        node._store.validated = true;\n                    }\n                } else {\n                    var iteratorFn = getIteratorFn(node);\n                    if (typeof iteratorFn === \"function\") {\n                        // Entry iterators used to provide implicit keys,\n                        // but now we print a separate warning for them later.\n                        if (iteratorFn !== node.entries) {\n                            var iterator = iteratorFn.call(node);\n                            var step;\n                            while(!(step = iterator.next()).done){\n                                if (isValidElement(step.value)) {\n                                    validateExplicitKey(step.value, parentType);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        /**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */ function validatePropTypes(element) {\n            {\n                var type = element.type;\n                if (type === null || type === undefined || typeof type === \"string\") {\n                    return;\n                }\n                if (type.$$typeof === REACT_CLIENT_REFERENCE) {\n                    return;\n                }\n                var propTypes;\n                if (typeof type === \"function\") {\n                    propTypes = type.propTypes;\n                } else if (typeof type === \"object\" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n                // Inner props are checked in the reconciler.\n                type.$$typeof === REACT_MEMO_TYPE)) {\n                    propTypes = type.propTypes;\n                } else {\n                    return;\n                }\n                if (propTypes) {\n                    // Intentionally inside to avoid triggering lazy initializers:\n                    var name = getComponentNameFromType(type);\n                    checkPropTypes(propTypes, element.props, \"prop\", name, element);\n                } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n                    propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\n                    var _name = getComponentNameFromType(type);\n                    error(\"Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?\", _name || \"Unknown\");\n                }\n                if (typeof type.getDefaultProps === \"function\" && !type.getDefaultProps.isReactClassApproved) {\n                    error(\"getDefaultProps is only used on classic React.createClass \" + \"definitions. Use a static property named `defaultProps` instead.\");\n                }\n            }\n        }\n        /**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */ function validateFragmentProps(fragment) {\n            {\n                var keys = Object.keys(fragment.props);\n                for(var i = 0; i < keys.length; i++){\n                    var key = keys[i];\n                    if (key !== \"children\" && key !== \"key\") {\n                        setCurrentlyValidatingElement(fragment);\n                        error(\"Invalid prop `%s` supplied to `React.Fragment`. \" + \"React.Fragment can only have `key` and `children` props.\", key);\n                        setCurrentlyValidatingElement(null);\n                        break;\n                    }\n                }\n                if (fragment.ref !== null) {\n                    setCurrentlyValidatingElement(fragment);\n                    error(\"Invalid attribute `ref` supplied to `React.Fragment`.\");\n                    setCurrentlyValidatingElement(null);\n                }\n            }\n        }\n        var didWarnAboutKeySpread = {};\n        function jsxWithValidation(type, props, key, isStaticChildren, source, self) {\n            {\n                var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n                // succeed and there will likely be errors in render.\n                if (!validType) {\n                    var info = \"\";\n                    if (type === undefined || typeof type === \"object\" && type !== null && Object.keys(type).length === 0) {\n                        info += \" You likely forgot to export your component from the file \" + \"it's defined in, or you might have mixed up default and named imports.\";\n                    }\n                    var sourceInfo = getSourceInfoErrorAddendum(source);\n                    if (sourceInfo) {\n                        info += sourceInfo;\n                    } else {\n                        info += getDeclarationErrorAddendum();\n                    }\n                    var typeString;\n                    if (type === null) {\n                        typeString = \"null\";\n                    } else if (isArray(type)) {\n                        typeString = \"array\";\n                    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n                        typeString = \"<\" + (getComponentNameFromType(type.type) || \"Unknown\") + \" />\";\n                        info = \" Did you accidentally export a JSX literal instead of a component?\";\n                    } else {\n                        typeString = typeof type;\n                    }\n                    error(\"React.jsx: type is invalid -- expected a string (for \" + \"built-in components) or a class/function (for composite \" + \"components) but got: %s.%s\", typeString, info);\n                }\n                var element = jsxDEV$1(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.\n                // TODO: Drop this when these are no longer allowed as the type argument.\n                if (element == null) {\n                    return element;\n                } // Skip key warning if the type isn't valid since our key validation logic\n                // doesn't expect a non-string/function type and can throw confusing errors.\n                // We don't want exception behavior to differ between dev and prod.\n                // (Rendering will throw with a helpful message and as soon as the type is\n                // fixed, the key warnings will appear.)\n                if (validType) {\n                    var children = props.children;\n                    if (children !== undefined) {\n                        if (isStaticChildren) {\n                            if (isArray(children)) {\n                                for(var i = 0; i < children.length; i++){\n                                    validateChildKeys(children[i], type);\n                                }\n                                if (Object.freeze) {\n                                    Object.freeze(children);\n                                }\n                            } else {\n                                error(\"React.jsx: Static children should always be an array. \" + \"You are likely explicitly calling React.jsxs or React.jsxDEV. \" + \"Use the Babel transform instead.\");\n                            }\n                        } else {\n                            validateChildKeys(children, type);\n                        }\n                    }\n                }\n                if (hasOwnProperty.call(props, \"key\")) {\n                    var componentName = getComponentNameFromType(type);\n                    var keys = Object.keys(props).filter(function(k) {\n                        return k !== \"key\";\n                    });\n                    var beforeExample = keys.length > 0 ? \"{key: someKey, \" + keys.join(\": ..., \") + \": ...}\" : \"{key: someKey}\";\n                    if (!didWarnAboutKeySpread[componentName + beforeExample]) {\n                        var afterExample = keys.length > 0 ? \"{\" + keys.join(\": ..., \") + \": ...}\" : \"{}\";\n                        error('A props object containing a \"key\" prop is being spread into JSX:\\n' + \"  let props = %s;\\n\" + \"  <%s {...props} />\\n\" + \"React keys must be passed directly to JSX without using spread:\\n\" + \"  let props = %s;\\n\" + \"  <%s key={someKey} {...props} />\", beforeExample, componentName, afterExample, componentName);\n                        didWarnAboutKeySpread[componentName + beforeExample] = true;\n                    }\n                }\n                if (type === REACT_FRAGMENT_TYPE) {\n                    validateFragmentProps(element);\n                } else {\n                    validatePropTypes(element);\n                }\n                return element;\n            }\n        } // These two functions exist to still get child warnings in dev\n        var jsxDEV = jsxWithValidation;\n        exports.Fragment = REACT_FRAGMENT_TYPE;\n        exports.jsxDEV = jsxDEV;\n    })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/jsx-dev-runtime.js ***!
  \******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nif (false) {} else {\n    module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QvanN4LWRldi1ydW50aW1lLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsS0FBeUIsRUFBYyxFQUUxQyxNQUFNO0lBQ0xDLDhMQUF5QjtBQUMzQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3JlYWN0L2pzeC1kZXYtcnVudGltZS5qcz9jYTIwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtZGV2LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOlsicHJvY2VzcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./app/globals.css":
/*!*************************!*\
  !*** ./app/globals.css ***!
  \*************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"5ef1e08d8789\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9nbG9iYWxzLmNzcyIsIm1hcHBpbmdzIjoiO0FBQUEsK0RBQWUsY0FBYztBQUM3QixJQUFJLElBQVUsSUFBSSxpQkFBaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vYXBwL2dsb2JhbHMuY3NzPzVhMDYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCI1ZWYxZTA4ZDg3ODlcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/globals.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./app/ConvexClientProvider.jsx":
/*!**************************************!*\
  !*** ./app/ConvexClientProvider.jsx ***!
  \**************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ ConvexClientProvider; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var convex_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! convex/react */ \"(app-pages-browser)/./node_modules/convex/dist/esm/react/index.js\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \n\nconst convex = new convex_react__WEBPACK_IMPORTED_MODULE_1__.ConvexReactClient(\"https://clean-emu-191.convex.cloud\");\nfunction ConvexClientProvider(param) {\n    let { children } = param;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(convex_react__WEBPACK_IMPORTED_MODULE_1__.ConvexProvider, {\n        client: convex,\n        children: children\n    }, void 0, false, {\n        fileName: \"/Users/sathviknallamalli/holistichealth/holisticreact/app/ConvexClientProvider.jsx\",\n        lineNumber: 8,\n        columnNumber: 10\n    }, this);\n}\n_c = ConvexClientProvider;\nvar _c;\n$RefreshReg$(_c, \"ConvexClientProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9Db252ZXhDbGllbnRQcm92aWRlci5qc3giLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUVpRTtBQUVqRSxNQUFNRSxTQUFTLElBQUlELDJEQUFpQkEsQ0FBQ0Usb0NBQWtDO0FBRXhELFNBQVNHLHFCQUFxQixLQUFZO1FBQVosRUFBRUMsUUFBUSxFQUFFLEdBQVo7SUFDM0MscUJBQU8sOERBQUNQLHdEQUFjQTtRQUFDUSxRQUFRTjtrQkFBU0s7Ozs7OztBQUMxQztLQUZ3QkQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vYXBwL0NvbnZleENsaWVudFByb3ZpZGVyLmpzeD9iMWQxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIGNsaWVudFwiO1xuXG5pbXBvcnQgeyBDb252ZXhQcm92aWRlciwgQ29udmV4UmVhY3RDbGllbnQgfSBmcm9tIFwiY29udmV4L3JlYWN0XCI7XG5cbmNvbnN0IGNvbnZleCA9IG5ldyBDb252ZXhSZWFjdENsaWVudChwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19DT05WRVhfVVJMKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQ29udmV4Q2xpZW50UHJvdmlkZXIoeyBjaGlsZHJlbiB9KSB7XG4gIHJldHVybiA8Q29udmV4UHJvdmlkZXIgY2xpZW50PXtjb252ZXh9PntjaGlsZHJlbn08L0NvbnZleFByb3ZpZGVyPjtcbn1cbiJdLCJuYW1lcyI6WyJDb252ZXhQcm92aWRlciIsIkNvbnZleFJlYWN0Q2xpZW50IiwiY29udmV4IiwicHJvY2VzcyIsImVudiIsIk5FWFRfUFVCTElDX0NPTlZFWF9VUkwiLCJDb252ZXhDbGllbnRQcm92aWRlciIsImNoaWxkcmVuIiwiY2xpZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/ConvexClientProvider.jsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/font/google/target.css?{\"path\":\"app/layout.js\",\"import\":\"Inter\",\"arguments\":[{\"subsets\":[\"latin\"]}],\"variableName\":\"inter\"}":
/*!*******************************************************************************************************************************************************!*\
  !*** ./node_modules/next/font/google/target.css?{"path":"app/layout.js","import":"Inter","arguments":[{"subsets":["latin"]}],"variableName":"inter"} ***!
  \*******************************************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("// extracted by mini-css-extract-plugin\nmodule.exports = {\"style\":{\"fontFamily\":\"'__Inter_aaf875', '__Inter_Fallback_aaf875'\",\"fontStyle\":\"normal\"},\"className\":\"__className_aaf875\"};\n    if(true) {\n      // 1708211219220\n      var cssReload = __webpack_require__(/*! ./node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js */ \"(app-pages-browser)/./node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js\")(module.id, {\"publicPath\":\"/_next/\",\"esModule\":false,\"locals\":true});\n      module.hot.dispose(cssReload);\n      \n    }\n  //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2ZvbnQvZ29vZ2xlL3RhcmdldC5jc3M/e1wicGF0aFwiOlwiYXBwL2xheW91dC5qc1wiLFwiaW1wb3J0XCI6XCJJbnRlclwiLFwiYXJndW1lbnRzXCI6W3tcInN1YnNldHNcIjpbXCJsYXRpblwiXX1dLFwidmFyaWFibGVOYW1lXCI6XCJpbnRlclwifSIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBLGtCQUFrQixTQUFTLGdGQUFnRjtBQUMzRyxPQUFPLElBQVU7QUFDakI7QUFDQSxzQkFBc0IsbUJBQU8sQ0FBQyx3TUFBMkksY0FBYyxzREFBc0Q7QUFDN08sTUFBTSxVQUFVO0FBQ2hCO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9mb250L2dvb2dsZS90YXJnZXQuY3NzPzgxMTkiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcInN0eWxlXCI6e1wiZm9udEZhbWlseVwiOlwiJ19fSW50ZXJfYWFmODc1JywgJ19fSW50ZXJfRmFsbGJhY2tfYWFmODc1J1wiLFwiZm9udFN0eWxlXCI6XCJub3JtYWxcIn0sXCJjbGFzc05hbWVcIjpcIl9fY2xhc3NOYW1lX2FhZjg3NVwifTtcbiAgICBpZihtb2R1bGUuaG90KSB7XG4gICAgICAvLyAxNzA4MjExMjE5MjIwXG4gICAgICB2YXIgY3NzUmVsb2FkID0gcmVxdWlyZShcIi9Vc2Vycy9zYXRodmlrbmFsbGFtYWxsaS9ob2xpc3RpY2hlYWx0aC9ob2xpc3RpY3JlYWN0L25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vaG1yL2hvdE1vZHVsZVJlcGxhY2VtZW50LmpzXCIpKG1vZHVsZS5pZCwge1wicHVibGljUGF0aFwiOlwiL19uZXh0L1wiLFwiZXNNb2R1bGVcIjpmYWxzZSxcImxvY2Fsc1wiOnRydWV9KTtcbiAgICAgIG1vZHVsZS5ob3QuZGlzcG9zZShjc3NSZWxvYWQpO1xuICAgICAgXG4gICAgfVxuICAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/font/google/target.css?{\"path\":\"app/layout.js\",\"import\":\"Inter\",\"arguments\":[{\"subsets\":[\"latin\"]}],\"variableName\":\"inter\"}\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/browser/http_client.js":
/*!*************************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/http_client.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConvexHttpClient: function() { return /* binding */ ConvexHttpClient; },\n/* harmony export */   STATUS_CODE_BAD_REQUEST: function() { return /* binding */ STATUS_CODE_BAD_REQUEST; },\n/* harmony export */   STATUS_CODE_OK: function() { return /* binding */ STATUS_CODE_OK; },\n/* harmony export */   STATUS_CODE_UDF_FAILED: function() { return /* binding */ STATUS_CODE_UDF_FAILED; },\n/* harmony export */   setFetch: function() { return /* binding */ setFetch; }\n/* harmony export */ });\n/* harmony import */ var _server_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../server/api.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/server/api.js\");\n/* harmony import */ var _common_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/index.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/common/index.js\");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../index.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/index.js\");\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../values/index.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/values/index.js\");\n/* harmony import */ var _logging_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./logging.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/browser/logging.js\");\n\n\n\n\n\n\nconst STATUS_CODE_OK = 200;\nconst STATUS_CODE_BAD_REQUEST = 400;\nconst STATUS_CODE_UDF_FAILED = 560;\nlet specifiedFetch = void 0;\nfunction setFetch(f) {\n    specifiedFetch = f;\n}\nclass ConvexHttpClient {\n    /**\n   * Obtain the {@link ConvexHttpClient}'s URL to its backend.\n   *\n   * @returns The URL to the Convex backend, including the client's API version.\n   */ backendUrl() {\n        return this.address;\n    }\n    /**\n   * Set the authentication token to be used for subsequent queries and mutations.\n   *\n   * Should be called whenever the token changes (i.e. due to expiration and refresh).\n   *\n   * @param value - JWT-encoded OpenID Connect identity token.\n   */ setAuth(value) {\n        this.clearAuth();\n        this.auth = value;\n    }\n    /**\n   * @internal\n   */ setAdminAuth(token) {\n        this.clearAuth();\n        this.adminAuth = token;\n    }\n    /**\n   * Clear the current authentication token if set.\n   */ clearAuth() {\n        this.auth = void 0;\n        this.adminAuth = void 0;\n    }\n    /**\n   * Sets whether the result log lines should be printed on the console or not.\n   *\n   * @internal\n   */ setDebug(debug) {\n        this.debug = debug;\n    }\n    /**\n   * Used to customize the fetch behavior in some runtimes.\n   *\n   * @internal\n   */ setFetchOptions(fetchOptions) {\n        this.fetchOptions = fetchOptions;\n    }\n    /**\n   * Execute a Convex query function.\n   *\n   * @param name - The name of the query.\n   * @param args - The arguments object for the query. If this is omitted,\n   * the arguments will be `{}`.\n   * @returns A promise of the query's result.\n   */ async query(query) {\n        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            args[_key - 1] = arguments[_key];\n        }\n        const queryArgs = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_1__.parseArgs)(args[0]);\n        const name = (0,_server_api_js__WEBPACK_IMPORTED_MODULE_0__.getFunctionName)(query);\n        const body = JSON.stringify({\n            path: name,\n            format: \"convex_encoded_json\",\n            args: [\n                (0,_values_index_js__WEBPACK_IMPORTED_MODULE_3__.convexToJson)(queryArgs)\n            ]\n        });\n        const headers = {\n            \"Content-Type\": \"application/json\",\n            \"Convex-Client\": \"npm-\".concat(_index_js__WEBPACK_IMPORTED_MODULE_2__.version)\n        };\n        if (this.adminAuth) {\n            headers[\"Authorization\"] = \"Convex \".concat(this.adminAuth);\n        } else if (this.auth) {\n            headers[\"Authorization\"] = \"Bearer \".concat(this.auth);\n        }\n        const localFetch = specifiedFetch || fetch;\n        const response = await localFetch(\"\".concat(this.address, \"/query\"), {\n            ...this.fetchOptions,\n            body,\n            method: \"POST\",\n            headers,\n            credentials: \"include\"\n        });\n        if (!response.ok && response.status !== STATUS_CODE_UDF_FAILED) {\n            throw new Error(await response.text());\n        }\n        const respJSON = await response.json();\n        if (this.debug) {\n            var _respJSON_logLines;\n            for (const line of (_respJSON_logLines = respJSON.logLines) !== null && _respJSON_logLines !== void 0 ? _respJSON_logLines : []){\n                (0,_logging_js__WEBPACK_IMPORTED_MODULE_4__.logToConsole)(\"info\", \"query\", name, line);\n            }\n        }\n        switch(respJSON.status){\n            case \"success\":\n                return (0,_values_index_js__WEBPACK_IMPORTED_MODULE_3__.jsonToConvex)(respJSON.value, true);\n            case \"error\":\n                if (respJSON.errorData !== void 0) {\n                    throw forwardErrorData(respJSON.errorData, new _values_index_js__WEBPACK_IMPORTED_MODULE_3__.ConvexError(respJSON.errorMessage));\n                }\n                throw new Error(respJSON.errorMessage);\n            default:\n                throw new Error(\"Invalid response: \".concat(JSON.stringify(respJSON)));\n        }\n    }\n    /**\n   * Execute a Convex mutation function.\n   *\n   * @param name - The name of the mutation.\n   * @param args - The arguments object for the mutation. If this is omitted,\n   * the arguments will be `{}`.\n   * @returns A promise of the mutation's result.\n   */ async mutation(mutation) {\n        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            args[_key - 1] = arguments[_key];\n        }\n        const mutationArgs = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_1__.parseArgs)(args[0]);\n        const name = (0,_server_api_js__WEBPACK_IMPORTED_MODULE_0__.getFunctionName)(mutation);\n        const body = JSON.stringify({\n            path: name,\n            format: \"convex_encoded_json\",\n            args: [\n                (0,_values_index_js__WEBPACK_IMPORTED_MODULE_3__.convexToJson)(mutationArgs)\n            ]\n        });\n        const headers = {\n            \"Content-Type\": \"application/json\",\n            \"Convex-Client\": \"npm-\".concat(_index_js__WEBPACK_IMPORTED_MODULE_2__.version)\n        };\n        if (this.adminAuth) {\n            headers[\"Authorization\"] = \"Convex \".concat(this.adminAuth);\n        } else if (this.auth) {\n            headers[\"Authorization\"] = \"Bearer \".concat(this.auth);\n        }\n        const localFetch = specifiedFetch || fetch;\n        const response = await localFetch(\"\".concat(this.address, \"/mutation\"), {\n            ...this.fetchOptions,\n            body,\n            method: \"POST\",\n            headers,\n            credentials: \"include\"\n        });\n        if (!response.ok && response.status !== STATUS_CODE_UDF_FAILED) {\n            throw new Error(await response.text());\n        }\n        const respJSON = await response.json();\n        if (this.debug) {\n            var _respJSON_logLines;\n            for (const line of (_respJSON_logLines = respJSON.logLines) !== null && _respJSON_logLines !== void 0 ? _respJSON_logLines : []){\n                (0,_logging_js__WEBPACK_IMPORTED_MODULE_4__.logToConsole)(\"info\", \"mutation\", name, line);\n            }\n        }\n        switch(respJSON.status){\n            case \"success\":\n                return (0,_values_index_js__WEBPACK_IMPORTED_MODULE_3__.jsonToConvex)(respJSON.value, true);\n            case \"error\":\n                if (respJSON.errorData !== void 0) {\n                    throw forwardErrorData(respJSON.errorData, new _values_index_js__WEBPACK_IMPORTED_MODULE_3__.ConvexError(respJSON.errorMessage));\n                }\n                throw new Error(respJSON.errorMessage);\n            default:\n                throw new Error(\"Invalid response: \".concat(JSON.stringify(respJSON)));\n        }\n    }\n    /**\n   * Execute a Convex action function.\n   *\n   * @param name - The name of the action.\n   * @param args - The arguments object for the action. If this is omitted,\n   * the arguments will be `{}`.\n   * @returns A promise of the action's result.\n   */ async action(action) {\n        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            args[_key - 1] = arguments[_key];\n        }\n        const actionArgs = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_1__.parseArgs)(args[0]);\n        const name = (0,_server_api_js__WEBPACK_IMPORTED_MODULE_0__.getFunctionName)(action);\n        const body = JSON.stringify({\n            path: name,\n            format: \"convex_encoded_json\",\n            args: [\n                (0,_values_index_js__WEBPACK_IMPORTED_MODULE_3__.convexToJson)(actionArgs)\n            ]\n        });\n        const headers = {\n            \"Content-Type\": \"application/json\",\n            \"Convex-Client\": \"npm-\".concat(_index_js__WEBPACK_IMPORTED_MODULE_2__.version)\n        };\n        if (this.adminAuth) {\n            headers[\"Authorization\"] = \"Convex \".concat(this.adminAuth);\n        } else if (this.auth) {\n            headers[\"Authorization\"] = \"Bearer \".concat(this.auth);\n        }\n        const localFetch = specifiedFetch || fetch;\n        const response = await localFetch(\"\".concat(this.address, \"/action\"), {\n            ...this.fetchOptions,\n            body,\n            method: \"POST\",\n            headers,\n            credentials: \"include\"\n        });\n        if (!response.ok && response.status !== STATUS_CODE_UDF_FAILED) {\n            throw new Error(await response.text());\n        }\n        const respJSON = await response.json();\n        if (this.debug) {\n            var _respJSON_logLines;\n            for (const line of (_respJSON_logLines = respJSON.logLines) !== null && _respJSON_logLines !== void 0 ? _respJSON_logLines : []){\n                (0,_logging_js__WEBPACK_IMPORTED_MODULE_4__.logToConsole)(\"info\", \"action\", name, line);\n            }\n        }\n        switch(respJSON.status){\n            case \"success\":\n                return (0,_values_index_js__WEBPACK_IMPORTED_MODULE_3__.jsonToConvex)(respJSON.value, true);\n            case \"error\":\n                if (respJSON.errorData !== void 0) {\n                    throw forwardErrorData(respJSON.errorData, new _values_index_js__WEBPACK_IMPORTED_MODULE_3__.ConvexError(respJSON.errorMessage));\n                }\n                throw new Error(respJSON.errorMessage);\n            default:\n                throw new Error(\"Invalid response: \".concat(JSON.stringify(respJSON)));\n        }\n    }\n    /**\n   * Execute a Convex function of an unknown type.\n   *\n   * @param name - The name of the function.\n   * @param args - The arguments object for the function. If this is omitted,\n   * the arguments will be `{}`.\n   * @returns A promise of the function's result.\n   *\n   * @internal\n   */ async function(anyFunction) {\n        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            args[_key - 1] = arguments[_key];\n        }\n        const functionArgs = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_1__.parseArgs)(args[0]);\n        const name = typeof anyFunction === \"string\" ? anyFunction : (0,_server_api_js__WEBPACK_IMPORTED_MODULE_0__.getFunctionName)(anyFunction);\n        const body = JSON.stringify({\n            path: name,\n            format: \"convex_encoded_json\",\n            args: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_3__.convexToJson)(functionArgs)\n        });\n        const headers = {\n            \"Content-Type\": \"application/json\",\n            \"Convex-Client\": \"npm-\".concat(_index_js__WEBPACK_IMPORTED_MODULE_2__.version)\n        };\n        if (this.adminAuth) {\n            headers[\"Authorization\"] = \"Convex \".concat(this.adminAuth);\n        } else if (this.auth) {\n            headers[\"Authorization\"] = \"Bearer \".concat(this.auth);\n        }\n        const localFetch = specifiedFetch || fetch;\n        const response = await localFetch(\"\".concat(this.address, \"/function\"), {\n            ...this.fetchOptions,\n            body,\n            method: \"POST\",\n            headers,\n            credentials: \"include\"\n        });\n        if (!response.ok && response.status !== STATUS_CODE_UDF_FAILED) {\n            throw new Error(await response.text());\n        }\n        const respJSON = await response.json();\n        if (this.debug) {\n            var _respJSON_logLines;\n            for (const line of (_respJSON_logLines = respJSON.logLines) !== null && _respJSON_logLines !== void 0 ? _respJSON_logLines : []){\n                (0,_logging_js__WEBPACK_IMPORTED_MODULE_4__.logToConsole)(\"info\", \"any\", name, line);\n            }\n        }\n        switch(respJSON.status){\n            case \"success\":\n                return (0,_values_index_js__WEBPACK_IMPORTED_MODULE_3__.jsonToConvex)(respJSON.value, true);\n            case \"error\":\n                if (respJSON.errorData !== void 0) {\n                    throw forwardErrorData(respJSON.errorData, new _values_index_js__WEBPACK_IMPORTED_MODULE_3__.ConvexError(respJSON.errorMessage));\n                }\n                throw new Error(respJSON.errorMessage);\n            default:\n                throw new Error(\"Invalid response: \".concat(JSON.stringify(respJSON)));\n        }\n    }\n    /**\n   * Create a new {@link ConvexHttpClient}.\n   *\n   * @param address - The url of your Convex deployment, often provided\n   * by an environment variable. E.g. `https://small-mouse-123.convex.cloud`.\n   */ constructor(address){\n        (0,_common_index_js__WEBPACK_IMPORTED_MODULE_1__.validateDeploymentUrl)(address);\n        this.address = \"\".concat(address, \"/api\");\n        this.debug = true;\n    }\n}\nfunction forwardErrorData(errorData, error) {\n    error.data = (0,_values_index_js__WEBPACK_IMPORTED_MODULE_3__.jsonToConvex)(errorData);\n    return error;\n} //# sourceMappingURL=http_client.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/browser/http_client.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/browser/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/index.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseConvexClient: function() { return /* reexport safe */ _sync_client_js__WEBPACK_IMPORTED_MODULE_0__.BaseConvexClient; },\n/* harmony export */   ConvexClient: function() { return /* reexport safe */ _simple_client_js__WEBPACK_IMPORTED_MODULE_1__.ConvexClient; },\n/* harmony export */   ConvexHttpClient: function() { return /* reexport safe */ _http_client_js__WEBPACK_IMPORTED_MODULE_2__.ConvexHttpClient; }\n/* harmony export */ });\n/* harmony import */ var _sync_client_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sync/client.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/client.js\");\n/* harmony import */ var _simple_client_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./simple_client.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/browser/simple_client.js\");\n/* harmony import */ var _http_client_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./http_client.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/browser/http_client.js\");\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vYnJvd3Nlci9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBYTtBQUN1QztBQUNGO0FBQ0UsQ0FDcEQsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vYnJvd3Nlci9pbmRleC5qcz81ZjJlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuZXhwb3J0IHsgQmFzZUNvbnZleENsaWVudCB9IGZyb20gXCIuL3N5bmMvY2xpZW50LmpzXCI7XG5leHBvcnQgeyBDb252ZXhDbGllbnQgfSBmcm9tIFwiLi9zaW1wbGVfY2xpZW50LmpzXCI7XG5leHBvcnQgeyBDb252ZXhIdHRwQ2xpZW50IH0gZnJvbSBcIi4vaHR0cF9jbGllbnQuanNcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbIkJhc2VDb252ZXhDbGllbnQiLCJDb252ZXhDbGllbnQiLCJDb252ZXhIdHRwQ2xpZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/browser/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/browser/logging.js":
/*!*********************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/logging.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createHybridErrorStacktrace: function() { return /* binding */ createHybridErrorStacktrace; },\n/* harmony export */   forwardData: function() { return /* binding */ forwardData; },\n/* harmony export */   logFatalError: function() { return /* binding */ logFatalError; },\n/* harmony export */   logToConsole: function() { return /* binding */ logToConsole; }\n/* harmony export */ });\n\nconst INFO_COLOR = \"color:rgb(0, 145, 255)\";\nfunction prefix_for_source(source) {\n    switch(source){\n        case \"query\":\n            return \"Q\";\n        case \"mutation\":\n            return \"M\";\n        case \"action\":\n            return \"A\";\n        case \"any\":\n            return \"?\";\n    }\n}\nfunction logToConsole(type, source, udfPath, message) {\n    const prefix = prefix_for_source(source);\n    if (typeof message === \"object\") {\n        message = \"ConvexError \".concat(JSON.stringify(message.errorData, null, 2));\n    }\n    if (type === \"info\") {\n        const match = message.match(/^\\[.*?\\] /);\n        if (match === null) {\n            console.error(\"[CONVEX \".concat(prefix, \"(\").concat(udfPath, \")] Could not parse console.log\"));\n            return;\n        }\n        const level = message.slice(1, match[0].length - 2);\n        const args = message.slice(match[0].length);\n        console.log(\"%c[CONVEX \".concat(prefix, \"(\").concat(udfPath, \")] [\").concat(level, \"]\"), INFO_COLOR, args);\n    } else {\n        console.error(\"[CONVEX \".concat(prefix, \"(\").concat(udfPath, \")] \").concat(message));\n    }\n}\nfunction logFatalError(message) {\n    const errorMessage = \"[CONVEX FATAL ERROR] \".concat(message);\n    console.error(errorMessage);\n    return new Error(errorMessage);\n}\nfunction createHybridErrorStacktrace(source, udfPath, result) {\n    const prefix = prefix_for_source(source);\n    return \"[CONVEX \".concat(prefix, \"(\").concat(udfPath, \")] \").concat(result.errorMessage, \"\\n  Called by client\");\n}\nfunction forwardData(result, error) {\n    error.data = result.errorData;\n    return error;\n} //# sourceMappingURL=logging.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vYnJvd3Nlci9sb2dnaW5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBYTtBQUNiLE1BQU1BLGFBQWE7QUFDbkIsU0FBU0Msa0JBQWtCQyxNQUFNO0lBQy9CLE9BQVFBO1FBQ04sS0FBSztZQUNILE9BQU87UUFDVCxLQUFLO1lBQ0gsT0FBTztRQUNULEtBQUs7WUFDSCxPQUFPO1FBQ1QsS0FBSztZQUNILE9BQU87SUFDWDtBQUNGO0FBQ08sU0FBU0MsYUFBYUMsSUFBSSxFQUFFRixNQUFNLEVBQUVHLE9BQU8sRUFBRUMsT0FBTztJQUN6RCxNQUFNQyxTQUFTTixrQkFBa0JDO0lBQ2pDLElBQUksT0FBT0ksWUFBWSxVQUFVO1FBQy9CQSxVQUFVLGVBQTBELE9BQTNDRSxLQUFLQyxTQUFTLENBQUNILFFBQVFJLFNBQVMsRUFBRSxNQUFNO0lBQ25FO0lBQ0EsSUFBSU4sU0FBUyxRQUFRO1FBQ25CLE1BQU1PLFFBQVFMLFFBQVFLLEtBQUssQ0FBQztRQUM1QixJQUFJQSxVQUFVLE1BQU07WUFDbEJDLFFBQVFDLEtBQUssQ0FDWCxXQUFxQlIsT0FBVkUsUUFBTyxLQUFXLE9BQVJGLFNBQVE7WUFFL0I7UUFDRjtRQUNBLE1BQU1TLFFBQVFSLFFBQVFTLEtBQUssQ0FBQyxHQUFHSixLQUFLLENBQUMsRUFBRSxDQUFDSyxNQUFNLEdBQUc7UUFDakQsTUFBTUMsT0FBT1gsUUFBUVMsS0FBSyxDQUFDSixLQUFLLENBQUMsRUFBRSxDQUFDSyxNQUFNO1FBQzFDSixRQUFRTSxHQUFHLENBQ1QsYUFBdUJiLE9BQVZFLFFBQU8sS0FBaUJPLE9BQWRULFNBQVEsUUFBWSxPQUFOUyxPQUFNLE1BQzNDZCxZQUNBaUI7SUFFSixPQUFPO1FBQ0xMLFFBQVFDLEtBQUssQ0FBQyxXQUFxQlIsT0FBVkUsUUFBTyxLQUFnQkQsT0FBYkQsU0FBUSxPQUFhLE9BQVJDO0lBQ2xEO0FBQ0Y7QUFDTyxTQUFTYSxjQUFjYixPQUFPO0lBQ25DLE1BQU1jLGVBQWUsd0JBQWdDLE9BQVJkO0lBQzdDTSxRQUFRQyxLQUFLLENBQUNPO0lBQ2QsT0FBTyxJQUFJQyxNQUFNRDtBQUNuQjtBQUNPLFNBQVNFLDRCQUE0QnBCLE1BQU0sRUFBRUcsT0FBTyxFQUFFa0IsTUFBTTtJQUNqRSxNQUFNaEIsU0FBU04sa0JBQWtCQztJQUNqQyxPQUFPLFdBQXFCRyxPQUFWRSxRQUFPLEtBQWdCZ0IsT0FBYmxCLFNBQVEsT0FBeUIsT0FBcEJrQixPQUFPSCxZQUFZLEVBQUM7QUFFL0Q7QUFDTyxTQUFTSSxZQUFZRCxNQUFNLEVBQUVWLEtBQUs7SUFDdkNBLE1BQU1ZLElBQUksR0FBR0YsT0FBT2IsU0FBUztJQUM3QixPQUFPRztBQUNULEVBQ0EsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vYnJvd3Nlci9sb2dnaW5nLmpzPzViZTIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBJTkZPX0NPTE9SID0gXCJjb2xvcjpyZ2IoMCwgMTQ1LCAyNTUpXCI7XG5mdW5jdGlvbiBwcmVmaXhfZm9yX3NvdXJjZShzb3VyY2UpIHtcbiAgc3dpdGNoIChzb3VyY2UpIHtcbiAgICBjYXNlIFwicXVlcnlcIjpcbiAgICAgIHJldHVybiBcIlFcIjtcbiAgICBjYXNlIFwibXV0YXRpb25cIjpcbiAgICAgIHJldHVybiBcIk1cIjtcbiAgICBjYXNlIFwiYWN0aW9uXCI6XG4gICAgICByZXR1cm4gXCJBXCI7XG4gICAgY2FzZSBcImFueVwiOlxuICAgICAgcmV0dXJuIFwiP1wiO1xuICB9XG59XG5leHBvcnQgZnVuY3Rpb24gbG9nVG9Db25zb2xlKHR5cGUsIHNvdXJjZSwgdWRmUGF0aCwgbWVzc2FnZSkge1xuICBjb25zdCBwcmVmaXggPSBwcmVmaXhfZm9yX3NvdXJjZShzb3VyY2UpO1xuICBpZiAodHlwZW9mIG1lc3NhZ2UgPT09IFwib2JqZWN0XCIpIHtcbiAgICBtZXNzYWdlID0gYENvbnZleEVycm9yICR7SlNPTi5zdHJpbmdpZnkobWVzc2FnZS5lcnJvckRhdGEsIG51bGwsIDIpfWA7XG4gIH1cbiAgaWYgKHR5cGUgPT09IFwiaW5mb1wiKSB7XG4gICAgY29uc3QgbWF0Y2ggPSBtZXNzYWdlLm1hdGNoKC9eXFxbLio/XFxdIC8pO1xuICAgIGlmIChtYXRjaCA9PT0gbnVsbCkge1xuICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgYFtDT05WRVggJHtwcmVmaXh9KCR7dWRmUGF0aH0pXSBDb3VsZCBub3QgcGFyc2UgY29uc29sZS5sb2dgXG4gICAgICApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBsZXZlbCA9IG1lc3NhZ2Uuc2xpY2UoMSwgbWF0Y2hbMF0ubGVuZ3RoIC0gMik7XG4gICAgY29uc3QgYXJncyA9IG1lc3NhZ2Uuc2xpY2UobWF0Y2hbMF0ubGVuZ3RoKTtcbiAgICBjb25zb2xlLmxvZyhcbiAgICAgIGAlY1tDT05WRVggJHtwcmVmaXh9KCR7dWRmUGF0aH0pXSBbJHtsZXZlbH1dYCxcbiAgICAgIElORk9fQ09MT1IsXG4gICAgICBhcmdzXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zb2xlLmVycm9yKGBbQ09OVkVYICR7cHJlZml4fSgke3VkZlBhdGh9KV0gJHttZXNzYWdlfWApO1xuICB9XG59XG5leHBvcnQgZnVuY3Rpb24gbG9nRmF0YWxFcnJvcihtZXNzYWdlKSB7XG4gIGNvbnN0IGVycm9yTWVzc2FnZSA9IGBbQ09OVkVYIEZBVEFMIEVSUk9SXSAke21lc3NhZ2V9YDtcbiAgY29uc29sZS5lcnJvcihlcnJvck1lc3NhZ2UpO1xuICByZXR1cm4gbmV3IEVycm9yKGVycm9yTWVzc2FnZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlSHlicmlkRXJyb3JTdGFja3RyYWNlKHNvdXJjZSwgdWRmUGF0aCwgcmVzdWx0KSB7XG4gIGNvbnN0IHByZWZpeCA9IHByZWZpeF9mb3Jfc291cmNlKHNvdXJjZSk7XG4gIHJldHVybiBgW0NPTlZFWCAke3ByZWZpeH0oJHt1ZGZQYXRofSldICR7cmVzdWx0LmVycm9yTWVzc2FnZX1cbiAgQ2FsbGVkIGJ5IGNsaWVudGA7XG59XG5leHBvcnQgZnVuY3Rpb24gZm9yd2FyZERhdGEocmVzdWx0LCBlcnJvcikge1xuICBlcnJvci5kYXRhID0gcmVzdWx0LmVycm9yRGF0YTtcbiAgcmV0dXJuIGVycm9yO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9nZ2luZy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJJTkZPX0NPTE9SIiwicHJlZml4X2Zvcl9zb3VyY2UiLCJzb3VyY2UiLCJsb2dUb0NvbnNvbGUiLCJ0eXBlIiwidWRmUGF0aCIsIm1lc3NhZ2UiLCJwcmVmaXgiLCJKU09OIiwic3RyaW5naWZ5IiwiZXJyb3JEYXRhIiwibWF0Y2giLCJjb25zb2xlIiwiZXJyb3IiLCJsZXZlbCIsInNsaWNlIiwibGVuZ3RoIiwiYXJncyIsImxvZyIsImxvZ0ZhdGFsRXJyb3IiLCJlcnJvck1lc3NhZ2UiLCJFcnJvciIsImNyZWF0ZUh5YnJpZEVycm9yU3RhY2t0cmFjZSIsInJlc3VsdCIsImZvcndhcmREYXRhIiwiZGF0YSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/browser/logging.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/browser/long.js":
/*!******************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/long.js ***!
  \******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Long: function() { return /* binding */ Long; }\n/* harmony export */ });\n\nclass Long {\n    static isLong(obj) {\n        return (obj && obj.__isUnsignedLong__) === true;\n    }\n    // prettier-ignore\n    static fromBytesLE(bytes) {\n        return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24);\n    }\n    // prettier-ignore\n    toBytesLE() {\n        const hi = this.high;\n        const lo = this.low;\n        return [\n            lo & 255,\n            lo >>> 8 & 255,\n            lo >>> 16 & 255,\n            lo >>> 24,\n            hi & 255,\n            hi >>> 8 & 255,\n            hi >>> 16 & 255,\n            hi >>> 24\n        ];\n    }\n    static fromNumber(value) {\n        if (isNaN(value)) return UZERO;\n        if (value < 0) return UZERO;\n        if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;\n        return new Long(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0);\n    }\n    toString() {\n        return (BigInt(this.high) * BigInt(TWO_PWR_32_DBL) + BigInt(this.low)).toString();\n    }\n    equals(other) {\n        if (!Long.isLong(other)) other = Long.fromValue(other);\n        if (this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;\n        return this.high === other.high && this.low === other.low;\n    }\n    notEquals(other) {\n        return !this.equals(other);\n    }\n    comp(other) {\n        if (!Long.isLong(other)) other = Long.fromValue(other);\n        if (this.equals(other)) return 0;\n        return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;\n    }\n    lessThanOrEqual(other) {\n        return this.comp(/* validates */ other) <= 0;\n    }\n    static fromValue(val) {\n        if (typeof val === \"number\") return Long.fromNumber(val);\n        return new Long(val.low, val.high);\n    }\n    constructor(low, high){\n        this.low = low | 0;\n        this.high = high | 0;\n        this.__isUnsignedLong__ = true;\n    }\n}\nconst UZERO = new Long(0, 0);\nconst TWO_PWR_16_DBL = 1 << 16;\nconst TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\nconst TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\nconst MAX_UNSIGNED_VALUE = new Long(4294967295 | 0, 4294967295 | 0); //# sourceMappingURL=long.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vYnJvd3Nlci9sb25nLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBYTtBQUNOLE1BQU1BO0lBQ1gsT0FBT0MsT0FBT0MsR0FBRyxFQUFFO1FBQ2pCLE9BQU8sQ0FBQ0EsT0FBT0EsSUFBSUMsa0JBQWtCLE1BQU07SUFDN0M7SUFNQSxrQkFBa0I7SUFDbEIsT0FBT0MsWUFBWUMsS0FBSyxFQUFFO1FBQ3hCLE9BQU8sSUFBSUwsS0FDVEssS0FBSyxDQUFDLEVBQUUsR0FBR0EsS0FBSyxDQUFDLEVBQUUsSUFBSSxJQUFJQSxLQUFLLENBQUMsRUFBRSxJQUFJLEtBQUtBLEtBQUssQ0FBQyxFQUFFLElBQUksSUFDeERBLEtBQUssQ0FBQyxFQUFFLEdBQUdBLEtBQUssQ0FBQyxFQUFFLElBQUksSUFBSUEsS0FBSyxDQUFDLEVBQUUsSUFBSSxLQUFLQSxLQUFLLENBQUMsRUFBRSxJQUFJO0lBRTVEO0lBQ0Esa0JBQWtCO0lBQ2xCQyxZQUFZO1FBQ1YsTUFBTUMsS0FBSyxJQUFJLENBQUNDLElBQUk7UUFDcEIsTUFBTUMsS0FBSyxJQUFJLENBQUNDLEdBQUc7UUFDbkIsT0FBTztZQUNMRCxLQUFLO1lBQ0xBLE9BQU8sSUFBSTtZQUNYQSxPQUFPLEtBQUs7WUFDWkEsT0FBTztZQUNQRixLQUFLO1lBQ0xBLE9BQU8sSUFBSTtZQUNYQSxPQUFPLEtBQUs7WUFDWkEsT0FBTztTQUNSO0lBQ0g7SUFDQSxPQUFPSSxXQUFXQyxLQUFLLEVBQUU7UUFDdkIsSUFBSUMsTUFBTUQsUUFDUixPQUFPRTtRQUNULElBQUlGLFFBQVEsR0FDVixPQUFPRTtRQUNULElBQUlGLFNBQVNHLGdCQUNYLE9BQU9DO1FBQ1QsT0FBTyxJQUFJaEIsS0FBS1ksUUFBUUssaUJBQWlCLEdBQUdMLFFBQVFLLGlCQUFpQjtJQUN2RTtJQUNBQyxXQUFXO1FBQ1QsT0FBTyxDQUFDQyxPQUFPLElBQUksQ0FBQ1gsSUFBSSxJQUFJVyxPQUFPRixrQkFBa0JFLE9BQU8sSUFBSSxDQUFDVCxHQUFHLEdBQUdRLFFBQVE7SUFDakY7SUFDQUUsT0FBT0MsS0FBSyxFQUFFO1FBQ1osSUFBSSxDQUFDckIsS0FBS0MsTUFBTSxDQUFDb0IsUUFDZkEsUUFBUXJCLEtBQUtzQixTQUFTLENBQUNEO1FBQ3pCLElBQUksSUFBSSxDQUFDYixJQUFJLEtBQUssT0FBTyxLQUFLYSxNQUFNYixJQUFJLEtBQUssT0FBTyxHQUNsRCxPQUFPO1FBQ1QsT0FBTyxJQUFJLENBQUNBLElBQUksS0FBS2EsTUFBTWIsSUFBSSxJQUFJLElBQUksQ0FBQ0UsR0FBRyxLQUFLVyxNQUFNWCxHQUFHO0lBQzNEO0lBQ0FhLFVBQVVGLEtBQUssRUFBRTtRQUNmLE9BQU8sQ0FBQyxJQUFJLENBQUNELE1BQU0sQ0FBQ0M7SUFDdEI7SUFDQUcsS0FBS0gsS0FBSyxFQUFFO1FBQ1YsSUFBSSxDQUFDckIsS0FBS0MsTUFBTSxDQUFDb0IsUUFDZkEsUUFBUXJCLEtBQUtzQixTQUFTLENBQUNEO1FBQ3pCLElBQUksSUFBSSxDQUFDRCxNQUFNLENBQUNDLFFBQ2QsT0FBTztRQUNULE9BQU9BLE1BQU1iLElBQUksS0FBSyxJQUFJLElBQUksQ0FBQ0EsSUFBSSxLQUFLLEtBQUthLE1BQU1iLElBQUksS0FBSyxJQUFJLENBQUNBLElBQUksSUFBSWEsTUFBTVgsR0FBRyxLQUFLLElBQUksSUFBSSxDQUFDQSxHQUFHLEtBQUssSUFBSSxDQUFDLElBQUk7SUFDbkg7SUFDQWUsZ0JBQWdCSixLQUFLLEVBQUU7UUFDckIsT0FBTyxJQUFJLENBQUNHLElBQUksQ0FDZCxhQUFhLEdBQ2JILFVBQ0c7SUFDUDtJQUNBLE9BQU9DLFVBQVVJLEdBQUcsRUFBRTtRQUNwQixJQUFJLE9BQU9BLFFBQVEsVUFDakIsT0FBTzFCLEtBQUtXLFVBQVUsQ0FBQ2U7UUFDekIsT0FBTyxJQUFJMUIsS0FBSzBCLElBQUloQixHQUFHLEVBQUVnQixJQUFJbEIsSUFBSTtJQUNuQztJQWxFQW1CLFlBQVlqQixHQUFHLEVBQUVGLElBQUksQ0FBRTtRQUNyQixJQUFJLENBQUNFLEdBQUcsR0FBR0EsTUFBTTtRQUNqQixJQUFJLENBQUNGLElBQUksR0FBR0EsT0FBTztRQUNuQixJQUFJLENBQUNMLGtCQUFrQixHQUFHO0lBQzVCO0FBK0RGO0FBQ0EsTUFBTVcsUUFBUSxJQUFJZCxLQUFLLEdBQUc7QUFDMUIsTUFBTTRCLGlCQUFpQixLQUFLO0FBQzVCLE1BQU1YLGlCQUFpQlcsaUJBQWlCQTtBQUN4QyxNQUFNYixpQkFBaUJFLGlCQUFpQkE7QUFDeEMsTUFBTUQscUJBQXFCLElBQUloQixLQUFLLGFBQWEsR0FBRyxhQUFhLElBQ2pFLGdDQUFnQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL2Jyb3dzZXIvbG9uZy5qcz8yYjM0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuZXhwb3J0IGNsYXNzIExvbmcge1xuICBzdGF0aWMgaXNMb25nKG9iaikge1xuICAgIHJldHVybiAob2JqICYmIG9iai5fX2lzVW5zaWduZWRMb25nX18pID09PSB0cnVlO1xuICB9XG4gIGNvbnN0cnVjdG9yKGxvdywgaGlnaCkge1xuICAgIHRoaXMubG93ID0gbG93IHwgMDtcbiAgICB0aGlzLmhpZ2ggPSBoaWdoIHwgMDtcbiAgICB0aGlzLl9faXNVbnNpZ25lZExvbmdfXyA9IHRydWU7XG4gIH1cbiAgLy8gcHJldHRpZXItaWdub3JlXG4gIHN0YXRpYyBmcm9tQnl0ZXNMRShieXRlcykge1xuICAgIHJldHVybiBuZXcgTG9uZyhcbiAgICAgIGJ5dGVzWzBdIHwgYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzJdIDw8IDE2IHwgYnl0ZXNbM10gPDwgMjQsXG4gICAgICBieXRlc1s0XSB8IGJ5dGVzWzVdIDw8IDggfCBieXRlc1s2XSA8PCAxNiB8IGJ5dGVzWzddIDw8IDI0XG4gICAgKTtcbiAgfVxuICAvLyBwcmV0dGllci1pZ25vcmVcbiAgdG9CeXRlc0xFKCkge1xuICAgIGNvbnN0IGhpID0gdGhpcy5oaWdoO1xuICAgIGNvbnN0IGxvID0gdGhpcy5sb3c7XG4gICAgcmV0dXJuIFtcbiAgICAgIGxvICYgMjU1LFxuICAgICAgbG8gPj4+IDggJiAyNTUsXG4gICAgICBsbyA+Pj4gMTYgJiAyNTUsXG4gICAgICBsbyA+Pj4gMjQsXG4gICAgICBoaSAmIDI1NSxcbiAgICAgIGhpID4+PiA4ICYgMjU1LFxuICAgICAgaGkgPj4+IDE2ICYgMjU1LFxuICAgICAgaGkgPj4+IDI0XG4gICAgXTtcbiAgfVxuICBzdGF0aWMgZnJvbU51bWJlcih2YWx1ZSkge1xuICAgIGlmIChpc05hTih2YWx1ZSkpXG4gICAgICByZXR1cm4gVVpFUk87XG4gICAgaWYgKHZhbHVlIDwgMClcbiAgICAgIHJldHVybiBVWkVSTztcbiAgICBpZiAodmFsdWUgPj0gVFdPX1BXUl82NF9EQkwpXG4gICAgICByZXR1cm4gTUFYX1VOU0lHTkVEX1ZBTFVFO1xuICAgIHJldHVybiBuZXcgTG9uZyh2YWx1ZSAlIFRXT19QV1JfMzJfREJMIHwgMCwgdmFsdWUgLyBUV09fUFdSXzMyX0RCTCB8IDApO1xuICB9XG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiAoQmlnSW50KHRoaXMuaGlnaCkgKiBCaWdJbnQoVFdPX1BXUl8zMl9EQkwpICsgQmlnSW50KHRoaXMubG93KSkudG9TdHJpbmcoKTtcbiAgfVxuICBlcXVhbHMob3RoZXIpIHtcbiAgICBpZiAoIUxvbmcuaXNMb25nKG90aGVyKSlcbiAgICAgIG90aGVyID0gTG9uZy5mcm9tVmFsdWUob3RoZXIpO1xuICAgIGlmICh0aGlzLmhpZ2ggPj4+IDMxID09PSAxICYmIG90aGVyLmhpZ2ggPj4+IDMxID09PSAxKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0aGlzLmhpZ2ggPT09IG90aGVyLmhpZ2ggJiYgdGhpcy5sb3cgPT09IG90aGVyLmxvdztcbiAgfVxuICBub3RFcXVhbHMob3RoZXIpIHtcbiAgICByZXR1cm4gIXRoaXMuZXF1YWxzKG90aGVyKTtcbiAgfVxuICBjb21wKG90aGVyKSB7XG4gICAgaWYgKCFMb25nLmlzTG9uZyhvdGhlcikpXG4gICAgICBvdGhlciA9IExvbmcuZnJvbVZhbHVlKG90aGVyKTtcbiAgICBpZiAodGhpcy5lcXVhbHMob3RoZXIpKVxuICAgICAgcmV0dXJuIDA7XG4gICAgcmV0dXJuIG90aGVyLmhpZ2ggPj4+IDAgPiB0aGlzLmhpZ2ggPj4+IDAgfHwgb3RoZXIuaGlnaCA9PT0gdGhpcy5oaWdoICYmIG90aGVyLmxvdyA+Pj4gMCA+IHRoaXMubG93ID4+PiAwID8gLTEgOiAxO1xuICB9XG4gIGxlc3NUaGFuT3JFcXVhbChvdGhlcikge1xuICAgIHJldHVybiB0aGlzLmNvbXAoXG4gICAgICAvKiB2YWxpZGF0ZXMgKi9cbiAgICAgIG90aGVyXG4gICAgKSA8PSAwO1xuICB9XG4gIHN0YXRpYyBmcm9tVmFsdWUodmFsKSB7XG4gICAgaWYgKHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIpXG4gICAgICByZXR1cm4gTG9uZy5mcm9tTnVtYmVyKHZhbCk7XG4gICAgcmV0dXJuIG5ldyBMb25nKHZhbC5sb3csIHZhbC5oaWdoKTtcbiAgfVxufVxuY29uc3QgVVpFUk8gPSBuZXcgTG9uZygwLCAwKTtcbmNvbnN0IFRXT19QV1JfMTZfREJMID0gMSA8PCAxNjtcbmNvbnN0IFRXT19QV1JfMzJfREJMID0gVFdPX1BXUl8xNl9EQkwgKiBUV09fUFdSXzE2X0RCTDtcbmNvbnN0IFRXT19QV1JfNjRfREJMID0gVFdPX1BXUl8zMl9EQkwgKiBUV09fUFdSXzMyX0RCTDtcbmNvbnN0IE1BWF9VTlNJR05FRF9WQUxVRSA9IG5ldyBMb25nKDQyOTQ5NjcyOTUgfCAwLCA0Mjk0OTY3Mjk1IHwgMCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb25nLmpzLm1hcFxuIl0sIm5hbWVzIjpbIkxvbmciLCJpc0xvbmciLCJvYmoiLCJfX2lzVW5zaWduZWRMb25nX18iLCJmcm9tQnl0ZXNMRSIsImJ5dGVzIiwidG9CeXRlc0xFIiwiaGkiLCJoaWdoIiwibG8iLCJsb3ciLCJmcm9tTnVtYmVyIiwidmFsdWUiLCJpc05hTiIsIlVaRVJPIiwiVFdPX1BXUl82NF9EQkwiLCJNQVhfVU5TSUdORURfVkFMVUUiLCJUV09fUFdSXzMyX0RCTCIsInRvU3RyaW5nIiwiQmlnSW50IiwiZXF1YWxzIiwib3RoZXIiLCJmcm9tVmFsdWUiLCJub3RFcXVhbHMiLCJjb21wIiwibGVzc1RoYW5PckVxdWFsIiwidmFsIiwiY29uc3RydWN0b3IiLCJUV09fUFdSXzE2X0RCTCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/browser/long.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/browser/simple_client.js":
/*!***************************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/simple_client.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConvexClient: function() { return /* binding */ ConvexClient; },\n/* harmony export */   setDefaultWebSocketConstructor: function() { return /* binding */ setDefaultWebSocketConstructor; }\n/* harmony export */ });\n/* harmony import */ var _common_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/index.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/common/index.js\");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/browser/index.js\");\n/* harmony import */ var _server_api_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../server/api.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/server/api.js\");\n\n\n\n\nlet defaultWebSocketConstructor;\nfunction setDefaultWebSocketConstructor(ws) {\n    defaultWebSocketConstructor = ws;\n}\nclass ConvexClient {\n    /**\n   * Once closed no registered callbacks will fire again.\n   */ get closed() {\n        return this._closed;\n    }\n    get client() {\n        if (this._client) return this._client;\n        throw new Error(\"ConvexClient is disabled\");\n    }\n    /**\n   * Call a callback whenever a new result for a query is received. The callback\n   * will run soon after being registered if a result for the query is already\n   * in memory.\n   *\n   * The return value is an {@link Unsubscribe} object which is both a function\n   * an an object with properties. Both of the patterns below work with this object:\n   *\n   *```ts\n   * // call the return value as a function\n   * const unsubscribe = client.onUpdate(api.messages.list, {}, (messages) => {\n   *   console.log(messages);\n   * });\n   * unsubscribe();\n   *\n   * // unpack the return value into its properties\n   * const {\n   *   getCurrentValue,\n   *   unsubscribe,\n   * } = client.onUpdate(api.messages.list, {}, (messages) => {\n   *   console.log(messages);\n   * });\n   *```\n   *\n   * @param query - A {@link server.FunctionReference} for the public query to run.\n   * @param args - The arguments to run the query with.\n   * @param callback - Function to call when the query result updates.\n   * @param onError - Function to call when the query result updates with an error.\n   * If not provided, errors will be thrown instead of calling the callback.\n   *\n   * @return an {@link Unsubscribe} function to stop calling the onUpdate function.\n   */ onUpdate(query, args, callback, onError) {\n        if (this.disabled) {\n            const disabledUnsubscribe = ()=>{};\n            const unsubscribeProps2 = {\n                unsubscribe: disabledUnsubscribe,\n                getCurrentValue: ()=>void 0,\n                getQueryLogs: ()=>void 0\n            };\n            Object.assign(disabledUnsubscribe, unsubscribeProps2);\n            return disabledUnsubscribe;\n        }\n        const { queryToken, unsubscribe } = this.client.subscribe((0,_server_api_js__WEBPACK_IMPORTED_MODULE_2__.getFunctionName)(query), args);\n        const queryInfo = {\n            queryToken,\n            callback,\n            onError,\n            unsubscribe,\n            hasEverRun: false,\n            query,\n            args\n        };\n        this.listeners.add(queryInfo);\n        if (this.queryResultReady(queryToken) && this.callNewListenersWithCurrentValuesTimer === void 0) {\n            this.callNewListenersWithCurrentValuesTimer = setTimeout(()=>this.callNewListenersWithCurrentValues(), 0);\n        }\n        const unsubscribeProps = {\n            unsubscribe: ()=>{\n                if (this.closed) {\n                    return;\n                }\n                this.listeners.delete(queryInfo);\n                unsubscribe();\n            },\n            getCurrentValue: ()=>this.client.localQueryResultByToken(queryToken),\n            getQueryLogs: ()=>this.client.localQueryLogs(queryToken)\n        };\n        const ret = unsubscribeProps.unsubscribe;\n        Object.assign(ret, unsubscribeProps);\n        return ret;\n    }\n    // Run all callbacks that have never been run before if they have a query\n    // result available now.\n    callNewListenersWithCurrentValues() {\n        this.callNewListenersWithCurrentValuesTimer = void 0;\n        this._transition([], true);\n    }\n    queryResultReady(queryToken) {\n        return this.client.hasLocalQueryResultByToken(queryToken);\n    }\n    async close() {\n        if (this.disabled) return;\n        this.listeners.clear();\n        this._closed = true;\n        return this.client.close();\n    }\n    /**\n   * Set the authentication token to be used for subsequent queries and mutations.\n   * `fetchToken` will be called automatically again if a token expires.\n   * `fetchToken` should return `null` if the token cannot be retrieved, for example\n   * when the user's rights were permanently revoked.\n   * @param fetchToken - an async function returning the JWT-encoded OpenID Connect Identity Token\n   * @param onChange - a callback that will be called when the authentication status changes\n   */ setAuth(fetchToken, onChange) {\n        this.client.setAuth(fetchToken, onChange !== null && onChange !== void 0 ? onChange : ()=>{});\n    }\n    /**\n   * @internal\n   */ setAdminAuth(token, identity) {\n        if (this.closed) {\n            throw new Error(\"ConvexClient has already been closed.\");\n        }\n        if (this.disabled) return;\n        this.client.setAdminAuth(token, identity);\n    }\n    /**\n   * @internal\n   */ _transition(updatedQueries) {\n        let callNewListeners = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n        for (const queryInfo of this.listeners){\n            const { callback, queryToken, onError, hasEverRun } = queryInfo;\n            if (updatedQueries.includes(queryToken) || callNewListeners && !hasEverRun && this.client.hasLocalQueryResultByToken(queryToken)) {\n                queryInfo.hasEverRun = true;\n                let newValue;\n                try {\n                    newValue = this.client.localQueryResultByToken(queryToken);\n                } catch (error) {\n                    if (!(error instanceof Error)) throw error;\n                    if (onError) {\n                        onError(error, \"Second argument to onUpdate onError is reserved for later use\");\n                    } else {\n                        void Promise.reject(error);\n                    }\n                    continue;\n                }\n                callback(newValue, \"Second argument to onUpdate callback is reserved for later use\");\n            }\n        }\n    }\n    /**\n   * Execute a mutation function.\n   *\n   * @param mutation - A {@link server.FunctionReference} for the public mutation\n   * to run.\n   * @param args - An arguments object for the mutation.\n   * @param options - A {@link MutationOptions} options object for the mutation.\n   * @returns A promise of the mutation's result.\n   */ async mutation(mutation, args) {\n        if (this.disabled) throw new Error(\"ConvexClient is disabled\");\n        return await this.client.mutation((0,_server_api_js__WEBPACK_IMPORTED_MODULE_2__.getFunctionName)(mutation), args);\n    }\n    /**\n   * Execute an action function.\n   *\n   * @param action - A {@link server.FunctionReference} for the public action\n   * to run.\n   * @param args - An arguments object for the action.\n   * @returns A promise of the action's result.\n   */ async action(action, args) {\n        if (this.disabled) throw new Error(\"ConvexClient is disabled\");\n        return await this.client.action((0,_server_api_js__WEBPACK_IMPORTED_MODULE_2__.getFunctionName)(action), args);\n    }\n    /**\n   * Fetch a query result once.\n   *\n   * @param query - A {@link server.FunctionReference} for the public query\n   * to run.\n   * @param args - An arguments object for the query.\n   * @returns A promise of the query's result.\n   */ async query(query, args) {\n        if (this.disabled) throw new Error(\"ConvexClient is disabled\");\n        const value = this.client.localQueryResult((0,_server_api_js__WEBPACK_IMPORTED_MODULE_2__.getFunctionName)(query), args);\n        if (value !== void 0) return value;\n        return new Promise((resolve, reject)=>{\n            const { unsubscribe } = this.onUpdate(query, args, (value2)=>{\n                unsubscribe();\n                resolve(value2);\n            }, (e)=>{\n                unsubscribe();\n                reject(e);\n            });\n        });\n    }\n    /**\n   * Construct a client and immediately initiate a WebSocket connection to the passed address.\n   *\n   * @public\n   */ constructor(address, options = {}){\n        (0,_common_index_js__WEBPACK_IMPORTED_MODULE_0__.validateDeploymentUrl)(address);\n        const { disabled, ...baseOptions } = options;\n        this._closed = false;\n        this.disabled = !!disabled;\n        if (defaultWebSocketConstructor && !(\"webSocketConstructor\" in baseOptions) && typeof WebSocket === \"undefined\") {\n            baseOptions.webSocketConstructor = defaultWebSocketConstructor;\n        }\n        if (false) {}\n        if (!this.disabled) {\n            this._client = new _index_js__WEBPACK_IMPORTED_MODULE_1__.BaseConvexClient(address, (updatedQueries)=>this._transition(updatedQueries), baseOptions);\n        }\n        this.listeners = /* @__PURE__ */ new Set();\n    }\n} //# sourceMappingURL=simple_client.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vYnJvd3Nlci9zaW1wbGVfY2xpZW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQWE7QUFDOEM7QUFHdkM7QUFDK0I7QUFDbkQsSUFBSUc7QUFDRyxTQUFTQywrQkFBK0JDLEVBQUU7SUFDL0NGLDhCQUE4QkU7QUFDaEM7QUFDTyxNQUFNQztJQUNYOztHQUVDLEdBQ0QsSUFBSUMsU0FBUztRQUNYLE9BQU8sSUFBSSxDQUFDQyxPQUFPO0lBQ3JCO0lBQ0EsSUFBSUMsU0FBUztRQUNYLElBQUksSUFBSSxDQUFDQyxPQUFPLEVBQ2QsT0FBTyxJQUFJLENBQUNBLE9BQU87UUFDckIsTUFBTSxJQUFJQyxNQUFNO0lBQ2xCO0lBMEJBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBK0JDLEdBQ0RDLFNBQVNDLEtBQUssRUFBRUMsSUFBSSxFQUFFQyxRQUFRLEVBQUVDLE9BQU8sRUFBRTtRQUN2QyxJQUFJLElBQUksQ0FBQ0MsUUFBUSxFQUFFO1lBQ2pCLE1BQU1DLHNCQUFzQixLQUM1QjtZQUNBLE1BQU1DLG9CQUFvQjtnQkFDeEJDLGFBQWFGO2dCQUNiRyxpQkFBaUIsSUFBTSxLQUFLO2dCQUM1QkMsY0FBYyxJQUFNLEtBQUs7WUFDM0I7WUFDQUMsT0FBT0MsTUFBTSxDQUFDTixxQkFBcUJDO1lBQ25DLE9BQU9EO1FBQ1Q7UUFDQSxNQUFNLEVBQUVPLFVBQVUsRUFBRUwsV0FBVyxFQUFFLEdBQUcsSUFBSSxDQUFDWCxNQUFNLENBQUNpQixTQUFTLENBQ3ZEeEIsK0RBQWVBLENBQUNXLFFBQ2hCQztRQUVGLE1BQU1hLFlBQVk7WUFDaEJGO1lBQ0FWO1lBQ0FDO1lBQ0FJO1lBQ0FRLFlBQVk7WUFDWmY7WUFDQUM7UUFDRjtRQUNBLElBQUksQ0FBQ2UsU0FBUyxDQUFDQyxHQUFHLENBQUNIO1FBQ25CLElBQUksSUFBSSxDQUFDSSxnQkFBZ0IsQ0FBQ04sZUFBZSxJQUFJLENBQUNPLHNDQUFzQyxLQUFLLEtBQUssR0FBRztZQUMvRixJQUFJLENBQUNBLHNDQUFzQyxHQUFHQyxXQUM1QyxJQUFNLElBQUksQ0FBQ0MsaUNBQWlDLElBQzVDO1FBRUo7UUFDQSxNQUFNQyxtQkFBbUI7WUFDdkJmLGFBQWE7Z0JBQ1gsSUFBSSxJQUFJLENBQUNiLE1BQU0sRUFBRTtvQkFDZjtnQkFDRjtnQkFDQSxJQUFJLENBQUNzQixTQUFTLENBQUNPLE1BQU0sQ0FBQ1Q7Z0JBQ3RCUDtZQUNGO1lBQ0FDLGlCQUFpQixJQUFNLElBQUksQ0FBQ1osTUFBTSxDQUFDNEIsdUJBQXVCLENBQUNaO1lBQzNESCxjQUFjLElBQU0sSUFBSSxDQUFDYixNQUFNLENBQUM2QixjQUFjLENBQUNiO1FBQ2pEO1FBQ0EsTUFBTWMsTUFBTUosaUJBQWlCZixXQUFXO1FBQ3hDRyxPQUFPQyxNQUFNLENBQUNlLEtBQUtKO1FBQ25CLE9BQU9JO0lBQ1Q7SUFDQSx5RUFBeUU7SUFDekUsd0JBQXdCO0lBQ3hCTCxvQ0FBb0M7UUFDbEMsSUFBSSxDQUFDRixzQ0FBc0MsR0FBRyxLQUFLO1FBQ25ELElBQUksQ0FBQ1EsV0FBVyxDQUFDLEVBQUUsRUFBRTtJQUN2QjtJQUNBVCxpQkFBaUJOLFVBQVUsRUFBRTtRQUMzQixPQUFPLElBQUksQ0FBQ2hCLE1BQU0sQ0FBQ2dDLDBCQUEwQixDQUFDaEI7SUFDaEQ7SUFDQSxNQUFNaUIsUUFBUTtRQUNaLElBQUksSUFBSSxDQUFDekIsUUFBUSxFQUNmO1FBQ0YsSUFBSSxDQUFDWSxTQUFTLENBQUNjLEtBQUs7UUFDcEIsSUFBSSxDQUFDbkMsT0FBTyxHQUFHO1FBQ2YsT0FBTyxJQUFJLENBQUNDLE1BQU0sQ0FBQ2lDLEtBQUs7SUFDMUI7SUFDQTs7Ozs7OztHQU9DLEdBQ0RFLFFBQVFDLFVBQVUsRUFBRUMsUUFBUSxFQUFFO1FBQzVCLElBQUksQ0FBQ3JDLE1BQU0sQ0FBQ21DLE9BQU8sQ0FDakJDLFlBQ0FDLHFCQUFBQSxzQkFBQUEsV0FBYSxLQUNiO0lBRUo7SUFDQTs7R0FFQyxHQUNEQyxhQUFhQyxLQUFLLEVBQUVDLFFBQVEsRUFBRTtRQUM1QixJQUFJLElBQUksQ0FBQzFDLE1BQU0sRUFBRTtZQUNmLE1BQU0sSUFBSUksTUFBTTtRQUNsQjtRQUNBLElBQUksSUFBSSxDQUFDTSxRQUFRLEVBQ2Y7UUFDRixJQUFJLENBQUNSLE1BQU0sQ0FBQ3NDLFlBQVksQ0FBQ0MsT0FBT0M7SUFDbEM7SUFDQTs7R0FFQyxHQUNEVCxZQUFZVSxjQUFjLEVBQTRCO1lBQTFCQyxtQkFBQUEsaUVBQW1CO1FBQzdDLEtBQUssTUFBTXhCLGFBQWEsSUFBSSxDQUFDRSxTQUFTLENBQUU7WUFDdEMsTUFBTSxFQUFFZCxRQUFRLEVBQUVVLFVBQVUsRUFBRVQsT0FBTyxFQUFFWSxVQUFVLEVBQUUsR0FBR0Q7WUFDdEQsSUFBSXVCLGVBQWVFLFFBQVEsQ0FBQzNCLGVBQWUwQixvQkFBb0IsQ0FBQ3ZCLGNBQWMsSUFBSSxDQUFDbkIsTUFBTSxDQUFDZ0MsMEJBQTBCLENBQUNoQixhQUFhO2dCQUNoSUUsVUFBVUMsVUFBVSxHQUFHO2dCQUN2QixJQUFJeUI7Z0JBQ0osSUFBSTtvQkFDRkEsV0FBVyxJQUFJLENBQUM1QyxNQUFNLENBQUM0Qix1QkFBdUIsQ0FBQ1o7Z0JBQ2pELEVBQUUsT0FBTzZCLE9BQU87b0JBQ2QsSUFBSSxDQUFFQSxDQUFBQSxpQkFBaUIzQyxLQUFJLEdBQ3pCLE1BQU0yQztvQkFDUixJQUFJdEMsU0FBUzt3QkFDWEEsUUFDRXNDLE9BQ0E7b0JBRUosT0FBTzt3QkFDTCxLQUFLQyxRQUFRQyxNQUFNLENBQUNGO29CQUN0QjtvQkFDQTtnQkFDRjtnQkFDQXZDLFNBQ0VzQyxVQUNBO1lBRUo7UUFDRjtJQUNGO0lBQ0E7Ozs7Ozs7O0dBUUMsR0FDRCxNQUFNSSxTQUFTQSxRQUFRLEVBQUUzQyxJQUFJLEVBQUU7UUFDN0IsSUFBSSxJQUFJLENBQUNHLFFBQVEsRUFDZixNQUFNLElBQUlOLE1BQU07UUFDbEIsT0FBTyxNQUFNLElBQUksQ0FBQ0YsTUFBTSxDQUFDZ0QsUUFBUSxDQUFDdkQsK0RBQWVBLENBQUN1RCxXQUFXM0M7SUFDL0Q7SUFDQTs7Ozs7OztHQU9DLEdBQ0QsTUFBTTRDLE9BQU9BLE1BQU0sRUFBRTVDLElBQUksRUFBRTtRQUN6QixJQUFJLElBQUksQ0FBQ0csUUFBUSxFQUNmLE1BQU0sSUFBSU4sTUFBTTtRQUNsQixPQUFPLE1BQU0sSUFBSSxDQUFDRixNQUFNLENBQUNpRCxNQUFNLENBQUN4RCwrREFBZUEsQ0FBQ3dELFNBQVM1QztJQUMzRDtJQUNBOzs7Ozs7O0dBT0MsR0FDRCxNQUFNRCxNQUFNQSxLQUFLLEVBQUVDLElBQUksRUFBRTtRQUN2QixJQUFJLElBQUksQ0FBQ0csUUFBUSxFQUNmLE1BQU0sSUFBSU4sTUFBTTtRQUNsQixNQUFNZ0QsUUFBUSxJQUFJLENBQUNsRCxNQUFNLENBQUNtRCxnQkFBZ0IsQ0FBQzFELCtEQUFlQSxDQUFDVyxRQUFRQztRQUNuRSxJQUFJNkMsVUFBVSxLQUFLLEdBQ2pCLE9BQU9BO1FBQ1QsT0FBTyxJQUFJSixRQUFRLENBQUNNLFNBQVNMO1lBQzNCLE1BQU0sRUFBRXBDLFdBQVcsRUFBRSxHQUFHLElBQUksQ0FBQ1IsUUFBUSxDQUNuQ0MsT0FDQUMsTUFDQSxDQUFDZ0Q7Z0JBQ0MxQztnQkFDQXlDLFFBQVFDO1lBQ1YsR0FDQSxDQUFDQztnQkFDQzNDO2dCQUNBb0MsT0FBT087WUFDVDtRQUVKO0lBQ0Y7SUF4T0E7Ozs7R0FJQyxHQUNEQyxZQUFZQyxPQUFPLEVBQUVDLFVBQVUsQ0FBQyxDQUFDLENBQUU7UUFDakNsRSx1RUFBcUJBLENBQUNpRTtRQUN0QixNQUFNLEVBQUVoRCxRQUFRLEVBQUUsR0FBR2tELGFBQWEsR0FBR0Q7UUFDckMsSUFBSSxDQUFDMUQsT0FBTyxHQUFHO1FBQ2YsSUFBSSxDQUFDUyxRQUFRLEdBQUcsQ0FBQyxDQUFDQTtRQUNsQixJQUFJZCwrQkFBK0IsQ0FBRSwyQkFBMEJnRSxXQUFVLEtBQU0sT0FBT0MsY0FBYyxhQUFhO1lBQy9HRCxZQUFZRSxvQkFBb0IsR0FBR2xFO1FBQ3JDO1FBQ0EsSUFBSSxLQUF3RSxFQUFJLEVBRS9FO1FBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQ2MsUUFBUSxFQUFFO1lBQ2xCLElBQUksQ0FBQ1AsT0FBTyxHQUFHLElBQUlULHVEQUFnQkEsQ0FDakNnRSxTQUNBLENBQUNmLGlCQUFtQixJQUFJLENBQUNWLFdBQVcsQ0FBQ1UsaUJBQ3JDaUI7UUFFSjtRQUNBLElBQUksQ0FBQ3RDLFNBQVMsR0FBRyxhQUFhLEdBQUcsSUFBSTBDO0lBQ3ZDO0FBaU5GLEVBQ0EseUNBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vYnJvd3Nlci9zaW1wbGVfY2xpZW50LmpzPzMyM2MiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5pbXBvcnQgeyB2YWxpZGF0ZURlcGxveW1lbnRVcmwgfSBmcm9tIFwiLi4vY29tbW9uL2luZGV4LmpzXCI7XG5pbXBvcnQge1xuICBCYXNlQ29udmV4Q2xpZW50XG59IGZyb20gXCIuL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBnZXRGdW5jdGlvbk5hbWUgfSBmcm9tIFwiLi4vc2VydmVyL2FwaS5qc1wiO1xubGV0IGRlZmF1bHRXZWJTb2NrZXRDb25zdHJ1Y3RvcjtcbmV4cG9ydCBmdW5jdGlvbiBzZXREZWZhdWx0V2ViU29ja2V0Q29uc3RydWN0b3Iod3MpIHtcbiAgZGVmYXVsdFdlYlNvY2tldENvbnN0cnVjdG9yID0gd3M7XG59XG5leHBvcnQgY2xhc3MgQ29udmV4Q2xpZW50IHtcbiAgLyoqXG4gICAqIE9uY2UgY2xvc2VkIG5vIHJlZ2lzdGVyZWQgY2FsbGJhY2tzIHdpbGwgZmlyZSBhZ2Fpbi5cbiAgICovXG4gIGdldCBjbG9zZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Nsb3NlZDtcbiAgfVxuICBnZXQgY2xpZW50KCkge1xuICAgIGlmICh0aGlzLl9jbGllbnQpXG4gICAgICByZXR1cm4gdGhpcy5fY2xpZW50O1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvbnZleENsaWVudCBpcyBkaXNhYmxlZFwiKTtcbiAgfVxuICAvKipcbiAgICogQ29uc3RydWN0IGEgY2xpZW50IGFuZCBpbW1lZGlhdGVseSBpbml0aWF0ZSBhIFdlYlNvY2tldCBjb25uZWN0aW9uIHRvIHRoZSBwYXNzZWQgYWRkcmVzcy5cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgY29uc3RydWN0b3IoYWRkcmVzcywgb3B0aW9ucyA9IHt9KSB7XG4gICAgdmFsaWRhdGVEZXBsb3ltZW50VXJsKGFkZHJlc3MpO1xuICAgIGNvbnN0IHsgZGlzYWJsZWQsIC4uLmJhc2VPcHRpb25zIH0gPSBvcHRpb25zO1xuICAgIHRoaXMuX2Nsb3NlZCA9IGZhbHNlO1xuICAgIHRoaXMuZGlzYWJsZWQgPSAhIWRpc2FibGVkO1xuICAgIGlmIChkZWZhdWx0V2ViU29ja2V0Q29uc3RydWN0b3IgJiYgIShcIndlYlNvY2tldENvbnN0cnVjdG9yXCIgaW4gYmFzZU9wdGlvbnMpICYmIHR5cGVvZiBXZWJTb2NrZXQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGJhc2VPcHRpb25zLndlYlNvY2tldENvbnN0cnVjdG9yID0gZGVmYXVsdFdlYlNvY2tldENvbnN0cnVjdG9yO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIiAmJiAhKFwidW5zYXZlZENoYW5nZXNXYXJuaW5nXCIgaW4gYmFzZU9wdGlvbnMpKSB7XG4gICAgICBiYXNlT3B0aW9ucy51bnNhdmVkQ2hhbmdlc1dhcm5pbmcgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLmRpc2FibGVkKSB7XG4gICAgICB0aGlzLl9jbGllbnQgPSBuZXcgQmFzZUNvbnZleENsaWVudChcbiAgICAgICAgYWRkcmVzcyxcbiAgICAgICAgKHVwZGF0ZWRRdWVyaWVzKSA9PiB0aGlzLl90cmFuc2l0aW9uKHVwZGF0ZWRRdWVyaWVzKSxcbiAgICAgICAgYmFzZU9wdGlvbnNcbiAgICAgICk7XG4gICAgfVxuICAgIHRoaXMubGlzdGVuZXJzID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKTtcbiAgfVxuICAvKipcbiAgICogQ2FsbCBhIGNhbGxiYWNrIHdoZW5ldmVyIGEgbmV3IHJlc3VsdCBmb3IgYSBxdWVyeSBpcyByZWNlaXZlZC4gVGhlIGNhbGxiYWNrXG4gICAqIHdpbGwgcnVuIHNvb24gYWZ0ZXIgYmVpbmcgcmVnaXN0ZXJlZCBpZiBhIHJlc3VsdCBmb3IgdGhlIHF1ZXJ5IGlzIGFscmVhZHlcbiAgICogaW4gbWVtb3J5LlxuICAgKlxuICAgKiBUaGUgcmV0dXJuIHZhbHVlIGlzIGFuIHtAbGluayBVbnN1YnNjcmliZX0gb2JqZWN0IHdoaWNoIGlzIGJvdGggYSBmdW5jdGlvblxuICAgKiBhbiBhbiBvYmplY3Qgd2l0aCBwcm9wZXJ0aWVzLiBCb3RoIG9mIHRoZSBwYXR0ZXJucyBiZWxvdyB3b3JrIHdpdGggdGhpcyBvYmplY3Q6XG4gICAqXG4gICAqYGBgdHNcbiAgICogLy8gY2FsbCB0aGUgcmV0dXJuIHZhbHVlIGFzIGEgZnVuY3Rpb25cbiAgICogY29uc3QgdW5zdWJzY3JpYmUgPSBjbGllbnQub25VcGRhdGUoYXBpLm1lc3NhZ2VzLmxpc3QsIHt9LCAobWVzc2FnZXMpID0+IHtcbiAgICogICBjb25zb2xlLmxvZyhtZXNzYWdlcyk7XG4gICAqIH0pO1xuICAgKiB1bnN1YnNjcmliZSgpO1xuICAgKlxuICAgKiAvLyB1bnBhY2sgdGhlIHJldHVybiB2YWx1ZSBpbnRvIGl0cyBwcm9wZXJ0aWVzXG4gICAqIGNvbnN0IHtcbiAgICogICBnZXRDdXJyZW50VmFsdWUsXG4gICAqICAgdW5zdWJzY3JpYmUsXG4gICAqIH0gPSBjbGllbnQub25VcGRhdGUoYXBpLm1lc3NhZ2VzLmxpc3QsIHt9LCAobWVzc2FnZXMpID0+IHtcbiAgICogICBjb25zb2xlLmxvZyhtZXNzYWdlcyk7XG4gICAqIH0pO1xuICAgKmBgYFxuICAgKlxuICAgKiBAcGFyYW0gcXVlcnkgLSBBIHtAbGluayBzZXJ2ZXIuRnVuY3Rpb25SZWZlcmVuY2V9IGZvciB0aGUgcHVibGljIHF1ZXJ5IHRvIHJ1bi5cbiAgICogQHBhcmFtIGFyZ3MgLSBUaGUgYXJndW1lbnRzIHRvIHJ1biB0aGUgcXVlcnkgd2l0aC5cbiAgICogQHBhcmFtIGNhbGxiYWNrIC0gRnVuY3Rpb24gdG8gY2FsbCB3aGVuIHRoZSBxdWVyeSByZXN1bHQgdXBkYXRlcy5cbiAgICogQHBhcmFtIG9uRXJyb3IgLSBGdW5jdGlvbiB0byBjYWxsIHdoZW4gdGhlIHF1ZXJ5IHJlc3VsdCB1cGRhdGVzIHdpdGggYW4gZXJyb3IuXG4gICAqIElmIG5vdCBwcm92aWRlZCwgZXJyb3JzIHdpbGwgYmUgdGhyb3duIGluc3RlYWQgb2YgY2FsbGluZyB0aGUgY2FsbGJhY2suXG4gICAqXG4gICAqIEByZXR1cm4gYW4ge0BsaW5rIFVuc3Vic2NyaWJlfSBmdW5jdGlvbiB0byBzdG9wIGNhbGxpbmcgdGhlIG9uVXBkYXRlIGZ1bmN0aW9uLlxuICAgKi9cbiAgb25VcGRhdGUocXVlcnksIGFyZ3MsIGNhbGxiYWNrLCBvbkVycm9yKSB7XG4gICAgaWYgKHRoaXMuZGlzYWJsZWQpIHtcbiAgICAgIGNvbnN0IGRpc2FibGVkVW5zdWJzY3JpYmUgPSAoKSA9PiB7XG4gICAgICB9O1xuICAgICAgY29uc3QgdW5zdWJzY3JpYmVQcm9wczIgPSB7XG4gICAgICAgIHVuc3Vic2NyaWJlOiBkaXNhYmxlZFVuc3Vic2NyaWJlLFxuICAgICAgICBnZXRDdXJyZW50VmFsdWU6ICgpID0+IHZvaWQgMCxcbiAgICAgICAgZ2V0UXVlcnlMb2dzOiAoKSA9PiB2b2lkIDBcbiAgICAgIH07XG4gICAgICBPYmplY3QuYXNzaWduKGRpc2FibGVkVW5zdWJzY3JpYmUsIHVuc3Vic2NyaWJlUHJvcHMyKTtcbiAgICAgIHJldHVybiBkaXNhYmxlZFVuc3Vic2NyaWJlO1xuICAgIH1cbiAgICBjb25zdCB7IHF1ZXJ5VG9rZW4sIHVuc3Vic2NyaWJlIH0gPSB0aGlzLmNsaWVudC5zdWJzY3JpYmUoXG4gICAgICBnZXRGdW5jdGlvbk5hbWUocXVlcnkpLFxuICAgICAgYXJnc1xuICAgICk7XG4gICAgY29uc3QgcXVlcnlJbmZvID0ge1xuICAgICAgcXVlcnlUb2tlbixcbiAgICAgIGNhbGxiYWNrLFxuICAgICAgb25FcnJvcixcbiAgICAgIHVuc3Vic2NyaWJlLFxuICAgICAgaGFzRXZlclJ1bjogZmFsc2UsXG4gICAgICBxdWVyeSxcbiAgICAgIGFyZ3NcbiAgICB9O1xuICAgIHRoaXMubGlzdGVuZXJzLmFkZChxdWVyeUluZm8pO1xuICAgIGlmICh0aGlzLnF1ZXJ5UmVzdWx0UmVhZHkocXVlcnlUb2tlbikgJiYgdGhpcy5jYWxsTmV3TGlzdGVuZXJzV2l0aEN1cnJlbnRWYWx1ZXNUaW1lciA9PT0gdm9pZCAwKSB7XG4gICAgICB0aGlzLmNhbGxOZXdMaXN0ZW5lcnNXaXRoQ3VycmVudFZhbHVlc1RpbWVyID0gc2V0VGltZW91dChcbiAgICAgICAgKCkgPT4gdGhpcy5jYWxsTmV3TGlzdGVuZXJzV2l0aEN1cnJlbnRWYWx1ZXMoKSxcbiAgICAgICAgMFxuICAgICAgKTtcbiAgICB9XG4gICAgY29uc3QgdW5zdWJzY3JpYmVQcm9wcyA9IHtcbiAgICAgIHVuc3Vic2NyaWJlOiAoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxpc3RlbmVycy5kZWxldGUocXVlcnlJbmZvKTtcbiAgICAgICAgdW5zdWJzY3JpYmUoKTtcbiAgICAgIH0sXG4gICAgICBnZXRDdXJyZW50VmFsdWU6ICgpID0+IHRoaXMuY2xpZW50LmxvY2FsUXVlcnlSZXN1bHRCeVRva2VuKHF1ZXJ5VG9rZW4pLFxuICAgICAgZ2V0UXVlcnlMb2dzOiAoKSA9PiB0aGlzLmNsaWVudC5sb2NhbFF1ZXJ5TG9ncyhxdWVyeVRva2VuKVxuICAgIH07XG4gICAgY29uc3QgcmV0ID0gdW5zdWJzY3JpYmVQcm9wcy51bnN1YnNjcmliZTtcbiAgICBPYmplY3QuYXNzaWduKHJldCwgdW5zdWJzY3JpYmVQcm9wcyk7XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuICAvLyBSdW4gYWxsIGNhbGxiYWNrcyB0aGF0IGhhdmUgbmV2ZXIgYmVlbiBydW4gYmVmb3JlIGlmIHRoZXkgaGF2ZSBhIHF1ZXJ5XG4gIC8vIHJlc3VsdCBhdmFpbGFibGUgbm93LlxuICBjYWxsTmV3TGlzdGVuZXJzV2l0aEN1cnJlbnRWYWx1ZXMoKSB7XG4gICAgdGhpcy5jYWxsTmV3TGlzdGVuZXJzV2l0aEN1cnJlbnRWYWx1ZXNUaW1lciA9IHZvaWQgMDtcbiAgICB0aGlzLl90cmFuc2l0aW9uKFtdLCB0cnVlKTtcbiAgfVxuICBxdWVyeVJlc3VsdFJlYWR5KHF1ZXJ5VG9rZW4pIHtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQuaGFzTG9jYWxRdWVyeVJlc3VsdEJ5VG9rZW4ocXVlcnlUb2tlbik7XG4gIH1cbiAgYXN5bmMgY2xvc2UoKSB7XG4gICAgaWYgKHRoaXMuZGlzYWJsZWQpXG4gICAgICByZXR1cm47XG4gICAgdGhpcy5saXN0ZW5lcnMuY2xlYXIoKTtcbiAgICB0aGlzLl9jbG9zZWQgPSB0cnVlO1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5jbG9zZSgpO1xuICB9XG4gIC8qKlxuICAgKiBTZXQgdGhlIGF1dGhlbnRpY2F0aW9uIHRva2VuIHRvIGJlIHVzZWQgZm9yIHN1YnNlcXVlbnQgcXVlcmllcyBhbmQgbXV0YXRpb25zLlxuICAgKiBgZmV0Y2hUb2tlbmAgd2lsbCBiZSBjYWxsZWQgYXV0b21hdGljYWxseSBhZ2FpbiBpZiBhIHRva2VuIGV4cGlyZXMuXG4gICAqIGBmZXRjaFRva2VuYCBzaG91bGQgcmV0dXJuIGBudWxsYCBpZiB0aGUgdG9rZW4gY2Fubm90IGJlIHJldHJpZXZlZCwgZm9yIGV4YW1wbGVcbiAgICogd2hlbiB0aGUgdXNlcidzIHJpZ2h0cyB3ZXJlIHBlcm1hbmVudGx5IHJldm9rZWQuXG4gICAqIEBwYXJhbSBmZXRjaFRva2VuIC0gYW4gYXN5bmMgZnVuY3Rpb24gcmV0dXJuaW5nIHRoZSBKV1QtZW5jb2RlZCBPcGVuSUQgQ29ubmVjdCBJZGVudGl0eSBUb2tlblxuICAgKiBAcGFyYW0gb25DaGFuZ2UgLSBhIGNhbGxiYWNrIHRoYXQgd2lsbCBiZSBjYWxsZWQgd2hlbiB0aGUgYXV0aGVudGljYXRpb24gc3RhdHVzIGNoYW5nZXNcbiAgICovXG4gIHNldEF1dGgoZmV0Y2hUb2tlbiwgb25DaGFuZ2UpIHtcbiAgICB0aGlzLmNsaWVudC5zZXRBdXRoKFxuICAgICAgZmV0Y2hUb2tlbixcbiAgICAgIG9uQ2hhbmdlID8/ICgoKSA9PiB7XG4gICAgICB9KVxuICAgICk7XG4gIH1cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgc2V0QWRtaW5BdXRoKHRva2VuLCBpZGVudGl0eSkge1xuICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ29udmV4Q2xpZW50IGhhcyBhbHJlYWR5IGJlZW4gY2xvc2VkLlwiKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuZGlzYWJsZWQpXG4gICAgICByZXR1cm47XG4gICAgdGhpcy5jbGllbnQuc2V0QWRtaW5BdXRoKHRva2VuLCBpZGVudGl0eSk7XG4gIH1cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgX3RyYW5zaXRpb24odXBkYXRlZFF1ZXJpZXMsIGNhbGxOZXdMaXN0ZW5lcnMgPSBmYWxzZSkge1xuICAgIGZvciAoY29uc3QgcXVlcnlJbmZvIG9mIHRoaXMubGlzdGVuZXJzKSB7XG4gICAgICBjb25zdCB7IGNhbGxiYWNrLCBxdWVyeVRva2VuLCBvbkVycm9yLCBoYXNFdmVyUnVuIH0gPSBxdWVyeUluZm87XG4gICAgICBpZiAodXBkYXRlZFF1ZXJpZXMuaW5jbHVkZXMocXVlcnlUb2tlbikgfHwgY2FsbE5ld0xpc3RlbmVycyAmJiAhaGFzRXZlclJ1biAmJiB0aGlzLmNsaWVudC5oYXNMb2NhbFF1ZXJ5UmVzdWx0QnlUb2tlbihxdWVyeVRva2VuKSkge1xuICAgICAgICBxdWVyeUluZm8uaGFzRXZlclJ1biA9IHRydWU7XG4gICAgICAgIGxldCBuZXdWYWx1ZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBuZXdWYWx1ZSA9IHRoaXMuY2xpZW50LmxvY2FsUXVlcnlSZXN1bHRCeVRva2VuKHF1ZXJ5VG9rZW4pO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGlmICghKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpKVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgaWYgKG9uRXJyb3IpIHtcbiAgICAgICAgICAgIG9uRXJyb3IoXG4gICAgICAgICAgICAgIGVycm9yLFxuICAgICAgICAgICAgICBcIlNlY29uZCBhcmd1bWVudCB0byBvblVwZGF0ZSBvbkVycm9yIGlzIHJlc2VydmVkIGZvciBsYXRlciB1c2VcIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdm9pZCBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNhbGxiYWNrKFxuICAgICAgICAgIG5ld1ZhbHVlLFxuICAgICAgICAgIFwiU2Vjb25kIGFyZ3VtZW50IHRvIG9uVXBkYXRlIGNhbGxiYWNrIGlzIHJlc2VydmVkIGZvciBsYXRlciB1c2VcIlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogRXhlY3V0ZSBhIG11dGF0aW9uIGZ1bmN0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0gbXV0YXRpb24gLSBBIHtAbGluayBzZXJ2ZXIuRnVuY3Rpb25SZWZlcmVuY2V9IGZvciB0aGUgcHVibGljIG11dGF0aW9uXG4gICAqIHRvIHJ1bi5cbiAgICogQHBhcmFtIGFyZ3MgLSBBbiBhcmd1bWVudHMgb2JqZWN0IGZvciB0aGUgbXV0YXRpb24uXG4gICAqIEBwYXJhbSBvcHRpb25zIC0gQSB7QGxpbmsgTXV0YXRpb25PcHRpb25zfSBvcHRpb25zIG9iamVjdCBmb3IgdGhlIG11dGF0aW9uLlxuICAgKiBAcmV0dXJucyBBIHByb21pc2Ugb2YgdGhlIG11dGF0aW9uJ3MgcmVzdWx0LlxuICAgKi9cbiAgYXN5bmMgbXV0YXRpb24obXV0YXRpb24sIGFyZ3MpIHtcbiAgICBpZiAodGhpcy5kaXNhYmxlZClcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvbnZleENsaWVudCBpcyBkaXNhYmxlZFwiKTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5jbGllbnQubXV0YXRpb24oZ2V0RnVuY3Rpb25OYW1lKG11dGF0aW9uKSwgYXJncyk7XG4gIH1cbiAgLyoqXG4gICAqIEV4ZWN1dGUgYW4gYWN0aW9uIGZ1bmN0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0gYWN0aW9uIC0gQSB7QGxpbmsgc2VydmVyLkZ1bmN0aW9uUmVmZXJlbmNlfSBmb3IgdGhlIHB1YmxpYyBhY3Rpb25cbiAgICogdG8gcnVuLlxuICAgKiBAcGFyYW0gYXJncyAtIEFuIGFyZ3VtZW50cyBvYmplY3QgZm9yIHRoZSBhY3Rpb24uXG4gICAqIEByZXR1cm5zIEEgcHJvbWlzZSBvZiB0aGUgYWN0aW9uJ3MgcmVzdWx0LlxuICAgKi9cbiAgYXN5bmMgYWN0aW9uKGFjdGlvbiwgYXJncykge1xuICAgIGlmICh0aGlzLmRpc2FibGVkKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ29udmV4Q2xpZW50IGlzIGRpc2FibGVkXCIpO1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmNsaWVudC5hY3Rpb24oZ2V0RnVuY3Rpb25OYW1lKGFjdGlvbiksIGFyZ3MpO1xuICB9XG4gIC8qKlxuICAgKiBGZXRjaCBhIHF1ZXJ5IHJlc3VsdCBvbmNlLlxuICAgKlxuICAgKiBAcGFyYW0gcXVlcnkgLSBBIHtAbGluayBzZXJ2ZXIuRnVuY3Rpb25SZWZlcmVuY2V9IGZvciB0aGUgcHVibGljIHF1ZXJ5XG4gICAqIHRvIHJ1bi5cbiAgICogQHBhcmFtIGFyZ3MgLSBBbiBhcmd1bWVudHMgb2JqZWN0IGZvciB0aGUgcXVlcnkuXG4gICAqIEByZXR1cm5zIEEgcHJvbWlzZSBvZiB0aGUgcXVlcnkncyByZXN1bHQuXG4gICAqL1xuICBhc3luYyBxdWVyeShxdWVyeSwgYXJncykge1xuICAgIGlmICh0aGlzLmRpc2FibGVkKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ29udmV4Q2xpZW50IGlzIGRpc2FibGVkXCIpO1xuICAgIGNvbnN0IHZhbHVlID0gdGhpcy5jbGllbnQubG9jYWxRdWVyeVJlc3VsdChnZXRGdW5jdGlvbk5hbWUocXVlcnkpLCBhcmdzKTtcbiAgICBpZiAodmFsdWUgIT09IHZvaWQgMClcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc3QgeyB1bnN1YnNjcmliZSB9ID0gdGhpcy5vblVwZGF0ZShcbiAgICAgICAgcXVlcnksXG4gICAgICAgIGFyZ3MsXG4gICAgICAgICh2YWx1ZTIpID0+IHtcbiAgICAgICAgICB1bnN1YnNjcmliZSgpO1xuICAgICAgICAgIHJlc29sdmUodmFsdWUyKTtcbiAgICAgICAgfSxcbiAgICAgICAgKGUpID0+IHtcbiAgICAgICAgICB1bnN1YnNjcmliZSgpO1xuICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2ltcGxlX2NsaWVudC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJ2YWxpZGF0ZURlcGxveW1lbnRVcmwiLCJCYXNlQ29udmV4Q2xpZW50IiwiZ2V0RnVuY3Rpb25OYW1lIiwiZGVmYXVsdFdlYlNvY2tldENvbnN0cnVjdG9yIiwic2V0RGVmYXVsdFdlYlNvY2tldENvbnN0cnVjdG9yIiwid3MiLCJDb252ZXhDbGllbnQiLCJjbG9zZWQiLCJfY2xvc2VkIiwiY2xpZW50IiwiX2NsaWVudCIsIkVycm9yIiwib25VcGRhdGUiLCJxdWVyeSIsImFyZ3MiLCJjYWxsYmFjayIsIm9uRXJyb3IiLCJkaXNhYmxlZCIsImRpc2FibGVkVW5zdWJzY3JpYmUiLCJ1bnN1YnNjcmliZVByb3BzMiIsInVuc3Vic2NyaWJlIiwiZ2V0Q3VycmVudFZhbHVlIiwiZ2V0UXVlcnlMb2dzIiwiT2JqZWN0IiwiYXNzaWduIiwicXVlcnlUb2tlbiIsInN1YnNjcmliZSIsInF1ZXJ5SW5mbyIsImhhc0V2ZXJSdW4iLCJsaXN0ZW5lcnMiLCJhZGQiLCJxdWVyeVJlc3VsdFJlYWR5IiwiY2FsbE5ld0xpc3RlbmVyc1dpdGhDdXJyZW50VmFsdWVzVGltZXIiLCJzZXRUaW1lb3V0IiwiY2FsbE5ld0xpc3RlbmVyc1dpdGhDdXJyZW50VmFsdWVzIiwidW5zdWJzY3JpYmVQcm9wcyIsImRlbGV0ZSIsImxvY2FsUXVlcnlSZXN1bHRCeVRva2VuIiwibG9jYWxRdWVyeUxvZ3MiLCJyZXQiLCJfdHJhbnNpdGlvbiIsImhhc0xvY2FsUXVlcnlSZXN1bHRCeVRva2VuIiwiY2xvc2UiLCJjbGVhciIsInNldEF1dGgiLCJmZXRjaFRva2VuIiwib25DaGFuZ2UiLCJzZXRBZG1pbkF1dGgiLCJ0b2tlbiIsImlkZW50aXR5IiwidXBkYXRlZFF1ZXJpZXMiLCJjYWxsTmV3TGlzdGVuZXJzIiwiaW5jbHVkZXMiLCJuZXdWYWx1ZSIsImVycm9yIiwiUHJvbWlzZSIsInJlamVjdCIsIm11dGF0aW9uIiwiYWN0aW9uIiwidmFsdWUiLCJsb2NhbFF1ZXJ5UmVzdWx0IiwicmVzb2x2ZSIsInZhbHVlMiIsImUiLCJjb25zdHJ1Y3RvciIsImFkZHJlc3MiLCJvcHRpb25zIiwiYmFzZU9wdGlvbnMiLCJXZWJTb2NrZXQiLCJ3ZWJTb2NrZXRDb25zdHJ1Y3RvciIsInVuc2F2ZWRDaGFuZ2VzV2FybmluZyIsIlNldCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/browser/simple_client.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/authentication_manager.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/sync/authentication_manager.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthenticationManager: function() { return /* binding */ AuthenticationManager; }\n/* harmony export */ });\n/* harmony import */ var jwt_decode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jwt-decode */ \"(app-pages-browser)/./node_modules/jwt-decode/build/jwt-decode.esm.js\");\n\n\nclass AuthenticationManager {\n    async setConfig(fetchToken, onChange) {\n        this.resetAuthState();\n        const token = await this.fetchTokenAndGuardAgainstRace(fetchToken, {\n            forceRefreshToken: false\n        });\n        if (token.isFromOutdatedConfig) {\n            return;\n        }\n        if (token.value) {\n            this.setAuthState({\n                state: \"waitingForServerConfirmationOfCachedToken\",\n                config: {\n                    fetchToken,\n                    onAuthChange: onChange\n                },\n                hasRetried: false\n            });\n            this.authenticate(token.value);\n        } else {\n            this.setAuthState({\n                state: \"initialRefetch\",\n                config: {\n                    fetchToken,\n                    onAuthChange: onChange\n                }\n            });\n            await this.refetchToken();\n        }\n    }\n    onTransition(serverMessage) {\n        if (!this.syncState.isCurrentOrNewerAuthVersion(serverMessage.endVersion.identity)) {\n            return;\n        }\n        if (serverMessage.endVersion.identity <= serverMessage.startVersion.identity) {\n            return;\n        }\n        if (this.authState.state === \"waitingForServerConfirmationOfCachedToken\") {\n            this._logVerbose(\"server confirmed auth token is valid\");\n            void this.refetchToken();\n            this.authState.config.onAuthChange(true);\n            return;\n        }\n        if (this.authState.state === \"waitingForServerConfirmationOfFreshToken\") {\n            this._logVerbose(\"server confirmed new auth token is valid\");\n            this.scheduleTokenRefetch(this.authState.token);\n            if (!this.authState.hadAuth) {\n                this.authState.config.onAuthChange(true);\n            }\n        }\n    }\n    onAuthError(serverMessage) {\n        const { baseVersion } = serverMessage;\n        if (baseVersion !== null && baseVersion !== void 0) {\n            if (!this.syncState.isCurrentOrNewerAuthVersion(baseVersion + 1)) {\n                this._logVerbose(\"ignoring auth error for previous auth attempt\");\n                return;\n            }\n            void this.tryToReauthenticate(serverMessage);\n            return;\n        }\n        void this.tryToReauthenticate(serverMessage);\n    }\n    // This is similar to `refetchToken` defined below, in fact we\n    // don't represent them as different states, but it is different\n    // in that we pause the WebSocket so that mutations\n    // don't retry with bad auth.\n    async tryToReauthenticate(serverMessage) {\n        if (// No way to fetch another token, kaboom\n        this.authState.state === \"noAuth\" || // We failed on a fresh token, trying another one won't help\n        this.authState.state === \"waitingForServerConfirmationOfFreshToken\") {\n            console.error('Failed to authenticate: \"'.concat(serverMessage.error, '\", check your server auth config'));\n            if (this.syncState.hasAuth()) {\n                this.syncState.clearAuth();\n            }\n            if (this.authState.state !== \"noAuth\") {\n                this.setAndReportAuthFailed(this.authState.config.onAuthChange);\n            }\n            return;\n        }\n        this._logVerbose(\"attempting to reauthenticate\");\n        await this.pauseSocket();\n        const token = await this.fetchTokenAndGuardAgainstRace(this.authState.config.fetchToken, {\n            forceRefreshToken: true\n        });\n        if (token.isFromOutdatedConfig) {\n            await this.resumeSocket();\n            return;\n        }\n        if (token.value && this.syncState.isNewAuth(token.value)) {\n            this.syncState.setAuth(token.value);\n            this.setAuthState({\n                state: \"waitingForServerConfirmationOfFreshToken\",\n                config: this.authState.config,\n                token: token.value,\n                hadAuth: this.authState.state === \"notRefetching\" || this.authState.state === \"waitingForScheduledRefetch\"\n            });\n        } else {\n            this._logVerbose(\"reauthentication failed, could not fetch a new token\");\n            if (this.syncState.hasAuth()) {\n                this.syncState.clearAuth();\n            }\n            this.setAndReportAuthFailed(this.authState.config.onAuthChange);\n        }\n        await this.resumeSocket();\n    }\n    // Force refetch the token and schedule another refetch\n    // before the token expires - an active client should never\n    // need to reauthenticate.\n    async refetchToken() {\n        if (this.authState.state === \"noAuth\") {\n            return;\n        }\n        this._logVerbose(\"refetching auth token\");\n        const token = await this.fetchTokenAndGuardAgainstRace(this.authState.config.fetchToken, {\n            forceRefreshToken: true\n        });\n        if (token.isFromOutdatedConfig) {\n            return;\n        }\n        if (token.value) {\n            if (this.syncState.isNewAuth(token.value)) {\n                this.setAuthState({\n                    state: \"waitingForServerConfirmationOfFreshToken\",\n                    hadAuth: this.syncState.hasAuth(),\n                    token: token.value,\n                    config: this.authState.config\n                });\n                this.authenticate(token.value);\n            } else {\n                this.setAuthState({\n                    state: \"notRefetching\",\n                    config: this.authState.config\n                });\n            }\n        } else {\n            this._logVerbose(\"refetching token failed\");\n            if (this.syncState.hasAuth()) {\n                this.clearAuth();\n            }\n            this.setAndReportAuthFailed(this.authState.config.onAuthChange);\n        }\n    }\n    scheduleTokenRefetch(token) {\n        if (this.authState.state === \"noAuth\") {\n            return;\n        }\n        const decodedToken = this.decodeToken(token);\n        if (!decodedToken) {\n            console.error(\"Auth token is not a valid JWT, cannot refetch the token\");\n            return;\n        }\n        const { iat, exp } = decodedToken;\n        if (!iat || !exp) {\n            console.error(\"Auth token does not have required fields, cannot refetch the token\");\n            return;\n        }\n        const leewaySeconds = 2;\n        const delay = (exp - iat - leewaySeconds) * 1e3;\n        if (delay <= 0) {\n            console.error(\"Auth token does not live long enough, cannot refetch the token\");\n            return;\n        }\n        const refetchTokenTimeoutId = setTimeout(()=>{\n            void this.refetchToken();\n        }, delay);\n        this.setAuthState({\n            state: \"waitingForScheduledRefetch\",\n            refetchTokenTimeoutId,\n            config: this.authState.config\n        });\n        this._logVerbose(\"scheduled preemptive auth token refetching in \".concat(delay, \"ms\"));\n    }\n    // Protects against simultaneous calls to `setConfig`\n    // while we're fetching a token\n    async fetchTokenAndGuardAgainstRace(fetchToken, fetchArgs) {\n        const originalConfigVersion = ++this.configVersion;\n        const token = await fetchToken(fetchArgs);\n        if (this.configVersion !== originalConfigVersion) {\n            return {\n                isFromOutdatedConfig: true\n            };\n        }\n        return {\n            isFromOutdatedConfig: false,\n            value: token\n        };\n    }\n    stop() {\n        this.resetAuthState();\n        this.configVersion++;\n    }\n    setAndReportAuthFailed(onAuthChange) {\n        onAuthChange(false);\n        this.resetAuthState();\n    }\n    resetAuthState() {\n        this.setAuthState({\n            state: \"noAuth\"\n        });\n    }\n    setAuthState(newAuth) {\n        if (this.authState.state === \"waitingForScheduledRefetch\") {\n            clearTimeout(this.authState.refetchTokenTimeoutId);\n            this.syncState.markAuthCompletion();\n        }\n        this.authState = newAuth;\n    }\n    decodeToken(token) {\n        try {\n            return (0,jwt_decode__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(token);\n        } catch (e) {\n            return null;\n        }\n    }\n    _logVerbose(message) {\n        if (this.verbose) {\n            console.debug(\"\".concat(/* @__PURE__ */ new Date().toISOString(), \" \").concat(message, \" [v\").concat(this.configVersion, \"]\"));\n        }\n    }\n    constructor(syncState, { authenticate, pauseSocket: pause, resumeSocket: resume, clearAuth, verbose }){\n        this.authState = {\n            state: \"noAuth\"\n        };\n        // Used to detect races involving `setConfig` calls\n        // while a token is being fetched.\n        this.configVersion = 0;\n        this.syncState = syncState;\n        this.authenticate = authenticate;\n        this.pauseSocket = pause;\n        this.resumeSocket = resume;\n        this.clearAuth = clearAuth;\n        this.verbose = verbose;\n    }\n} //# sourceMappingURL=authentication_manager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/authentication_manager.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/client.js":
/*!*************************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/sync/client.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseConvexClient: function() { return /* binding */ BaseConvexClient; }\n/* harmony export */ });\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../index.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/index.js\");\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../values/index.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/values/index.js\");\n/* harmony import */ var _logging_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../logging.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/browser/logging.js\");\n/* harmony import */ var _local_state_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./local_state.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/local_state.js\");\n/* harmony import */ var _request_manager_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./request_manager.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/request_manager.js\");\n/* harmony import */ var _optimistic_updates_impl_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./optimistic_updates_impl.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/optimistic_updates_impl.js\");\n/* harmony import */ var _remote_query_set_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./remote_query_set.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/remote_query_set.js\");\n/* harmony import */ var _udf_path_utils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./udf_path_utils.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/udf_path_utils.js\");\n/* harmony import */ var _web_socket_manager_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./web_socket_manager.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/web_socket_manager.js\");\n/* harmony import */ var _session_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./session.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/session.js\");\n/* harmony import */ var _authentication_manager_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./authentication_manager.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/authentication_manager.js\");\n/* harmony import */ var _metrics_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./metrics.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/metrics.js\");\n/* harmony import */ var _common_index_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../common/index.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/common/index.js\");\n/* harmony import */ var _values_errors_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../values/errors.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/values/errors.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass BaseConvexClient {\n    /**\n   * Return true if there is outstanding work from prior to the time of the most recent restart.\n   * This indicates that the client has not proven itself to have gotten past the issue that\n   * potentially led to the restart. Use this to influence when to reset backoff after a failure.\n   */ hasSyncedPastLastReconnect() {\n        const hasSyncedPastLastReconnect = this.requestManager.hasSyncedPastLastReconnect() || this.state.hasSyncedPastLastReconnect();\n        return hasSyncedPastLastReconnect;\n    }\n    observedTimestamp(observedTs) {\n        if (this.maxObservedTimestamp === void 0 || this.maxObservedTimestamp.lessThanOrEqual(observedTs)) {\n            this.maxObservedTimestamp = observedTs;\n        }\n    }\n    getMaxObservedTimestamp() {\n        return this.maxObservedTimestamp;\n    }\n    /**\n   * Compute the current query results based on the remoteQuerySet and the\n   * current optimistic updates and call `onTransition` for all the changed\n   * queries.\n   *\n   * @param completedMutations - A set of mutation IDs whose optimistic updates\n   * are no longer needed.\n   */ notifyOnQueryResultChanges(completedRequest) {\n        const remoteQueryResults = this.remoteQuerySet.remoteQueryResults();\n        const queryTokenToValue = /* @__PURE__ */ new Map();\n        for (const [queryId, result] of remoteQueryResults){\n            const queryToken = this.state.queryToken(queryId);\n            if (queryToken !== null) {\n                const query = {\n                    result,\n                    udfPath: this.state.queryPath(queryId),\n                    args: this.state.queryArgs(queryId)\n                };\n                queryTokenToValue.set(queryToken, query);\n            }\n        }\n        this.onTransition(this.optimisticQueryResults.ingestQueryResultsFromServer(queryTokenToValue, completedRequest));\n    }\n    /**\n   * Set the authentication token to be used for subsequent queries and mutations.\n   * `fetchToken` will be called automatically again if a token expires.\n   * `fetchToken` should return `null` if the token cannot be retrieved, for example\n   * when the user's rights were permanently revoked.\n   * @param fetchToken - an async function returning the JWT-encoded OpenID Connect Identity Token\n   * @param onChange - a callback that will be called when the authentication status changes\n   */ setAuth(fetchToken, onChange) {\n        void this.authenticationManager.setConfig(fetchToken, onChange);\n    }\n    hasAuth() {\n        return this.state.hasAuth();\n    }\n    /** @internal */ setAdminAuth(value, fakeUserIdentity) {\n        const message = this.state.setAdminAuth(value, fakeUserIdentity);\n        this.webSocketManager.sendMessage(message);\n    }\n    clearAuth() {\n        const message = this.state.clearAuth();\n        this.webSocketManager.sendMessage(message);\n    }\n    /**\n     * Subscribe to a query function.\n     *\n     * Whenever this query's result changes, the `onTransition` callback\n     * passed into the constructor will be called.\n     *\n     * @param name - The name of the query.\n     * @param args - An arguments object for the query. If this is omitted, the\n     * arguments will be `{}`.\n     * @param options - A {@link SubscribeOptions} options object for this query.\n  \n     * @returns An object containing a {@link QueryToken} corresponding to this\n     * query and an `unsubscribe` callback.\n     */ subscribe(name, args, options) {\n        const argsObject = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_12__.parseArgs)(args);\n        const { modification, queryToken, unsubscribe } = this.state.subscribe(name, argsObject, options === null || options === void 0 ? void 0 : options.journal);\n        if (modification !== null) {\n            this.webSocketManager.sendMessage(modification);\n        }\n        return {\n            queryToken,\n            unsubscribe: ()=>{\n                const modification2 = unsubscribe();\n                if (modification2) {\n                    this.webSocketManager.sendMessage(modification2);\n                }\n            }\n        };\n    }\n    /**\n   * A query result based only on the current, local state.\n   *\n   * The only way this will return a value is if we're already subscribed to the\n   * query or its value has been set optimistically.\n   */ localQueryResult(udfPath, args) {\n        const argsObject = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_12__.parseArgs)(args);\n        const queryToken = (0,_udf_path_utils_js__WEBPACK_IMPORTED_MODULE_7__.serializePathAndArgs)(udfPath, argsObject);\n        return this.optimisticQueryResults.queryResult(queryToken);\n    }\n    /**\n   * Get query result by query token based on current, local state\n   *\n   * The only way this will return a value is if we're already subscribed to the\n   * query or its value has been set optimistically.\n   *\n   * @internal\n   */ localQueryResultByToken(queryToken) {\n        return this.optimisticQueryResults.queryResult(queryToken);\n    }\n    /**\n   * Whether local query result is available for a toke.\n   *\n   * This method does not throw if the result is an error.\n   *\n   * @internal\n   */ hasLocalQueryResultByToken(queryToken) {\n        return this.optimisticQueryResults.hasQueryResult(queryToken);\n    }\n    /**\n   * @internal\n   */ localQueryLogs(udfPath, args) {\n        const argsObject = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_12__.parseArgs)(args);\n        const queryToken = (0,_udf_path_utils_js__WEBPACK_IMPORTED_MODULE_7__.serializePathAndArgs)(udfPath, argsObject);\n        return this.optimisticQueryResults.queryLogs(queryToken);\n    }\n    /**\n   * Retrieve the current {@link QueryJournal} for this query function.\n   *\n   * If we have not yet received a result for this query, this will be `undefined`.\n   *\n   * @param name - The name of the query.\n   * @param args - The arguments object for this query.\n   * @returns The query's {@link QueryJournal} or `undefined`.\n   */ queryJournal(name, args) {\n        const argsObject = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_12__.parseArgs)(args);\n        const queryToken = (0,_udf_path_utils_js__WEBPACK_IMPORTED_MODULE_7__.serializePathAndArgs)(name, argsObject);\n        return this.state.queryJournal(queryToken);\n    }\n    /**\n   * Get the current {@link ConnectionState} between the client and the Convex\n   * backend.\n   *\n   * @returns The {@link ConnectionState} with the Convex backend.\n   */ connectionState() {\n        return {\n            hasInflightRequests: this.requestManager.hasInflightRequests(),\n            isWebSocketConnected: this.webSocketManager.socketState() === \"ready\",\n            timeOfOldestInflightRequest: this.requestManager.timeOfOldestInflightRequest()\n        };\n    }\n    /**\n     * Execute a mutation function.\n     *\n     * @param name - The name of the mutation.\n     * @param args - An arguments object for the mutation. If this is omitted,\n     * the arguments will be `{}`.\n     * @param options - A {@link MutationOptions} options object for this mutation.\n  \n     * @returns - A promise of the mutation's result.\n     */ async mutation(name, args, options) {\n        const result = await this.mutationInternal(name, args, options);\n        if (!result.success) {\n            if (result.errorData !== void 0) {\n                throw (0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.forwardData)(result, new _values_errors_js__WEBPACK_IMPORTED_MODULE_13__.ConvexError((0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.createHybridErrorStacktrace)(\"mutation\", name, result)));\n            }\n            throw new Error((0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.createHybridErrorStacktrace)(\"mutation\", name, result));\n        }\n        return result.value;\n    }\n    /**\n   * @internal\n   */ async mutationInternal(udfPath, args, options) {\n        const mutationArgs = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_12__.parseArgs)(args);\n        this.tryReportLongDisconnect();\n        const requestId = this.nextRequestId;\n        this.nextRequestId++;\n        if (options !== void 0) {\n            const optimisticUpdate = options.optimisticUpdate;\n            if (optimisticUpdate !== void 0) {\n                const wrappedUpdate = (localQueryStore)=>{\n                    optimisticUpdate(localQueryStore, mutationArgs);\n                };\n                const changedQueries = this.optimisticQueryResults.applyOptimisticUpdate(wrappedUpdate, requestId);\n                this.onTransition(changedQueries);\n            }\n        }\n        const message = {\n            type: \"Mutation\",\n            requestId,\n            udfPath,\n            args: [\n                (0,_values_index_js__WEBPACK_IMPORTED_MODULE_1__.convexToJson)(mutationArgs)\n            ]\n        };\n        const mightBeSent = this.webSocketManager.sendMessage(message);\n        return this.requestManager.request(message, mightBeSent);\n    }\n    /**\n   * Execute an action function.\n   *\n   * @param name - The name of the action.\n   * @param args - An arguments object for the action. If this is omitted,\n   * the arguments will be `{}`.\n   * @returns A promise of the action's result.\n   */ async action(name, args) {\n        const result = await this.actionInternal(name, args);\n        if (!result.success) {\n            if (result.errorData !== void 0) {\n                throw (0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.forwardData)(result, new _values_errors_js__WEBPACK_IMPORTED_MODULE_13__.ConvexError((0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.createHybridErrorStacktrace)(\"action\", name, result)));\n            }\n            throw new Error((0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.createHybridErrorStacktrace)(\"action\", name, result));\n        }\n        return result.value;\n    }\n    /**\n   * @internal\n   */ async actionInternal(udfPath, args) {\n        const actionArgs = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_12__.parseArgs)(args);\n        const requestId = this.nextRequestId;\n        this.nextRequestId++;\n        this.tryReportLongDisconnect();\n        const message = {\n            type: \"Action\",\n            requestId,\n            udfPath,\n            args: [\n                (0,_values_index_js__WEBPACK_IMPORTED_MODULE_1__.convexToJson)(actionArgs)\n            ]\n        };\n        const mightBeSent = this.webSocketManager.sendMessage(message);\n        return this.requestManager.request(message, mightBeSent);\n    }\n    /**\n   * Close any network handles associated with this client and stop all subscriptions.\n   *\n   * Call this method when you're done with an {@link BaseConvexClient} to\n   * dispose of its sockets and resources.\n   *\n   * @returns A `Promise` fulfilled when the connection has been completely closed.\n   */ async close() {\n        this.authenticationManager.stop();\n        return this.webSocketManager.stop();\n    }\n    _logVerbose(message) {\n        if (this.verbose) {\n            console.debug(\"\".concat(/* @__PURE__ */ new Date().toISOString(), \" \").concat(message));\n        }\n    }\n    /**\n   * Reports performance marks to the server. This should only be called when\n   * we have a functional websocket.\n   */ reportMarks() {\n        if (this.debug) {\n            const report = (0,_metrics_js__WEBPACK_IMPORTED_MODULE_11__.getMarksReport)(this.sessionId);\n            this.webSocketManager.sendMessage({\n                type: \"Event\",\n                eventType: \"ClientConnect\",\n                event: report\n            });\n        }\n    }\n    tryReportLongDisconnect() {\n        if (!this.debug) {\n            return;\n        }\n        const timeOfOldestRequest = this.connectionState().timeOfOldestInflightRequest;\n        if (timeOfOldestRequest === null || Date.now() - timeOfOldestRequest.getTime() <= 60 * 1e3) {\n            return;\n        }\n        const endpoint = \"\".concat(this.address, \"/api/debug_event\");\n        fetch(endpoint, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Convex-Client\": \"npm-\".concat(_index_js__WEBPACK_IMPORTED_MODULE_0__.version)\n            },\n            body: JSON.stringify({\n                event: \"LongWebsocketDisconnect\"\n            })\n        }).then((response)=>{\n            if (!response.ok) {\n                console.warn(\"Analytics request failed with response:\", response.body);\n            }\n        }).catch((error)=>{\n            console.warn(\"Analytics response failed with error:\", error);\n        });\n    }\n    /**\n   * @param address - The url of your Convex deployment, often provided\n   * by an environment variable. E.g. `https://small-mouse-123.convex.cloud`.\n   * @param onTransition - A callback receiving an array of query tokens\n   * corresponding to query results that have changed.\n   * @param options - See {@link BaseConvexClientOptions} for a full description.\n   */ constructor(address, onTransition, options){\n        this.firstMessageReceived = false;\n        // Instance property so that `mark()` doesn't need to be called as a method.\n        this.mark = (name)=>{\n            if (this.debug) {\n                (0,_metrics_js__WEBPACK_IMPORTED_MODULE_11__.mark)(name, this.sessionId);\n            }\n        };\n        if (typeof address === \"object\") {\n            throw new Error(\"Passing a ClientConfig object is no longer supported. Pass the URL of the Convex deployment as a string directly.\");\n        }\n        (0,_common_index_js__WEBPACK_IMPORTED_MODULE_12__.validateDeploymentUrl)(address);\n        options = {\n            ...options\n        };\n        let webSocketConstructor = options.webSocketConstructor;\n        if (!webSocketConstructor && typeof WebSocket === \"undefined\") {\n            throw new Error(\"No WebSocket global variable defined! To use Convex in an environment without WebSocket try the HTTP client: https://docs.convex.dev/api/classes/browser.ConvexHttpClient\");\n        }\n        webSocketConstructor = webSocketConstructor || WebSocket;\n        var _options_verbose;\n        this.verbose = (_options_verbose = options.verbose) !== null && _options_verbose !== void 0 ? _options_verbose : false;\n        var _options_reportDebugInfoToConvex;\n        this.debug = (_options_reportDebugInfoToConvex = options.reportDebugInfoToConvex) !== null && _options_reportDebugInfoToConvex !== void 0 ? _options_reportDebugInfoToConvex : false;\n        this.address = address;\n        const i = address.search(\"://\");\n        if (i === -1) {\n            throw new Error(\"Provided address was not an absolute URL.\");\n        }\n        const origin = address.substring(i + 3);\n        const protocol = address.substring(0, i);\n        let wsProtocol;\n        if (protocol === \"http\") {\n            wsProtocol = \"ws\";\n        } else if (protocol === \"https\") {\n            wsProtocol = \"wss\";\n        } else {\n            throw new Error(\"Unknown parent protocol \".concat(protocol));\n        }\n        const wsUri = \"\".concat(wsProtocol, \"://\").concat(origin, \"/api/\").concat(_index_js__WEBPACK_IMPORTED_MODULE_0__.version, \"/sync\");\n        this.state = new _local_state_js__WEBPACK_IMPORTED_MODULE_3__.LocalSyncState();\n        this.remoteQuerySet = new _remote_query_set_js__WEBPACK_IMPORTED_MODULE_6__.RemoteQuerySet((queryId)=>this.state.queryPath(queryId));\n        this.requestManager = new _request_manager_js__WEBPACK_IMPORTED_MODULE_4__.RequestManager();\n        this.authenticationManager = new _authentication_manager_js__WEBPACK_IMPORTED_MODULE_10__.AuthenticationManager(this.state, {\n            authenticate: (token)=>{\n                const message = this.state.setAuth(token);\n                this.webSocketManager.sendMessage(message);\n            },\n            pauseSocket: ()=>this.webSocketManager.pause(),\n            resumeSocket: ()=>this.webSocketManager.resume(),\n            clearAuth: ()=>{\n                this.clearAuth();\n            },\n            verbose: this.verbose\n        });\n        this.optimisticQueryResults = new _optimistic_updates_impl_js__WEBPACK_IMPORTED_MODULE_5__.OptimisticQueryResults();\n        this.onTransition = onTransition;\n        this.nextRequestId = 0;\n        this.sessionId = (0,_session_js__WEBPACK_IMPORTED_MODULE_9__.newSessionId)();\n        const { unsavedChangesWarning } = options;\n        if ( false || typeof window.addEventListener === \"undefined\") {\n            if (unsavedChangesWarning === true) {\n                throw new Error(\"unsavedChangesWarning requested, but window.addEventListener not found! Remove {unsavedChangesWarning: true} from Convex client options.\");\n            }\n        } else if (unsavedChangesWarning !== false) {\n            window.addEventListener(\"beforeunload\", (e)=>{\n                if (this.requestManager.hasIncompleteRequests()) {\n                    e.preventDefault();\n                    const confirmationMessage = \"Are you sure you want to leave? Your changes may not be saved.\";\n                    (e || window.event).returnValue = confirmationMessage;\n                    return confirmationMessage;\n                }\n            });\n        }\n        this.webSocketManager = new _web_socket_manager_js__WEBPACK_IMPORTED_MODULE_8__.WebSocketManager(wsUri, (reconnectMetadata)=>{\n            this.mark(\"convexWebSocketOpen\");\n            this.webSocketManager.sendMessage({\n                ...reconnectMetadata,\n                type: \"Connect\",\n                sessionId: this.sessionId,\n                maxObservedTimestamp: this.maxObservedTimestamp\n            });\n            const oldRemoteQueryResults = new Set(this.remoteQuerySet.remoteQueryResults().keys());\n            this.remoteQuerySet = new _remote_query_set_js__WEBPACK_IMPORTED_MODULE_6__.RemoteQuerySet((queryId)=>this.state.queryPath(queryId));\n            const [querySetModification, authModification] = this.state.restart(oldRemoteQueryResults);\n            if (authModification) {\n                this.webSocketManager.sendMessage(authModification);\n            }\n            this.webSocketManager.sendMessage(querySetModification);\n            for (const message of this.requestManager.restart()){\n                this.webSocketManager.sendMessage(message);\n            }\n        }, (serverMessage)=>{\n            if (!this.firstMessageReceived) {\n                this.firstMessageReceived = true;\n                this.mark(\"convexFirstMessageReceived\");\n                this.reportMarks();\n            }\n            switch(serverMessage.type){\n                case \"Transition\":\n                    {\n                        this.observedTimestamp(serverMessage.endVersion.ts);\n                        this.authenticationManager.onTransition(serverMessage);\n                        this.remoteQuerySet.transition(serverMessage);\n                        this.state.transition(serverMessage);\n                        const completedRequests = this.requestManager.removeCompleted(this.remoteQuerySet.timestamp());\n                        this.notifyOnQueryResultChanges(completedRequests);\n                        break;\n                    }\n                case \"MutationResponse\":\n                    {\n                        if (serverMessage.success) {\n                            this.observedTimestamp(serverMessage.ts);\n                        }\n                        const completedMutationId = this.requestManager.onResponse(serverMessage);\n                        if (completedMutationId) {\n                            this.notifyOnQueryResultChanges(/* @__PURE__ */ new Set([\n                                completedMutationId\n                            ]));\n                        }\n                        break;\n                    }\n                case \"ActionResponse\":\n                    {\n                        this.requestManager.onResponse(serverMessage);\n                        break;\n                    }\n                case \"AuthError\":\n                    {\n                        this.authenticationManager.onAuthError(serverMessage);\n                        break;\n                    }\n                case \"FatalError\":\n                    {\n                        const error = (0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.logFatalError)(serverMessage.error);\n                        void this.webSocketManager.stop();\n                        throw error;\n                    }\n                case \"Ping\":\n                    break;\n                default:\n                    {\n                        const _typeCheck = serverMessage;\n                    }\n            }\n            return {\n                hasSyncedPastLastReconnect: this.hasSyncedPastLastReconnect()\n            };\n        }, webSocketConstructor, this.verbose);\n        this.mark(\"convexClientConstructed\");\n    }\n} //# sourceMappingURL=client.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/client.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/local_state.js":
/*!******************************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/sync/local_state.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LocalSyncState: function() { return /* binding */ LocalSyncState; }\n/* harmony export */ });\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../values/index.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/values/index.js\");\n/* harmony import */ var _udf_path_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./udf_path_utils.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/udf_path_utils.js\");\n\n\n\nclass LocalSyncState {\n    hasSyncedPastLastReconnect() {\n        return this.outstandingQueriesOlderThanRestart.size === 0 && !this.outstandingAuthOlderThanRestart;\n    }\n    markAuthCompletion() {\n        this.outstandingAuthOlderThanRestart = false;\n    }\n    subscribe(udfPath, args, journal) {\n        const canonicalizedUdfPath = (0,_udf_path_utils_js__WEBPACK_IMPORTED_MODULE_1__.canonicalizeUdfPath)(udfPath);\n        const queryToken = (0,_udf_path_utils_js__WEBPACK_IMPORTED_MODULE_1__.serializePathAndArgs)(canonicalizedUdfPath, args);\n        const existingEntry = this.querySet.get(queryToken);\n        if (existingEntry !== void 0) {\n            existingEntry.numSubscribers += 1;\n            return {\n                queryToken,\n                modification: null,\n                unsubscribe: ()=>this.removeSubscriber(queryToken)\n            };\n        } else {\n            const queryId = this.nextQueryId++;\n            const query = {\n                id: queryId,\n                canonicalizedUdfPath,\n                args,\n                numSubscribers: 1,\n                journal\n            };\n            this.querySet.set(queryToken, query);\n            this.queryIdToToken.set(queryId, queryToken);\n            const baseVersion = this.querySetVersion;\n            const newVersion = ++this.querySetVersion;\n            const add = {\n                type: \"Add\",\n                queryId,\n                udfPath: canonicalizedUdfPath,\n                args: [\n                    (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(args)\n                ],\n                journal\n            };\n            const modification = {\n                type: \"ModifyQuerySet\",\n                baseVersion,\n                newVersion,\n                modifications: [\n                    add\n                ]\n            };\n            return {\n                queryToken,\n                modification,\n                unsubscribe: ()=>this.removeSubscriber(queryToken)\n            };\n        }\n    }\n    transition(transition) {\n        for (const modification of transition.modifications){\n            switch(modification.type){\n                case \"QueryUpdated\":\n                case \"QueryFailed\":\n                    {\n                        this.outstandingQueriesOlderThanRestart.delete(modification.queryId);\n                        const journal = modification.journal;\n                        if (journal !== void 0) {\n                            const queryToken = this.queryIdToToken.get(modification.queryId);\n                            if (queryToken !== void 0) {\n                                this.querySet.get(queryToken).journal = journal;\n                            }\n                        }\n                        break;\n                    }\n                case \"QueryRemoved\":\n                    {\n                        this.outstandingQueriesOlderThanRestart.delete(modification.queryId);\n                        break;\n                    }\n                default:\n                    {\n                        const _ = modification;\n                        throw new Error(\"Invalid modification \".concat(modification.type));\n                    }\n            }\n        }\n    }\n    queryId(udfPath, args) {\n        const canonicalizedUdfPath = (0,_udf_path_utils_js__WEBPACK_IMPORTED_MODULE_1__.canonicalizeUdfPath)(udfPath);\n        const queryToken = (0,_udf_path_utils_js__WEBPACK_IMPORTED_MODULE_1__.serializePathAndArgs)(canonicalizedUdfPath, args);\n        const existingEntry = this.querySet.get(queryToken);\n        if (existingEntry !== void 0) {\n            return existingEntry.id;\n        }\n        return null;\n    }\n    isCurrentOrNewerAuthVersion(version) {\n        return version >= this.identityVersion;\n    }\n    setAuth(value) {\n        this.auth = {\n            tokenType: \"User\",\n            value\n        };\n        const baseVersion = this.identityVersion++;\n        return {\n            type: \"Authenticate\",\n            baseVersion,\n            ...this.auth\n        };\n    }\n    setAdminAuth(value, actingAs) {\n        const auth = {\n            tokenType: \"Admin\",\n            value,\n            impersonating: actingAs\n        };\n        this.auth = auth;\n        const baseVersion = this.identityVersion++;\n        return {\n            type: \"Authenticate\",\n            baseVersion,\n            ...auth\n        };\n    }\n    clearAuth() {\n        this.auth = void 0;\n        this.markAuthCompletion();\n        const baseVersion = this.identityVersion++;\n        return {\n            type: \"Authenticate\",\n            tokenType: \"None\",\n            baseVersion\n        };\n    }\n    hasAuth() {\n        return !!this.auth;\n    }\n    isNewAuth(value) {\n        var _this_auth;\n        return ((_this_auth = this.auth) === null || _this_auth === void 0 ? void 0 : _this_auth.value) !== value;\n    }\n    queryPath(queryId) {\n        const pathAndArgs = this.queryIdToToken.get(queryId);\n        if (pathAndArgs) {\n            return this.querySet.get(pathAndArgs).canonicalizedUdfPath;\n        }\n        return null;\n    }\n    queryArgs(queryId) {\n        const pathAndArgs = this.queryIdToToken.get(queryId);\n        if (pathAndArgs) {\n            return this.querySet.get(pathAndArgs).args;\n        }\n        return null;\n    }\n    queryToken(queryId) {\n        var _this_queryIdToToken_get;\n        return (_this_queryIdToToken_get = this.queryIdToToken.get(queryId)) !== null && _this_queryIdToToken_get !== void 0 ? _this_queryIdToToken_get : null;\n    }\n    queryJournal(queryToken) {\n        var _this_querySet_get;\n        return (_this_querySet_get = this.querySet.get(queryToken)) === null || _this_querySet_get === void 0 ? void 0 : _this_querySet_get.journal;\n    }\n    restart(oldRemoteQueryResults) {\n        this.outstandingQueriesOlderThanRestart.clear();\n        const modifications = [];\n        for (const localQuery of this.querySet.values()){\n            const add = {\n                type: \"Add\",\n                queryId: localQuery.id,\n                udfPath: localQuery.canonicalizedUdfPath,\n                args: [\n                    (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(localQuery.args)\n                ],\n                journal: localQuery.journal\n            };\n            modifications.push(add);\n            if (!oldRemoteQueryResults.has(localQuery.id)) {\n                this.outstandingQueriesOlderThanRestart.add(localQuery.id);\n            }\n        }\n        this.querySetVersion = 1;\n        const querySet = {\n            type: \"ModifyQuerySet\",\n            baseVersion: 0,\n            newVersion: 1,\n            modifications\n        };\n        if (!this.auth) {\n            this.identityVersion = 0;\n            return [\n                querySet,\n                void 0\n            ];\n        }\n        this.outstandingAuthOlderThanRestart = true;\n        const authenticate = {\n            type: \"Authenticate\",\n            baseVersion: 0,\n            ...this.auth\n        };\n        this.identityVersion = 1;\n        return [\n            querySet,\n            authenticate\n        ];\n    }\n    removeSubscriber(queryToken) {\n        const localQuery = this.querySet.get(queryToken);\n        if (localQuery.numSubscribers > 1) {\n            localQuery.numSubscribers -= 1;\n            return null;\n        } else {\n            this.querySet.delete(queryToken);\n            this.queryIdToToken.delete(localQuery.id);\n            this.outstandingQueriesOlderThanRestart.delete(localQuery.id);\n            const baseVersion = this.querySetVersion;\n            const newVersion = ++this.querySetVersion;\n            const remove = {\n                type: \"Remove\",\n                queryId: localQuery.id\n            };\n            return {\n                type: \"ModifyQuerySet\",\n                baseVersion,\n                newVersion,\n                modifications: [\n                    remove\n                ]\n            };\n        }\n    }\n    constructor(){\n        this.nextQueryId = 0;\n        this.querySetVersion = 0;\n        this.identityVersion = 0;\n        this.querySet = /* @__PURE__ */ new Map();\n        this.queryIdToToken = /* @__PURE__ */ new Map();\n        this.outstandingQueriesOlderThanRestart = /* @__PURE__ */ new Set();\n        this.outstandingAuthOlderThanRestart = false;\n    }\n} //# sourceMappingURL=local_state.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/local_state.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/metrics.js":
/*!**************************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/sync/metrics.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getMarksReport: function() { return /* binding */ getMarksReport; },\n/* harmony export */   mark: function() { return /* binding */ mark; }\n/* harmony export */ });\n\nconst markNames = [\n    \"convexClientConstructed\",\n    \"convexWebSocketOpen\",\n    \"convexFirstMessageReceived\"\n];\nfunction mark(name, sessionId) {\n    const detail = {\n        sessionId\n    };\n    if (typeof performance === \"undefined\" || !performance.mark) return;\n    performance.mark(name, {\n        detail\n    });\n}\nfunction performanceMarkToJson(mark2) {\n    let name = mark2.name.slice(\"convex\".length);\n    name = name.charAt(0).toLowerCase() + name.slice(1);\n    return {\n        name,\n        startTime: mark2.startTime\n    };\n}\nfunction getMarksReport(sessionId) {\n    if (typeof performance === \"undefined\" || !performance.getEntriesByName) {\n        return [];\n    }\n    const allMarks = [];\n    for (const name of markNames){\n        const marks = performance.getEntriesByName(name).filter((entry)=>entry.entryType === \"mark\").filter((mark2)=>mark2.detail.sessionId === sessionId);\n        allMarks.push(...marks);\n    }\n    return allMarks.map(performanceMarkToJson);\n} //# sourceMappingURL=metrics.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vYnJvd3Nlci9zeW5jL21ldHJpY3MuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBYTtBQUNiLE1BQU1BLFlBQVk7SUFDaEI7SUFDQTtJQUNBO0NBQ0Q7QUFDTSxTQUFTQyxLQUFLQyxJQUFJLEVBQUVDLFNBQVM7SUFDbEMsTUFBTUMsU0FBUztRQUFFRDtJQUFVO0lBQzNCLElBQUksT0FBT0UsZ0JBQWdCLGVBQWUsQ0FBQ0EsWUFBWUosSUFBSSxFQUN6RDtJQUNGSSxZQUFZSixJQUFJLENBQUNDLE1BQU07UUFBRUU7SUFBTztBQUNsQztBQUNBLFNBQVNFLHNCQUFzQkMsS0FBSztJQUNsQyxJQUFJTCxPQUFPSyxNQUFNTCxJQUFJLENBQUNNLEtBQUssQ0FBQyxTQUFTQyxNQUFNO0lBQzNDUCxPQUFPQSxLQUFLUSxNQUFNLENBQUMsR0FBR0MsV0FBVyxLQUFLVCxLQUFLTSxLQUFLLENBQUM7SUFDakQsT0FBTztRQUNMTjtRQUNBVSxXQUFXTCxNQUFNSyxTQUFTO0lBQzVCO0FBQ0Y7QUFDTyxTQUFTQyxlQUFlVixTQUFTO0lBQ3RDLElBQUksT0FBT0UsZ0JBQWdCLGVBQWUsQ0FBQ0EsWUFBWVMsZ0JBQWdCLEVBQUU7UUFDdkUsT0FBTyxFQUFFO0lBQ1g7SUFDQSxNQUFNQyxXQUFXLEVBQUU7SUFDbkIsS0FBSyxNQUFNYixRQUFRRixVQUFXO1FBQzVCLE1BQU1nQixRQUFRWCxZQUFZUyxnQkFBZ0IsQ0FBQ1osTUFBTWUsTUFBTSxDQUFDLENBQUNDLFFBQVVBLE1BQU1DLFNBQVMsS0FBSyxRQUFRRixNQUFNLENBQUMsQ0FBQ1YsUUFBVUEsTUFBTUgsTUFBTSxDQUFDRCxTQUFTLEtBQUtBO1FBQzVJWSxTQUFTSyxJQUFJLElBQUlKO0lBQ25CO0lBQ0EsT0FBT0QsU0FBU00sR0FBRyxDQUFDZjtBQUN0QixFQUNBLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL2Jyb3dzZXIvc3luYy9tZXRyaWNzLmpzPzNmNTYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBtYXJrTmFtZXMgPSBbXG4gIFwiY29udmV4Q2xpZW50Q29uc3RydWN0ZWRcIixcbiAgXCJjb252ZXhXZWJTb2NrZXRPcGVuXCIsXG4gIFwiY29udmV4Rmlyc3RNZXNzYWdlUmVjZWl2ZWRcIlxuXTtcbmV4cG9ydCBmdW5jdGlvbiBtYXJrKG5hbWUsIHNlc3Npb25JZCkge1xuICBjb25zdCBkZXRhaWwgPSB7IHNlc3Npb25JZCB9O1xuICBpZiAodHlwZW9mIHBlcmZvcm1hbmNlID09PSBcInVuZGVmaW5lZFwiIHx8ICFwZXJmb3JtYW5jZS5tYXJrKVxuICAgIHJldHVybjtcbiAgcGVyZm9ybWFuY2UubWFyayhuYW1lLCB7IGRldGFpbCB9KTtcbn1cbmZ1bmN0aW9uIHBlcmZvcm1hbmNlTWFya1RvSnNvbihtYXJrMikge1xuICBsZXQgbmFtZSA9IG1hcmsyLm5hbWUuc2xpY2UoXCJjb252ZXhcIi5sZW5ndGgpO1xuICBuYW1lID0gbmFtZS5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSArIG5hbWUuc2xpY2UoMSk7XG4gIHJldHVybiB7XG4gICAgbmFtZSxcbiAgICBzdGFydFRpbWU6IG1hcmsyLnN0YXJ0VGltZVxuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldE1hcmtzUmVwb3J0KHNlc3Npb25JZCkge1xuICBpZiAodHlwZW9mIHBlcmZvcm1hbmNlID09PSBcInVuZGVmaW5lZFwiIHx8ICFwZXJmb3JtYW5jZS5nZXRFbnRyaWVzQnlOYW1lKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIGNvbnN0IGFsbE1hcmtzID0gW107XG4gIGZvciAoY29uc3QgbmFtZSBvZiBtYXJrTmFtZXMpIHtcbiAgICBjb25zdCBtYXJrcyA9IHBlcmZvcm1hbmNlLmdldEVudHJpZXNCeU5hbWUobmFtZSkuZmlsdGVyKChlbnRyeSkgPT4gZW50cnkuZW50cnlUeXBlID09PSBcIm1hcmtcIikuZmlsdGVyKChtYXJrMikgPT4gbWFyazIuZGV0YWlsLnNlc3Npb25JZCA9PT0gc2Vzc2lvbklkKTtcbiAgICBhbGxNYXJrcy5wdXNoKC4uLm1hcmtzKTtcbiAgfVxuICByZXR1cm4gYWxsTWFya3MubWFwKHBlcmZvcm1hbmNlTWFya1RvSnNvbik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXRyaWNzLmpzLm1hcFxuIl0sIm5hbWVzIjpbIm1hcmtOYW1lcyIsIm1hcmsiLCJuYW1lIiwic2Vzc2lvbklkIiwiZGV0YWlsIiwicGVyZm9ybWFuY2UiLCJwZXJmb3JtYW5jZU1hcmtUb0pzb24iLCJtYXJrMiIsInNsaWNlIiwibGVuZ3RoIiwiY2hhckF0IiwidG9Mb3dlckNhc2UiLCJzdGFydFRpbWUiLCJnZXRNYXJrc1JlcG9ydCIsImdldEVudHJpZXNCeU5hbWUiLCJhbGxNYXJrcyIsIm1hcmtzIiwiZmlsdGVyIiwiZW50cnkiLCJlbnRyeVR5cGUiLCJwdXNoIiwibWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/metrics.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/optimistic_updates_impl.js":
/*!******************************************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/sync/optimistic_updates_impl.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OptimisticQueryResults: function() { return /* binding */ OptimisticQueryResults; }\n/* harmony export */ });\n/* harmony import */ var _server_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../server/api.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/server/api.js\");\n/* harmony import */ var _common_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common/index.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/common/index.js\");\n/* harmony import */ var _logging_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../logging.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/browser/logging.js\");\n/* harmony import */ var _udf_path_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./udf_path_utils.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/udf_path_utils.js\");\n/* harmony import */ var _values_errors_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../values/errors.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/values/errors.js\");\n\n\n\n\n\n\nclass OptimisticLocalStoreImpl {\n    getQuery(query) {\n        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            args[_key - 1] = arguments[_key];\n        }\n        const queryArgs = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_1__.parseArgs)(args[0]);\n        const name = (0,_server_api_js__WEBPACK_IMPORTED_MODULE_0__.getFunctionName)(query);\n        const queryResult = this.queryResults.get((0,_udf_path_utils_js__WEBPACK_IMPORTED_MODULE_3__.serializePathAndArgs)(name, queryArgs));\n        if (queryResult === void 0) {\n            return void 0;\n        }\n        return OptimisticLocalStoreImpl.queryValue(queryResult.result);\n    }\n    getAllQueries(query) {\n        const queriesWithName = [];\n        const name = (0,_server_api_js__WEBPACK_IMPORTED_MODULE_0__.getFunctionName)(query);\n        for (const queryResult of this.queryResults.values()){\n            if (queryResult.udfPath === (0,_udf_path_utils_js__WEBPACK_IMPORTED_MODULE_3__.canonicalizeUdfPath)(name)) {\n                queriesWithName.push({\n                    args: queryResult.args,\n                    value: OptimisticLocalStoreImpl.queryValue(queryResult.result)\n                });\n            }\n        }\n        return queriesWithName;\n    }\n    setQuery(queryReference, args, value) {\n        const queryArgs = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_1__.parseArgs)(args);\n        const name = (0,_server_api_js__WEBPACK_IMPORTED_MODULE_0__.getFunctionName)(queryReference);\n        const queryToken = (0,_udf_path_utils_js__WEBPACK_IMPORTED_MODULE_3__.serializePathAndArgs)(name, queryArgs);\n        let result;\n        if (value === void 0) {\n            result = void 0;\n        } else {\n            result = {\n                success: true,\n                value,\n                // It's an optimistic update, so there are no function logs to show.\n                logLines: []\n            };\n        }\n        const query = {\n            udfPath: name,\n            args: queryArgs,\n            result\n        };\n        this.queryResults.set(queryToken, query);\n        this.modifiedQueries.push(queryToken);\n    }\n    static queryValue(result) {\n        if (result === void 0) {\n            return void 0;\n        } else if (result.success) {\n            return result.value;\n        } else {\n            return void 0;\n        }\n    }\n    constructor(queryResults){\n        this.queryResults = queryResults;\n        this.modifiedQueries = [];\n    }\n}\nclass OptimisticQueryResults {\n    ingestQueryResultsFromServer(serverQueryResults, optimisticUpdatesToDrop) {\n        this.optimisticUpdates = this.optimisticUpdates.filter((updateAndId)=>{\n            return !optimisticUpdatesToDrop.has(updateAndId.mutationId);\n        });\n        const oldQueryResults = this.queryResults;\n        this.queryResults = new Map(serverQueryResults);\n        const localStore = new OptimisticLocalStoreImpl(this.queryResults);\n        for (const updateAndId of this.optimisticUpdates){\n            updateAndId.update(localStore);\n        }\n        const changedQueries = [];\n        for (const [queryToken, query] of this.queryResults){\n            const oldQuery = oldQueryResults.get(queryToken);\n            if (oldQuery === void 0 || oldQuery.result !== query.result) {\n                changedQueries.push(queryToken);\n            }\n        }\n        return changedQueries;\n    }\n    applyOptimisticUpdate(update, mutationId) {\n        this.optimisticUpdates.push({\n            update,\n            mutationId\n        });\n        const localStore = new OptimisticLocalStoreImpl(this.queryResults);\n        update(localStore);\n        return localStore.modifiedQueries;\n    }\n    queryResult(queryToken) {\n        const query = this.queryResults.get(queryToken);\n        if (query === void 0) {\n            return void 0;\n        }\n        const result = query.result;\n        if (result === void 0) {\n            return void 0;\n        } else if (result.success) {\n            return result.value;\n        } else {\n            if (result.errorData !== void 0) {\n                throw (0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.forwardData)(result, new _values_errors_js__WEBPACK_IMPORTED_MODULE_4__.ConvexError((0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.createHybridErrorStacktrace)(\"query\", query.udfPath, result)));\n            }\n            throw new Error((0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.createHybridErrorStacktrace)(\"query\", query.udfPath, result));\n        }\n    }\n    hasQueryResult(queryToken) {\n        return this.queryResults.get(queryToken) !== void 0;\n    }\n    /**\n   * @internal\n   */ queryLogs(queryToken) {\n        var _query_result;\n        const query = this.queryResults.get(queryToken);\n        return query === null || query === void 0 ? void 0 : (_query_result = query.result) === null || _query_result === void 0 ? void 0 : _query_result.logLines;\n    }\n    constructor(){\n        this.queryResults = /* @__PURE__ */ new Map();\n        this.optimisticUpdates = [];\n    }\n} //# sourceMappingURL=optimistic_updates_impl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/optimistic_updates_impl.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/protocol.js":
/*!***************************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/sync/protocol.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   encodeClientMessage: function() { return /* binding */ encodeClientMessage; },\n/* harmony export */   longToU64: function() { return /* binding */ longToU64; },\n/* harmony export */   parseServerMessage: function() { return /* binding */ parseServerMessage; },\n/* harmony export */   u64ToLong: function() { return /* binding */ u64ToLong; }\n/* harmony export */ });\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../values/index.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/values/index.js\");\n/* harmony import */ var _long_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../long.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/browser/long.js\");\n\n\n\nfunction u64ToLong(encoded) {\n    const integerBytes = _values_index_js__WEBPACK_IMPORTED_MODULE_0__.Base64.toByteArray(encoded);\n    return _long_js__WEBPACK_IMPORTED_MODULE_1__.Long.fromBytesLE(Array.from(integerBytes));\n}\nfunction longToU64(raw) {\n    const integerBytes = new Uint8Array(raw.toBytesLE());\n    return _values_index_js__WEBPACK_IMPORTED_MODULE_0__.Base64.fromByteArray(integerBytes);\n}\nfunction parseServerMessage(encoded) {\n    switch(encoded.type){\n        case \"FatalError\":\n        case \"AuthError\":\n        case \"ActionResponse\":\n        case \"Ping\":\n            {\n                return {\n                    ...encoded\n                };\n            }\n        case \"MutationResponse\":\n            {\n                if (encoded.success) {\n                    return {\n                        ...encoded,\n                        ts: u64ToLong(encoded.ts)\n                    };\n                } else {\n                    return {\n                        ...encoded\n                    };\n                }\n            }\n        case \"Transition\":\n            {\n                return {\n                    ...encoded,\n                    startVersion: {\n                        ...encoded.startVersion,\n                        ts: u64ToLong(encoded.startVersion.ts)\n                    },\n                    endVersion: {\n                        ...encoded.endVersion,\n                        ts: u64ToLong(encoded.endVersion.ts)\n                    }\n                };\n            }\n        default:\n            {\n                const _exhaustivenessCheck = encoded;\n            }\n    }\n    return void 0;\n}\nfunction encodeClientMessage(message) {\n    switch(message.type){\n        case \"Authenticate\":\n        case \"ModifyQuerySet\":\n        case \"Mutation\":\n        case \"Action\":\n        case \"Event\":\n            {\n                return {\n                    ...message\n                };\n            }\n        case \"Connect\":\n            {\n                if (message.maxObservedTimestamp !== void 0) {\n                    return {\n                        ...message,\n                        maxObservedTimestamp: longToU64(message.maxObservedTimestamp)\n                    };\n                } else {\n                    return {\n                        ...message,\n                        maxObservedTimestamp: void 0\n                    };\n                }\n            }\n        default:\n            {\n                const _exhaustivenessCheck = message;\n            }\n    }\n    return void 0;\n} //# sourceMappingURL=protocol.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vYnJvd3Nlci9zeW5jL3Byb3RvY29sLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFhO0FBQ2tDO0FBQ2I7QUFDM0IsU0FBU0UsVUFBVUMsT0FBTztJQUMvQixNQUFNQyxlQUFlSixnRUFBa0IsQ0FBQ0c7SUFDeEMsT0FBT0YsMENBQUlBLENBQUNLLFdBQVcsQ0FBQ0MsTUFBTUMsSUFBSSxDQUFDSjtBQUNyQztBQUNPLFNBQVNLLFVBQVVDLEdBQUc7SUFDM0IsTUFBTU4sZUFBZSxJQUFJTyxXQUFXRCxJQUFJRSxTQUFTO0lBQ2pELE9BQU9aLGtFQUFvQixDQUFDSTtBQUM5QjtBQUNPLFNBQVNVLG1CQUFtQlgsT0FBTztJQUN4QyxPQUFRQSxRQUFRWSxJQUFJO1FBQ2xCLEtBQUs7UUFDTCxLQUFLO1FBQ0wsS0FBSztRQUNMLEtBQUs7WUFBUTtnQkFDWCxPQUFPO29CQUFFLEdBQUdaLE9BQU87Z0JBQUM7WUFDdEI7UUFDQSxLQUFLO1lBQW9CO2dCQUN2QixJQUFJQSxRQUFRYSxPQUFPLEVBQUU7b0JBQ25CLE9BQU87d0JBQUUsR0FBR2IsT0FBTzt3QkFBRWMsSUFBSWYsVUFBVUMsUUFBUWMsRUFBRTtvQkFBRTtnQkFDakQsT0FBTztvQkFDTCxPQUFPO3dCQUFFLEdBQUdkLE9BQU87b0JBQUM7Z0JBQ3RCO1lBQ0Y7UUFDQSxLQUFLO1lBQWM7Z0JBQ2pCLE9BQU87b0JBQ0wsR0FBR0EsT0FBTztvQkFDVmUsY0FBYzt3QkFDWixHQUFHZixRQUFRZSxZQUFZO3dCQUN2QkQsSUFBSWYsVUFBVUMsUUFBUWUsWUFBWSxDQUFDRCxFQUFFO29CQUN2QztvQkFDQUUsWUFBWTt3QkFDVixHQUFHaEIsUUFBUWdCLFVBQVU7d0JBQ3JCRixJQUFJZixVQUFVQyxRQUFRZ0IsVUFBVSxDQUFDRixFQUFFO29CQUNyQztnQkFDRjtZQUNGO1FBQ0E7WUFBUztnQkFDUCxNQUFNRyx1QkFBdUJqQjtZQUMvQjtJQUNGO0lBQ0EsT0FBTyxLQUFLO0FBQ2Q7QUFDTyxTQUFTa0Isb0JBQW9CQyxPQUFPO0lBQ3pDLE9BQVFBLFFBQVFQLElBQUk7UUFDbEIsS0FBSztRQUNMLEtBQUs7UUFDTCxLQUFLO1FBQ0wsS0FBSztRQUNMLEtBQUs7WUFBUztnQkFDWixPQUFPO29CQUFFLEdBQUdPLE9BQU87Z0JBQUM7WUFDdEI7UUFDQSxLQUFLO1lBQVc7Z0JBQ2QsSUFBSUEsUUFBUUMsb0JBQW9CLEtBQUssS0FBSyxHQUFHO29CQUMzQyxPQUFPO3dCQUNMLEdBQUdELE9BQU87d0JBQ1ZDLHNCQUFzQmQsVUFBVWEsUUFBUUMsb0JBQW9CO29CQUM5RDtnQkFDRixPQUFPO29CQUNMLE9BQU87d0JBQUUsR0FBR0QsT0FBTzt3QkFBRUMsc0JBQXNCLEtBQUs7b0JBQUU7Z0JBQ3BEO1lBQ0Y7UUFDQTtZQUFTO2dCQUNQLE1BQU1ILHVCQUF1QkU7WUFDL0I7SUFDRjtJQUNBLE9BQU8sS0FBSztBQUNkLEVBQ0Esb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vYnJvd3Nlci9zeW5jL3Byb3RvY29sLmpzPzI1MjQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5pbXBvcnQgeyBCYXNlNjQgfSBmcm9tIFwiLi4vLi4vdmFsdWVzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBMb25nIH0gZnJvbSBcIi4uL2xvbmcuanNcIjtcbmV4cG9ydCBmdW5jdGlvbiB1NjRUb0xvbmcoZW5jb2RlZCkge1xuICBjb25zdCBpbnRlZ2VyQnl0ZXMgPSBCYXNlNjQudG9CeXRlQXJyYXkoZW5jb2RlZCk7XG4gIHJldHVybiBMb25nLmZyb21CeXRlc0xFKEFycmF5LmZyb20oaW50ZWdlckJ5dGVzKSk7XG59XG5leHBvcnQgZnVuY3Rpb24gbG9uZ1RvVTY0KHJhdykge1xuICBjb25zdCBpbnRlZ2VyQnl0ZXMgPSBuZXcgVWludDhBcnJheShyYXcudG9CeXRlc0xFKCkpO1xuICByZXR1cm4gQmFzZTY0LmZyb21CeXRlQXJyYXkoaW50ZWdlckJ5dGVzKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVNlcnZlck1lc3NhZ2UoZW5jb2RlZCkge1xuICBzd2l0Y2ggKGVuY29kZWQudHlwZSkge1xuICAgIGNhc2UgXCJGYXRhbEVycm9yXCI6XG4gICAgY2FzZSBcIkF1dGhFcnJvclwiOlxuICAgIGNhc2UgXCJBY3Rpb25SZXNwb25zZVwiOlxuICAgIGNhc2UgXCJQaW5nXCI6IHtcbiAgICAgIHJldHVybiB7IC4uLmVuY29kZWQgfTtcbiAgICB9XG4gICAgY2FzZSBcIk11dGF0aW9uUmVzcG9uc2VcIjoge1xuICAgICAgaWYgKGVuY29kZWQuc3VjY2Vzcykge1xuICAgICAgICByZXR1cm4geyAuLi5lbmNvZGVkLCB0czogdTY0VG9Mb25nKGVuY29kZWQudHMpIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4geyAuLi5lbmNvZGVkIH07XG4gICAgICB9XG4gICAgfVxuICAgIGNhc2UgXCJUcmFuc2l0aW9uXCI6IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLmVuY29kZWQsXG4gICAgICAgIHN0YXJ0VmVyc2lvbjoge1xuICAgICAgICAgIC4uLmVuY29kZWQuc3RhcnRWZXJzaW9uLFxuICAgICAgICAgIHRzOiB1NjRUb0xvbmcoZW5jb2RlZC5zdGFydFZlcnNpb24udHMpXG4gICAgICAgIH0sXG4gICAgICAgIGVuZFZlcnNpb246IHtcbiAgICAgICAgICAuLi5lbmNvZGVkLmVuZFZlcnNpb24sXG4gICAgICAgICAgdHM6IHU2NFRvTG9uZyhlbmNvZGVkLmVuZFZlcnNpb24udHMpXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICAgIGRlZmF1bHQ6IHtcbiAgICAgIGNvbnN0IF9leGhhdXN0aXZlbmVzc0NoZWNrID0gZW5jb2RlZDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHZvaWQgMDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGVDbGllbnRNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgc3dpdGNoIChtZXNzYWdlLnR5cGUpIHtcbiAgICBjYXNlIFwiQXV0aGVudGljYXRlXCI6XG4gICAgY2FzZSBcIk1vZGlmeVF1ZXJ5U2V0XCI6XG4gICAgY2FzZSBcIk11dGF0aW9uXCI6XG4gICAgY2FzZSBcIkFjdGlvblwiOlxuICAgIGNhc2UgXCJFdmVudFwiOiB7XG4gICAgICByZXR1cm4geyAuLi5tZXNzYWdlIH07XG4gICAgfVxuICAgIGNhc2UgXCJDb25uZWN0XCI6IHtcbiAgICAgIGlmIChtZXNzYWdlLm1heE9ic2VydmVkVGltZXN0YW1wICE9PSB2b2lkIDApIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAuLi5tZXNzYWdlLFxuICAgICAgICAgIG1heE9ic2VydmVkVGltZXN0YW1wOiBsb25nVG9VNjQobWVzc2FnZS5tYXhPYnNlcnZlZFRpbWVzdGFtcClcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB7IC4uLm1lc3NhZ2UsIG1heE9ic2VydmVkVGltZXN0YW1wOiB2b2lkIDAgfTtcbiAgICAgIH1cbiAgICB9XG4gICAgZGVmYXVsdDoge1xuICAgICAgY29uc3QgX2V4aGF1c3RpdmVuZXNzQ2hlY2sgPSBtZXNzYWdlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdm9pZCAwO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvdG9jb2wuanMubWFwXG4iXSwibmFtZXMiOlsiQmFzZTY0IiwiTG9uZyIsInU2NFRvTG9uZyIsImVuY29kZWQiLCJpbnRlZ2VyQnl0ZXMiLCJ0b0J5dGVBcnJheSIsImZyb21CeXRlc0xFIiwiQXJyYXkiLCJmcm9tIiwibG9uZ1RvVTY0IiwicmF3IiwiVWludDhBcnJheSIsInRvQnl0ZXNMRSIsImZyb21CeXRlQXJyYXkiLCJwYXJzZVNlcnZlck1lc3NhZ2UiLCJ0eXBlIiwic3VjY2VzcyIsInRzIiwic3RhcnRWZXJzaW9uIiwiZW5kVmVyc2lvbiIsIl9leGhhdXN0aXZlbmVzc0NoZWNrIiwiZW5jb2RlQ2xpZW50TWVzc2FnZSIsIm1lc3NhZ2UiLCJtYXhPYnNlcnZlZFRpbWVzdGFtcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/protocol.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/remote_query_set.js":
/*!***********************************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/sync/remote_query_set.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RemoteQuerySet: function() { return /* binding */ RemoteQuerySet; }\n/* harmony export */ });\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../values/index.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/values/index.js\");\n/* harmony import */ var _long_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../long.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/browser/long.js\");\n/* harmony import */ var _logging_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../logging.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/browser/logging.js\");\n\n\n\n\nclass RemoteQuerySet {\n    transition(transition) {\n        const start = transition.startVersion;\n        if (this.version.querySet !== start.querySet || this.version.ts.notEquals(start.ts) || this.version.identity !== start.identity) {\n            throw new Error(\"Invalid start version: \".concat(start.ts.toString(), \":\").concat(start.querySet));\n        }\n        for (const modification of transition.modifications){\n            switch(modification.type){\n                case \"QueryUpdated\":\n                    {\n                        const queryPath = this.queryPath(modification.queryId);\n                        if (queryPath) {\n                            for (const line of modification.logLines){\n                                (0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.logToConsole)(\"info\", \"query\", queryPath, line);\n                            }\n                        }\n                        var _modification_value;\n                        const value = (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)((_modification_value = modification.value) !== null && _modification_value !== void 0 ? _modification_value : null, true);\n                        this.remoteQuerySet.set(modification.queryId, {\n                            success: true,\n                            value,\n                            logLines: modification.logLines\n                        });\n                        break;\n                    }\n                case \"QueryFailed\":\n                    {\n                        const queryPath = this.queryPath(modification.queryId);\n                        if (queryPath) {\n                            for (const line of modification.logLines){\n                                (0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.logToConsole)(\"info\", \"query\", queryPath, line);\n                            }\n                        }\n                        const { errorData } = modification;\n                        this.remoteQuerySet.set(modification.queryId, {\n                            success: false,\n                            errorMessage: modification.errorMessage,\n                            errorData: errorData !== void 0 ? (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)(errorData) : void 0,\n                            logLines: modification.logLines\n                        });\n                        break;\n                    }\n                case \"QueryRemoved\":\n                    {\n                        this.remoteQuerySet.delete(modification.queryId);\n                        break;\n                    }\n                default:\n                    {\n                        const _ = modification;\n                        throw new Error(\"Invalid modification \".concat(modification.type));\n                    }\n            }\n        }\n        this.version = transition.endVersion;\n    }\n    remoteQueryResults() {\n        return this.remoteQuerySet;\n    }\n    timestamp() {\n        return this.version.ts;\n    }\n    constructor(queryPath){\n        this.version = {\n            querySet: 0,\n            ts: _long_js__WEBPACK_IMPORTED_MODULE_1__.Long.fromNumber(0),\n            identity: 0\n        };\n        this.remoteQuerySet = /* @__PURE__ */ new Map();\n        this.queryPath = queryPath;\n    }\n} //# sourceMappingURL=remote_query_set.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vYnJvd3Nlci9zeW5jL3JlbW90ZV9xdWVyeV9zZXQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFhO0FBQ3dDO0FBQ25CO0FBQ1c7QUFDdEMsTUFBTUc7SUFNWEMsV0FBV0EsVUFBVSxFQUFFO1FBQ3JCLE1BQU1DLFFBQVFELFdBQVdFLFlBQVk7UUFDckMsSUFBSSxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsUUFBUSxLQUFLSCxNQUFNRyxRQUFRLElBQUksSUFBSSxDQUFDRCxPQUFPLENBQUNFLEVBQUUsQ0FBQ0MsU0FBUyxDQUFDTCxNQUFNSSxFQUFFLEtBQUssSUFBSSxDQUFDRixPQUFPLENBQUNJLFFBQVEsS0FBS04sTUFBTU0sUUFBUSxFQUFFO1lBQy9ILE1BQU0sSUFBSUMsTUFDUiwwQkFBaURQLE9BQXZCQSxNQUFNSSxFQUFFLENBQUNJLFFBQVEsSUFBRyxLQUFrQixPQUFmUixNQUFNRyxRQUFRO1FBRW5FO1FBQ0EsS0FBSyxNQUFNTSxnQkFBZ0JWLFdBQVdXLGFBQWEsQ0FBRTtZQUNuRCxPQUFRRCxhQUFhRSxJQUFJO2dCQUN2QixLQUFLO29CQUFnQjt3QkFDbkIsTUFBTUMsWUFBWSxJQUFJLENBQUNBLFNBQVMsQ0FBQ0gsYUFBYUksT0FBTzt3QkFDckQsSUFBSUQsV0FBVzs0QkFDYixLQUFLLE1BQU1FLFFBQVFMLGFBQWFNLFFBQVEsQ0FBRTtnQ0FDeENsQix5REFBWUEsQ0FBQyxRQUFRLFNBQVNlLFdBQVdFOzRCQUMzQzt3QkFDRjs0QkFDMkJMO3dCQUEzQixNQUFNTyxRQUFRckIsOERBQVlBLENBQUNjLENBQUFBLHNCQUFBQSxhQUFhTyxLQUFLLGNBQWxCUCxpQ0FBQUEsc0JBQXNCLE1BQU07d0JBQ3ZELElBQUksQ0FBQ1EsY0FBYyxDQUFDQyxHQUFHLENBQUNULGFBQWFJLE9BQU8sRUFBRTs0QkFDNUNNLFNBQVM7NEJBQ1RIOzRCQUNBRCxVQUFVTixhQUFhTSxRQUFRO3dCQUNqQzt3QkFDQTtvQkFDRjtnQkFDQSxLQUFLO29CQUFlO3dCQUNsQixNQUFNSCxZQUFZLElBQUksQ0FBQ0EsU0FBUyxDQUFDSCxhQUFhSSxPQUFPO3dCQUNyRCxJQUFJRCxXQUFXOzRCQUNiLEtBQUssTUFBTUUsUUFBUUwsYUFBYU0sUUFBUSxDQUFFO2dDQUN4Q2xCLHlEQUFZQSxDQUFDLFFBQVEsU0FBU2UsV0FBV0U7NEJBQzNDO3dCQUNGO3dCQUNBLE1BQU0sRUFBRU0sU0FBUyxFQUFFLEdBQUdYO3dCQUN0QixJQUFJLENBQUNRLGNBQWMsQ0FBQ0MsR0FBRyxDQUFDVCxhQUFhSSxPQUFPLEVBQUU7NEJBQzVDTSxTQUFTOzRCQUNURSxjQUFjWixhQUFhWSxZQUFZOzRCQUN2Q0QsV0FBV0EsY0FBYyxLQUFLLElBQUl6Qiw4REFBWUEsQ0FBQ3lCLGFBQWEsS0FBSzs0QkFDakVMLFVBQVVOLGFBQWFNLFFBQVE7d0JBQ2pDO3dCQUNBO29CQUNGO2dCQUNBLEtBQUs7b0JBQWdCO3dCQUNuQixJQUFJLENBQUNFLGNBQWMsQ0FBQ0ssTUFBTSxDQUFDYixhQUFhSSxPQUFPO3dCQUMvQztvQkFDRjtnQkFDQTtvQkFBUzt3QkFDUCxNQUFNVSxJQUFJZDt3QkFDVixNQUFNLElBQUlGLE1BQU0sd0JBQTBDLE9BQWxCRSxhQUFhRSxJQUFJO29CQUMzRDtZQUNGO1FBQ0Y7UUFDQSxJQUFJLENBQUNULE9BQU8sR0FBR0gsV0FBV3lCLFVBQVU7SUFDdEM7SUFDQUMscUJBQXFCO1FBQ25CLE9BQU8sSUFBSSxDQUFDUixjQUFjO0lBQzVCO0lBQ0FTLFlBQVk7UUFDVixPQUFPLElBQUksQ0FBQ3hCLE9BQU8sQ0FBQ0UsRUFBRTtJQUN4QjtJQTlEQXVCLFlBQVlmLFNBQVMsQ0FBRTtRQUNyQixJQUFJLENBQUNWLE9BQU8sR0FBRztZQUFFQyxVQUFVO1lBQUdDLElBQUlSLDBDQUFJQSxDQUFDZ0MsVUFBVSxDQUFDO1lBQUl0QixVQUFVO1FBQUU7UUFDbEUsSUFBSSxDQUFDVyxjQUFjLEdBQUcsYUFBYSxHQUFHLElBQUlZO1FBQzFDLElBQUksQ0FBQ2pCLFNBQVMsR0FBR0E7SUFDbkI7QUEyREYsRUFDQSw0Q0FBNEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2NvbnZleC9kaXN0L2VzbS9icm93c2VyL3N5bmMvcmVtb3RlX3F1ZXJ5X3NldC5qcz9hY2E1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuaW1wb3J0IHsganNvblRvQ29udmV4IH0gZnJvbSBcIi4uLy4uL3ZhbHVlcy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgTG9uZyB9IGZyb20gXCIuLi9sb25nLmpzXCI7XG5pbXBvcnQgeyBsb2dUb0NvbnNvbGUgfSBmcm9tIFwiLi4vbG9nZ2luZy5qc1wiO1xuZXhwb3J0IGNsYXNzIFJlbW90ZVF1ZXJ5U2V0IHtcbiAgY29uc3RydWN0b3IocXVlcnlQYXRoKSB7XG4gICAgdGhpcy52ZXJzaW9uID0geyBxdWVyeVNldDogMCwgdHM6IExvbmcuZnJvbU51bWJlcigwKSwgaWRlbnRpdHk6IDAgfTtcbiAgICB0aGlzLnJlbW90ZVF1ZXJ5U2V0ID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgICB0aGlzLnF1ZXJ5UGF0aCA9IHF1ZXJ5UGF0aDtcbiAgfVxuICB0cmFuc2l0aW9uKHRyYW5zaXRpb24pIHtcbiAgICBjb25zdCBzdGFydCA9IHRyYW5zaXRpb24uc3RhcnRWZXJzaW9uO1xuICAgIGlmICh0aGlzLnZlcnNpb24ucXVlcnlTZXQgIT09IHN0YXJ0LnF1ZXJ5U2V0IHx8IHRoaXMudmVyc2lvbi50cy5ub3RFcXVhbHMoc3RhcnQudHMpIHx8IHRoaXMudmVyc2lvbi5pZGVudGl0eSAhPT0gc3RhcnQuaWRlbnRpdHkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYEludmFsaWQgc3RhcnQgdmVyc2lvbjogJHtzdGFydC50cy50b1N0cmluZygpfToke3N0YXJ0LnF1ZXJ5U2V0fWBcbiAgICAgICk7XG4gICAgfVxuICAgIGZvciAoY29uc3QgbW9kaWZpY2F0aW9uIG9mIHRyYW5zaXRpb24ubW9kaWZpY2F0aW9ucykge1xuICAgICAgc3dpdGNoIChtb2RpZmljYXRpb24udHlwZSkge1xuICAgICAgICBjYXNlIFwiUXVlcnlVcGRhdGVkXCI6IHtcbiAgICAgICAgICBjb25zdCBxdWVyeVBhdGggPSB0aGlzLnF1ZXJ5UGF0aChtb2RpZmljYXRpb24ucXVlcnlJZCk7XG4gICAgICAgICAgaWYgKHF1ZXJ5UGF0aCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBsaW5lIG9mIG1vZGlmaWNhdGlvbi5sb2dMaW5lcykge1xuICAgICAgICAgICAgICBsb2dUb0NvbnNvbGUoXCJpbmZvXCIsIFwicXVlcnlcIiwgcXVlcnlQYXRoLCBsaW5lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgdmFsdWUgPSBqc29uVG9Db252ZXgobW9kaWZpY2F0aW9uLnZhbHVlID8/IG51bGwsIHRydWUpO1xuICAgICAgICAgIHRoaXMucmVtb3RlUXVlcnlTZXQuc2V0KG1vZGlmaWNhdGlvbi5xdWVyeUlkLCB7XG4gICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICBsb2dMaW5lczogbW9kaWZpY2F0aW9uLmxvZ0xpbmVzXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcIlF1ZXJ5RmFpbGVkXCI6IHtcbiAgICAgICAgICBjb25zdCBxdWVyeVBhdGggPSB0aGlzLnF1ZXJ5UGF0aChtb2RpZmljYXRpb24ucXVlcnlJZCk7XG4gICAgICAgICAgaWYgKHF1ZXJ5UGF0aCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBsaW5lIG9mIG1vZGlmaWNhdGlvbi5sb2dMaW5lcykge1xuICAgICAgICAgICAgICBsb2dUb0NvbnNvbGUoXCJpbmZvXCIsIFwicXVlcnlcIiwgcXVlcnlQYXRoLCBsaW5lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgeyBlcnJvckRhdGEgfSA9IG1vZGlmaWNhdGlvbjtcbiAgICAgICAgICB0aGlzLnJlbW90ZVF1ZXJ5U2V0LnNldChtb2RpZmljYXRpb24ucXVlcnlJZCwge1xuICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICBlcnJvck1lc3NhZ2U6IG1vZGlmaWNhdGlvbi5lcnJvck1lc3NhZ2UsXG4gICAgICAgICAgICBlcnJvckRhdGE6IGVycm9yRGF0YSAhPT0gdm9pZCAwID8ganNvblRvQ29udmV4KGVycm9yRGF0YSkgOiB2b2lkIDAsXG4gICAgICAgICAgICBsb2dMaW5lczogbW9kaWZpY2F0aW9uLmxvZ0xpbmVzXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcIlF1ZXJ5UmVtb3ZlZFwiOiB7XG4gICAgICAgICAgdGhpcy5yZW1vdGVRdWVyeVNldC5kZWxldGUobW9kaWZpY2F0aW9uLnF1ZXJ5SWQpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICBjb25zdCBfID0gbW9kaWZpY2F0aW9uO1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBtb2RpZmljYXRpb24gJHttb2RpZmljYXRpb24udHlwZX1gKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnZlcnNpb24gPSB0cmFuc2l0aW9uLmVuZFZlcnNpb247XG4gIH1cbiAgcmVtb3RlUXVlcnlSZXN1bHRzKCkge1xuICAgIHJldHVybiB0aGlzLnJlbW90ZVF1ZXJ5U2V0O1xuICB9XG4gIHRpbWVzdGFtcCgpIHtcbiAgICByZXR1cm4gdGhpcy52ZXJzaW9uLnRzO1xuICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZW1vdGVfcXVlcnlfc2V0LmpzLm1hcFxuIl0sIm5hbWVzIjpbImpzb25Ub0NvbnZleCIsIkxvbmciLCJsb2dUb0NvbnNvbGUiLCJSZW1vdGVRdWVyeVNldCIsInRyYW5zaXRpb24iLCJzdGFydCIsInN0YXJ0VmVyc2lvbiIsInZlcnNpb24iLCJxdWVyeVNldCIsInRzIiwibm90RXF1YWxzIiwiaWRlbnRpdHkiLCJFcnJvciIsInRvU3RyaW5nIiwibW9kaWZpY2F0aW9uIiwibW9kaWZpY2F0aW9ucyIsInR5cGUiLCJxdWVyeVBhdGgiLCJxdWVyeUlkIiwibGluZSIsImxvZ0xpbmVzIiwidmFsdWUiLCJyZW1vdGVRdWVyeVNldCIsInNldCIsInN1Y2Nlc3MiLCJlcnJvckRhdGEiLCJlcnJvck1lc3NhZ2UiLCJkZWxldGUiLCJfIiwiZW5kVmVyc2lvbiIsInJlbW90ZVF1ZXJ5UmVzdWx0cyIsInRpbWVzdGFtcCIsImNvbnN0cnVjdG9yIiwiZnJvbU51bWJlciIsIk1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/remote_query_set.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/request_manager.js":
/*!**********************************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/sync/request_manager.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RequestManager: function() { return /* binding */ RequestManager; }\n/* harmony export */ });\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../values/index.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/values/index.js\");\n/* harmony import */ var _logging_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../logging.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/browser/logging.js\");\n\n\n\nclass RequestManager {\n    request(message, sent) {\n        const result = new Promise((resolve)=>{\n            const status = sent ? \"Requested\" : \"NotSent\";\n            this.inflightRequests.set(message.requestId, {\n                message,\n                status: {\n                    status,\n                    requestedAt: /* @__PURE__ */ new Date(),\n                    onResult: resolve\n                }\n            });\n        });\n        return result;\n    }\n    /**\n   * Update the state after receiving a response.\n   *\n   * @returns A RequestId if the request is complete and its optimistic update\n   * can be dropped, null otherwise.\n   */ onResponse(response) {\n        const requestInfo = this.inflightRequests.get(response.requestId);\n        if (requestInfo === void 0) {\n            return null;\n        }\n        if (requestInfo.status.status === \"Completed\") {\n            return null;\n        }\n        const udfType = requestInfo.message.type === \"Mutation\" ? \"mutation\" : \"action\";\n        const udfPath = requestInfo.message.udfPath;\n        for (const line of response.logLines){\n            (0,_logging_js__WEBPACK_IMPORTED_MODULE_1__.logToConsole)(\"info\", udfType, udfPath, line);\n        }\n        const status = requestInfo.status;\n        let onResolve;\n        if (response.success) {\n            onResolve = ()=>status.onResult({\n                    success: true,\n                    logLines: response.logLines,\n                    value: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)(response.result, true)\n                });\n        } else {\n            const errorMessage = response.result;\n            const { errorData } = response;\n            (0,_logging_js__WEBPACK_IMPORTED_MODULE_1__.logToConsole)(\"error\", udfType, udfPath, errorMessage);\n            onResolve = ()=>status.onResult({\n                    success: false,\n                    errorMessage,\n                    errorData: errorData !== void 0 ? (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)(errorData) : void 0,\n                    logLines: response.logLines\n                });\n        }\n        if (response.type === \"ActionResponse\" || !response.success) {\n            onResolve();\n            this.inflightRequests.delete(response.requestId);\n            this.requestsOlderThanRestart.delete(response.requestId);\n            return response.requestId;\n        }\n        requestInfo.status = {\n            status: \"Completed\",\n            ts: response.ts,\n            onResolve\n        };\n        return null;\n    }\n    // Remove and returns completed requests.\n    removeCompleted(ts) {\n        const completeRequests = /* @__PURE__ */ new Set();\n        for (const [requestId, requestInfo] of this.inflightRequests.entries()){\n            const status = requestInfo.status;\n            if (status.status === \"Completed\" && status.ts.lessThanOrEqual(ts)) {\n                status.onResolve();\n                completeRequests.add(requestId);\n                this.inflightRequests.delete(requestId);\n                this.requestsOlderThanRestart.delete(requestId);\n            }\n        }\n        return completeRequests;\n    }\n    restart() {\n        this.requestsOlderThanRestart = new Set(this.inflightRequests.keys());\n        const allMessages = [];\n        for (const [requestId, value] of this.inflightRequests){\n            if (value.status.status === \"NotSent\") {\n                value.status.status = \"Requested\";\n                allMessages.push(value.message);\n                continue;\n            }\n            if (value.message.type === \"Mutation\") {\n                allMessages.push(value.message);\n            } else {\n                this.inflightRequests.delete(requestId);\n                this.requestsOlderThanRestart.delete(requestId);\n                if (value.status.status === \"Completed\") {\n                    throw new Error(\"Action should never be in 'Completed' state\");\n                }\n                value.status.onResult({\n                    success: false,\n                    errorMessage: \"Connection lost while action was in flight\",\n                    logLines: []\n                });\n            }\n        }\n        return allMessages;\n    }\n    /**\n   * @returns true if there are any requests that have been requested but have\n   * not be completed yet.\n   */ hasIncompleteRequests() {\n        for (const requestInfo of this.inflightRequests.values()){\n            if (requestInfo.status.status === \"Requested\") {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n   * @returns true if there are any inflight requests, including ones that have\n   * completed on the server, but have not been applied.\n   */ hasInflightRequests() {\n        return this.inflightRequests.size > 0;\n    }\n    /**\n   * @returns true if there are any inflight requests, that have been hanging around\n   * since prior to the most recent restart.\n   */ hasSyncedPastLastReconnect() {\n        return this.requestsOlderThanRestart.size === 0;\n    }\n    timeOfOldestInflightRequest() {\n        if (this.inflightRequests.size === 0) {\n            return null;\n        }\n        let oldestInflightRequest = Date.now();\n        for (const request of this.inflightRequests.values()){\n            if (request.status.status !== \"Completed\") {\n                if (request.status.requestedAt.getTime() < oldestInflightRequest) {\n                    oldestInflightRequest = request.status.requestedAt.getTime();\n                }\n            }\n        }\n        return new Date(oldestInflightRequest);\n    }\n    constructor(){\n        this.inflightRequests = /* @__PURE__ */ new Map();\n        this.requestsOlderThanRestart = /* @__PURE__ */ new Set();\n    }\n} //# sourceMappingURL=request_manager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/request_manager.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/session.js":
/*!**************************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/sync/session.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   newSessionId: function() { return /* binding */ newSessionId; }\n/* harmony export */ });\n\nfunction newSessionId() {\n    return uuidv4();\n}\nfunction uuidv4() {\n    return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c)=>{\n        const r = Math.random() * 16 | 0, v = c === \"x\" ? r : r & 3 | 8;\n        return v.toString(16);\n    });\n} //# sourceMappingURL=session.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vYnJvd3Nlci9zeW5jL3Nlc3Npb24uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFhO0FBQ04sU0FBU0E7SUFDZCxPQUFPQztBQUNUO0FBQ0EsU0FBU0E7SUFDUCxPQUFPLHVDQUF1Q0MsT0FBTyxDQUFDLFNBQVMsQ0FBQ0M7UUFDOUQsTUFBTUMsSUFBSUMsS0FBS0MsTUFBTSxLQUFLLEtBQUssR0FBR0MsSUFBSUosTUFBTSxNQUFNQyxJQUFJQSxJQUFJLElBQUk7UUFDOUQsT0FBT0csRUFBRUMsUUFBUSxDQUFDO0lBQ3BCO0FBQ0YsRUFDQSxtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2NvbnZleC9kaXN0L2VzbS9icm93c2VyL3N5bmMvc2Vzc2lvbi5qcz9lMTAyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuZXhwb3J0IGZ1bmN0aW9uIG5ld1Nlc3Npb25JZCgpIHtcbiAgcmV0dXJuIHV1aWR2NCgpO1xufVxuZnVuY3Rpb24gdXVpZHY0KCkge1xuICByZXR1cm4gXCJ4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHhcIi5yZXBsYWNlKC9beHldL2csIChjKSA9PiB7XG4gICAgY29uc3QgciA9IE1hdGgucmFuZG9tKCkgKiAxNiB8IDAsIHYgPSBjID09PSBcInhcIiA/IHIgOiByICYgMyB8IDg7XG4gICAgcmV0dXJuIHYudG9TdHJpbmcoMTYpO1xuICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlc3Npb24uanMubWFwXG4iXSwibmFtZXMiOlsibmV3U2Vzc2lvbklkIiwidXVpZHY0IiwicmVwbGFjZSIsImMiLCJyIiwiTWF0aCIsInJhbmRvbSIsInYiLCJ0b1N0cmluZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/session.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/udf_path_utils.js":
/*!*********************************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/sync/udf_path_utils.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   canonicalizeUdfPath: function() { return /* binding */ canonicalizeUdfPath; },\n/* harmony export */   serializePathAndArgs: function() { return /* binding */ serializePathAndArgs; }\n/* harmony export */ });\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../values/index.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/values/index.js\");\n\n\nfunction canonicalizeUdfPath(udfPath) {\n    const pieces = udfPath.split(\":\");\n    let moduleName;\n    let functionName;\n    if (pieces.length === 1) {\n        moduleName = pieces[0];\n        functionName = \"default\";\n    } else {\n        moduleName = pieces.slice(0, pieces.length - 1).join(\":\");\n        functionName = pieces[pieces.length - 1];\n    }\n    if (moduleName.endsWith(\".js\")) {\n        moduleName = moduleName.slice(0, -3);\n    }\n    return \"\".concat(moduleName, \":\").concat(functionName);\n}\nfunction serializePathAndArgs(udfPath, args) {\n    return JSON.stringify({\n        udfPath: canonicalizeUdfPath(udfPath),\n        args: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(args)\n    });\n} //# sourceMappingURL=udf_path_utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vYnJvd3Nlci9zeW5jL3VkZl9wYXRoX3V0aWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFhO0FBQ3dDO0FBQzlDLFNBQVNDLG9CQUFvQkMsT0FBTztJQUN6QyxNQUFNQyxTQUFTRCxRQUFRRSxLQUFLLENBQUM7SUFDN0IsSUFBSUM7SUFDSixJQUFJQztJQUNKLElBQUlILE9BQU9JLE1BQU0sS0FBSyxHQUFHO1FBQ3ZCRixhQUFhRixNQUFNLENBQUMsRUFBRTtRQUN0QkcsZUFBZTtJQUNqQixPQUFPO1FBQ0xELGFBQWFGLE9BQU9LLEtBQUssQ0FBQyxHQUFHTCxPQUFPSSxNQUFNLEdBQUcsR0FBR0UsSUFBSSxDQUFDO1FBQ3JESCxlQUFlSCxNQUFNLENBQUNBLE9BQU9JLE1BQU0sR0FBRyxFQUFFO0lBQzFDO0lBQ0EsSUFBSUYsV0FBV0ssUUFBUSxDQUFDLFFBQVE7UUFDOUJMLGFBQWFBLFdBQVdHLEtBQUssQ0FBQyxHQUFHLENBQUM7SUFDcEM7SUFDQSxPQUFPLEdBQWlCRixPQUFkRCxZQUFXLEtBQWdCLE9BQWJDO0FBQzFCO0FBQ08sU0FBU0sscUJBQXFCVCxPQUFPLEVBQUVVLElBQUk7SUFDaEQsT0FBT0MsS0FBS0MsU0FBUyxDQUFDO1FBQ3BCWixTQUFTRCxvQkFBb0JDO1FBQzdCVSxNQUFNWiw4REFBWUEsQ0FBQ1k7SUFDckI7QUFDRixFQUNBLDBDQUEwQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL2Jyb3dzZXIvc3luYy91ZGZfcGF0aF91dGlscy5qcz8wNWEyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuaW1wb3J0IHsgY29udmV4VG9Kc29uIH0gZnJvbSBcIi4uLy4uL3ZhbHVlcy9pbmRleC5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIGNhbm9uaWNhbGl6ZVVkZlBhdGgodWRmUGF0aCkge1xuICBjb25zdCBwaWVjZXMgPSB1ZGZQYXRoLnNwbGl0KFwiOlwiKTtcbiAgbGV0IG1vZHVsZU5hbWU7XG4gIGxldCBmdW5jdGlvbk5hbWU7XG4gIGlmIChwaWVjZXMubGVuZ3RoID09PSAxKSB7XG4gICAgbW9kdWxlTmFtZSA9IHBpZWNlc1swXTtcbiAgICBmdW5jdGlvbk5hbWUgPSBcImRlZmF1bHRcIjtcbiAgfSBlbHNlIHtcbiAgICBtb2R1bGVOYW1lID0gcGllY2VzLnNsaWNlKDAsIHBpZWNlcy5sZW5ndGggLSAxKS5qb2luKFwiOlwiKTtcbiAgICBmdW5jdGlvbk5hbWUgPSBwaWVjZXNbcGllY2VzLmxlbmd0aCAtIDFdO1xuICB9XG4gIGlmIChtb2R1bGVOYW1lLmVuZHNXaXRoKFwiLmpzXCIpKSB7XG4gICAgbW9kdWxlTmFtZSA9IG1vZHVsZU5hbWUuc2xpY2UoMCwgLTMpO1xuICB9XG4gIHJldHVybiBgJHttb2R1bGVOYW1lfToke2Z1bmN0aW9uTmFtZX1gO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNlcmlhbGl6ZVBhdGhBbmRBcmdzKHVkZlBhdGgsIGFyZ3MpIHtcbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHtcbiAgICB1ZGZQYXRoOiBjYW5vbmljYWxpemVVZGZQYXRoKHVkZlBhdGgpLFxuICAgIGFyZ3M6IGNvbnZleFRvSnNvbihhcmdzKVxuICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVkZl9wYXRoX3V0aWxzLmpzLm1hcFxuIl0sIm5hbWVzIjpbImNvbnZleFRvSnNvbiIsImNhbm9uaWNhbGl6ZVVkZlBhdGgiLCJ1ZGZQYXRoIiwicGllY2VzIiwic3BsaXQiLCJtb2R1bGVOYW1lIiwiZnVuY3Rpb25OYW1lIiwibGVuZ3RoIiwic2xpY2UiLCJqb2luIiwiZW5kc1dpdGgiLCJzZXJpYWxpemVQYXRoQW5kQXJncyIsImFyZ3MiLCJKU09OIiwic3RyaW5naWZ5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/udf_path_utils.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/web_socket_manager.js":
/*!*************************************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/sync/web_socket_manager.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WebSocketManager: function() { return /* binding */ WebSocketManager; }\n/* harmony export */ });\n/* harmony import */ var _protocol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./protocol.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/protocol.js\");\n\n\nconst CLOSE_NORMAL = 1e3;\nconst CLOSE_GOING_AWAY = 1001;\nconst CLOSE_NO_STATUS = 1005;\nconst CLOSE_NOT_FOUND = 4040;\nclass WebSocketManager {\n    connect() {\n        if (this.socket.state === \"stopped\") {\n            return;\n        }\n        if (this.socket.state !== \"disconnected\" && this.socket.state !== \"paused\") {\n            throw new Error(\"Didn't start connection from disconnected state: \" + this.socket.state);\n        }\n        const ws = new this.webSocketConstructor(this.uri);\n        this._logVerbose(\"constructed WebSocket\");\n        this.socket = {\n            state: \"connecting\",\n            ws\n        };\n        this.resetServerInactivityTimeout();\n        ws.onopen = ()=>{\n            this._logVerbose(\"begin ws.onopen\");\n            if (this.socket.state !== \"connecting\") {\n                throw new Error(\"onopen called with socket not in connecting state\");\n            }\n            this.socket = {\n                state: \"ready\",\n                ws\n            };\n            this.resetServerInactivityTimeout();\n            this.onOpen({\n                connectionCount: this.connectionCount,\n                lastCloseReason: this.lastCloseReason\n            });\n            if (this.lastCloseReason !== \"InitialConnect\") {\n                console.log(\"WebSocket reconnected\");\n            }\n            this.connectionCount += 1;\n            this.lastCloseReason = null;\n        };\n        ws.onerror = (error)=>{\n            const message = error.message;\n            console.log(\"WebSocket error: \".concat(message));\n        };\n        ws.onmessage = (message)=>{\n            this.resetServerInactivityTimeout();\n            const serverMessage = (0,_protocol_js__WEBPACK_IMPORTED_MODULE_0__.parseServerMessage)(JSON.parse(message.data));\n            this._logVerbose(\"received ws message with type \".concat(serverMessage.type));\n            const response = this.onMessage(serverMessage);\n            if (response.hasSyncedPastLastReconnect) {\n                this.retries = 0;\n            }\n        };\n        ws.onclose = (event)=>{\n            this._logVerbose(\"begin ws.onclose\");\n            if (this.lastCloseReason === null) {\n                var _event_reason;\n                this.lastCloseReason = (_event_reason = event.reason) !== null && _event_reason !== void 0 ? _event_reason : \"OnCloseInvoked\";\n            }\n            if (event.code !== CLOSE_NORMAL && event.code !== CLOSE_GOING_AWAY && // This commonly gets fired on mobile apps when the app is backgrounded\n            event.code !== CLOSE_NO_STATUS && event.code !== CLOSE_NOT_FOUND) {\n                let msg = \"WebSocket closed with code \".concat(event.code);\n                if (event.reason) {\n                    msg += \": \".concat(event.reason);\n                }\n                console.log(msg);\n            }\n            this.scheduleReconnect();\n            return;\n        };\n    }\n    /**\n   * @returns The state of the {@link Socket}.\n   */ socketState() {\n        return this.socket.state;\n    }\n    /**\n   * @param message - A ClientMessage to send.\n   * @returns Whether the message (might have been) sent.\n   */ sendMessage(message) {\n        this._logVerbose(\"sending message with type \".concat(message.type));\n        if (this.socket.state === \"ready\") {\n            const encodedMessage = (0,_protocol_js__WEBPACK_IMPORTED_MODULE_0__.encodeClientMessage)(message);\n            const request = JSON.stringify(encodedMessage);\n            try {\n                this.socket.ws.send(request);\n            } catch (error) {\n                console.log(\"Failed to send message on WebSocket, reconnecting: \".concat(error));\n                this.closeAndReconnect(\"FailedToSendMessage\");\n            }\n            return true;\n        }\n        return false;\n    }\n    resetServerInactivityTimeout() {\n        if (this.socket.state !== \"stopped\") {\n            return;\n        }\n        if (this.reconnectDueToServerInactivityTimeout !== null) {\n            clearTimeout(this.reconnectDueToServerInactivityTimeout);\n            this.reconnectDueToServerInactivityTimeout = null;\n        }\n        this.reconnectDueToServerInactivityTimeout = setTimeout(()=>{\n            this.closeAndReconnect(\"InactiveServer\");\n        }, this.serverInactivityThreshold);\n    }\n    scheduleReconnect() {\n        this.socket = {\n            state: \"disconnected\"\n        };\n        const backoff = this.nextBackoff();\n        console.log(\"Attempting reconnect in \".concat(backoff, \"ms\"));\n        setTimeout(()=>this.connect(), backoff);\n    }\n    /**\n   * Close the WebSocket and schedule a reconnect.\n   *\n   * This should be used when we hit an error and would like to restart the session.\n   */ closeAndReconnect(closeReason) {\n        this._logVerbose(\"begin closeAndReconnect with reason \".concat(closeReason));\n        switch(this.socket.state){\n            case \"disconnected\":\n            case \"stopped\":\n            case \"paused\":\n                return;\n            case \"connecting\":\n            case \"ready\":\n                {\n                    this.lastCloseReason = closeReason;\n                    this.close();\n                    this.scheduleReconnect();\n                    return;\n                }\n            default:\n                {\n                    const _ = this.socket;\n                }\n        }\n    }\n    /**\n   * Close the WebSocket, being careful to clear the onclose handler to avoid re-entrant\n   * calls. Use this instead of directly calling `ws.close()`\n   */ close() {\n        switch(this.socket.state){\n            case \"disconnected\":\n            case \"stopped\":\n            case \"paused\":\n                return;\n            case \"connecting\":\n            case \"ready\":\n                {\n                    this.socket.ws.onclose = ()=>{};\n                    this._logVerbose(\"ws.close called\");\n                    this.socket.ws.close();\n                    return;\n                }\n            default:\n                {\n                    const _ = this.socket;\n                }\n        }\n    }\n    /**\n   * Close the WebSocket and do not reconnect.\n   * @returns A Promise that resolves when the WebSocket `onClose` callback is called.\n   */ stop() {\n        if (this.reconnectDueToServerInactivityTimeout) {\n            clearTimeout(this.reconnectDueToServerInactivityTimeout);\n        }\n        switch(this.socket.state){\n            case \"stopped\":\n            case \"paused\":\n            case \"disconnected\":\n            case \"connecting\":\n            case \"ready\":\n                this.close();\n                if (this.socket.state === \"ready\" || this.socket.state === \"connecting\") {\n                    const ws = this.socket.ws;\n                    this.socket = {\n                        state: \"stopped\"\n                    };\n                    return new Promise((r)=>{\n                        ws.onclose = (_event)=>r();\n                    });\n                }\n                this.socket = {\n                    state: \"stopped\"\n                };\n                return Promise.resolve();\n            default:\n                {\n                    const _ = this.socket;\n                    throw new Error(\"Invalid websocket state: \".concat(this.socket.state));\n                }\n        }\n    }\n    pause() {\n        switch(this.socket.state){\n            case \"stopped\":\n                return;\n            case \"paused\":\n            case \"disconnected\":\n            case \"connecting\":\n            case \"ready\":\n                this.close();\n                this.socket = {\n                    state: \"paused\"\n                };\n                return;\n            default:\n                {\n                    const _ = this.socket;\n                }\n        }\n    }\n    /**\n   * Create a new WebSocket after a previous `pause()`, unless `stop()` was\n   * called before.\n   */ resume() {\n        switch(this.socket.state){\n            case \"paused\":\n                break;\n            case \"stopped\":\n                return;\n            case \"connecting\":\n            case \"ready\":\n            case \"disconnected\":\n                throw new Error(\"`resume()` is only valid after `pause()`\");\n            default:\n                {\n                    const _ = this.socket;\n                }\n        }\n        this.connect();\n    }\n    _logVerbose(message) {\n        if (this.verbose) {\n            console.debug(\"\".concat(/* @__PURE__ */ new Date().toISOString(), \" \").concat(message));\n        }\n    }\n    nextBackoff() {\n        const baseBackoff = this.initialBackoff * Math.pow(2, this.retries);\n        this.retries += 1;\n        const actualBackoff = Math.min(baseBackoff, this.maxBackoff);\n        const jitter = actualBackoff * (Math.random() - 0.5);\n        return actualBackoff + jitter;\n    }\n    constructor(uri, onOpen, onMessage, webSocketConstructor, verbose){\n        this.webSocketConstructor = webSocketConstructor;\n        this.socket = {\n            state: \"disconnected\"\n        };\n        this.connectionCount = 0;\n        this.lastCloseReason = \"InitialConnect\";\n        this.initialBackoff = 100;\n        this.maxBackoff = 16e3;\n        this.retries = 0;\n        this.serverInactivityThreshold = 3e4;\n        this.reconnectDueToServerInactivityTimeout = null;\n        this.uri = uri;\n        this.onOpen = onOpen;\n        this.onMessage = onMessage;\n        this.verbose = verbose;\n        void this.connect();\n    }\n} //# sourceMappingURL=web_socket_manager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/web_socket_manager.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/common/index.js":
/*!******************************************************!*\
  !*** ./node_modules/convex/dist/esm/common/index.js ***!
  \******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isSimpleObject: function() { return /* binding */ isSimpleObject; },\n/* harmony export */   parseArgs: function() { return /* binding */ parseArgs; },\n/* harmony export */   validateDeploymentUrl: function() { return /* binding */ validateDeploymentUrl; }\n/* harmony export */ });\n\nfunction parseArgs(args) {\n    if (args === void 0) {\n        return {};\n    }\n    if (!isSimpleObject(args)) {\n        throw new Error(\"The arguments to a Convex function must be an object. Received: \".concat(args));\n    }\n    return args;\n}\nfunction validateDeploymentUrl(deploymentUrl) {\n    if (typeof deploymentUrl === \"undefined\") {\n        throw new Error(\"Client created with undefined deployment address. If you used an environment variable, check that it's set.\");\n    }\n    if (typeof deploymentUrl !== \"string\") {\n        throw new Error(\"Invalid deployment address: found \".concat(deploymentUrl, '\".'));\n    }\n    if (!(deploymentUrl.startsWith(\"http:\") || deploymentUrl.startsWith(\"https:\"))) {\n        throw new Error('Invalid deployment address: Must start with \"https://\" or \"http://\". Found \"'.concat(deploymentUrl, '\".'));\n    }\n    if (deploymentUrl.indexOf(\"127.0.0.1\") !== -1 || deploymentUrl.indexOf(\"localhost\") !== -1) {\n        return;\n    }\n    if (!deploymentUrl.endsWith(\".convex.cloud\")) {\n        throw new Error('Invalid deployment address: Must end with \".convex.cloud\". Found \"'.concat(deploymentUrl, '\".'));\n    }\n}\nfunction isSimpleObject(value) {\n    var // Objects generated from other contexts (e.g. across Node.js `vm` modules) will not satisfy the previous\n    // conditions but are still simple objects.\n    _prototype_constructor;\n    const isObject = typeof value === \"object\";\n    const prototype = Object.getPrototypeOf(value);\n    const isSimple = prototype === null || prototype === Object.prototype || (prototype === null || prototype === void 0 ? void 0 : (_prototype_constructor = prototype.constructor) === null || _prototype_constructor === void 0 ? void 0 : _prototype_constructor.name) === \"Object\";\n    return isObject && isSimple;\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vY29tbW9uL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFhO0FBQ04sU0FBU0EsVUFBVUMsSUFBSTtJQUM1QixJQUFJQSxTQUFTLEtBQUssR0FBRztRQUNuQixPQUFPLENBQUM7SUFDVjtJQUNBLElBQUksQ0FBQ0MsZUFBZUQsT0FBTztRQUN6QixNQUFNLElBQUlFLE1BQ1IsbUVBQXdFLE9BQUxGO0lBRXZFO0lBQ0EsT0FBT0E7QUFDVDtBQUNPLFNBQVNHLHNCQUFzQkMsYUFBYTtJQUNqRCxJQUFJLE9BQU9BLGtCQUFrQixhQUFhO1FBQ3hDLE1BQU0sSUFBSUYsTUFDUDtJQUVMO0lBQ0EsSUFBSSxPQUFPRSxrQkFBa0IsVUFBVTtRQUNyQyxNQUFNLElBQUlGLE1BQ1IscUNBQW1ELE9BQWRFLGVBQWM7SUFFdkQ7SUFDQSxJQUFJLENBQUVBLENBQUFBLGNBQWNDLFVBQVUsQ0FBQyxZQUFZRCxjQUFjQyxVQUFVLENBQUMsU0FBUSxHQUFJO1FBQzlFLE1BQU0sSUFBSUgsTUFDUiwrRUFBNkYsT0FBZEUsZUFBYztJQUVqRztJQUNBLElBQUlBLGNBQWNFLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLRixjQUFjRSxPQUFPLENBQUMsaUJBQWlCLENBQUMsR0FBRztRQUMxRjtJQUNGO0lBQ0EsSUFBSSxDQUFDRixjQUFjRyxRQUFRLENBQUMsa0JBQWtCO1FBQzVDLE1BQU0sSUFBSUwsTUFDUixxRUFBbUYsT0FBZEUsZUFBYztJQUV2RjtBQUNGO0FBQ08sU0FBU0gsZUFBZU8sS0FBSztRQUd1Qyx5R0FBeUc7SUFDbEwsMkNBQTJDO0lBQzNDQztJQUpBLE1BQU1DLFdBQVcsT0FBT0YsVUFBVTtJQUNsQyxNQUFNQyxZQUFZRSxPQUFPQyxjQUFjLENBQUNKO0lBQ3hDLE1BQU1LLFdBQVdKLGNBQWMsUUFBUUEsY0FBY0UsT0FBT0YsU0FBUyxJQUVyRUEsQ0FBQUEsc0JBQUFBLGlDQUFBQSx5QkFBQUEsVUFBV0ssV0FBVyxjQUF0QkwsNkNBQUFBLHVCQUF3Qk0sSUFBSSxNQUFLO0lBQ2pDLE9BQU9MLFlBQVlHO0FBQ3JCLEVBQ0EsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vY29tbW9uL2luZGV4LmpzP2IzMWQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VBcmdzKGFyZ3MpIHtcbiAgaWYgKGFyZ3MgPT09IHZvaWQgMCkge1xuICAgIHJldHVybiB7fTtcbiAgfVxuICBpZiAoIWlzU2ltcGxlT2JqZWN0KGFyZ3MpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYFRoZSBhcmd1bWVudHMgdG8gYSBDb252ZXggZnVuY3Rpb24gbXVzdCBiZSBhbiBvYmplY3QuIFJlY2VpdmVkOiAke2FyZ3N9YFxuICAgICk7XG4gIH1cbiAgcmV0dXJuIGFyZ3M7XG59XG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVEZXBsb3ltZW50VXJsKGRlcGxveW1lbnRVcmwpIHtcbiAgaWYgKHR5cGVvZiBkZXBsb3ltZW50VXJsID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYENsaWVudCBjcmVhdGVkIHdpdGggdW5kZWZpbmVkIGRlcGxveW1lbnQgYWRkcmVzcy4gSWYgeW91IHVzZWQgYW4gZW52aXJvbm1lbnQgdmFyaWFibGUsIGNoZWNrIHRoYXQgaXQncyBzZXQuYFxuICAgICk7XG4gIH1cbiAgaWYgKHR5cGVvZiBkZXBsb3ltZW50VXJsICE9PSBcInN0cmluZ1wiKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYEludmFsaWQgZGVwbG95bWVudCBhZGRyZXNzOiBmb3VuZCAke2RlcGxveW1lbnRVcmx9XCIuYFxuICAgICk7XG4gIH1cbiAgaWYgKCEoZGVwbG95bWVudFVybC5zdGFydHNXaXRoKFwiaHR0cDpcIikgfHwgZGVwbG95bWVudFVybC5zdGFydHNXaXRoKFwiaHR0cHM6XCIpKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBJbnZhbGlkIGRlcGxveW1lbnQgYWRkcmVzczogTXVzdCBzdGFydCB3aXRoIFwiaHR0cHM6Ly9cIiBvciBcImh0dHA6Ly9cIi4gRm91bmQgXCIke2RlcGxveW1lbnRVcmx9XCIuYFxuICAgICk7XG4gIH1cbiAgaWYgKGRlcGxveW1lbnRVcmwuaW5kZXhPZihcIjEyNy4wLjAuMVwiKSAhPT0gLTEgfHwgZGVwbG95bWVudFVybC5pbmRleE9mKFwibG9jYWxob3N0XCIpICE9PSAtMSkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoIWRlcGxveW1lbnRVcmwuZW5kc1dpdGgoXCIuY29udmV4LmNsb3VkXCIpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYEludmFsaWQgZGVwbG95bWVudCBhZGRyZXNzOiBNdXN0IGVuZCB3aXRoIFwiLmNvbnZleC5jbG91ZFwiLiBGb3VuZCBcIiR7ZGVwbG95bWVudFVybH1cIi5gXG4gICAgKTtcbiAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGlzU2ltcGxlT2JqZWN0KHZhbHVlKSB7XG4gIGNvbnN0IGlzT2JqZWN0ID0gdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiO1xuICBjb25zdCBwcm90b3R5cGUgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsdWUpO1xuICBjb25zdCBpc1NpbXBsZSA9IHByb3RvdHlwZSA9PT0gbnVsbCB8fCBwcm90b3R5cGUgPT09IE9iamVjdC5wcm90b3R5cGUgfHwgLy8gT2JqZWN0cyBnZW5lcmF0ZWQgZnJvbSBvdGhlciBjb250ZXh0cyAoZS5nLiBhY3Jvc3MgTm9kZS5qcyBgdm1gIG1vZHVsZXMpIHdpbGwgbm90IHNhdGlzZnkgdGhlIHByZXZpb3VzXG4gIC8vIGNvbmRpdGlvbnMgYnV0IGFyZSBzdGlsbCBzaW1wbGUgb2JqZWN0cy5cbiAgcHJvdG90eXBlPy5jb25zdHJ1Y3Rvcj8ubmFtZSA9PT0gXCJPYmplY3RcIjtcbiAgcmV0dXJuIGlzT2JqZWN0ICYmIGlzU2ltcGxlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOlsicGFyc2VBcmdzIiwiYXJncyIsImlzU2ltcGxlT2JqZWN0IiwiRXJyb3IiLCJ2YWxpZGF0ZURlcGxveW1lbnRVcmwiLCJkZXBsb3ltZW50VXJsIiwic3RhcnRzV2l0aCIsImluZGV4T2YiLCJlbmRzV2l0aCIsInZhbHVlIiwicHJvdG90eXBlIiwiaXNPYmplY3QiLCJPYmplY3QiLCJnZXRQcm90b3R5cGVPZiIsImlzU2ltcGxlIiwiY29uc3RydWN0b3IiLCJuYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/common/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/index.js":
/*!***********************************************!*\
  !*** ./node_modules/convex/dist/esm/index.js ***!
  \***********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: function() { return /* binding */ version; }\n/* harmony export */ });\n\nconst version = \"1.9.0\"; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFhO0FBQ04sTUFBTUEsVUFBVSxRQUFRLENBQy9CLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL2luZGV4LmpzP2RhODQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5leHBvcnQgY29uc3QgdmVyc2lvbiA9IFwiMS45LjBcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbInZlcnNpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/react/ConvexAuthState.js":
/*!***************************************************************!*\
  !*** ./node_modules/convex/dist/esm/react/ConvexAuthState.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConvexProviderWithAuth: function() { return /* binding */ ConvexProviderWithAuth; },\n/* harmony export */   useConvexAuth: function() { return /* binding */ useConvexAuth; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var _client_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./client.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/react/client.js\");\nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\"use strict\";\n\n\nconst ConvexAuthContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(void 0);\nfunction useConvexAuth() {\n    _s();\n    const authContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ConvexAuthContext);\n    if (authContext === void 0) {\n        throw new Error(\"Could not find `ConvexProviderWithAuth` (or `ConvexProviderWithClerk` or `ConvexProviderWithAuth0`) as an ancestor component. This component may be missing, or you might have two instances of the `convex/react` module loaded in your project.\");\n    }\n    return authContext;\n}\n_s(useConvexAuth, \"g0q6N3HTsGa67OokMUhTOzE2a0M=\");\nfunction ConvexProviderWithAuth(param) {\n    let { children, client, useAuth } = param;\n    _s1();\n    const { isLoading, isAuthenticated, fetchAccessToken } = useAuth();\n    const [isConvexAuthenticated, setIsConvexAuthenticated] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let isThisEffectRelevant = true;\n        async function setToken() {\n            client.setAuth(fetchAccessToken, (isAuthenticated2)=>{\n                if (isThisEffectRelevant) {\n                    setIsConvexAuthenticated(isAuthenticated2);\n                }\n            });\n        }\n        if (isAuthenticated) {\n            void setToken();\n            return ()=>{\n                isThisEffectRelevant = false;\n                setIsConvexAuthenticated((isConvexAuthenticated2)=>isConvexAuthenticated2 ? false : null);\n                client.clearAuth();\n            };\n        }\n    }, [\n        isAuthenticated,\n        fetchAccessToken,\n        isLoading,\n        client\n    ]);\n    if (isLoading && isConvexAuthenticated !== null) {\n        setIsConvexAuthenticated(null);\n    }\n    if (!isLoading && !isAuthenticated && isConvexAuthenticated !== false) {\n        setIsConvexAuthenticated(false);\n    }\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ConvexAuthContext.Provider, {\n        value: {\n            isLoading: isConvexAuthenticated === null,\n            isAuthenticated: isAuthenticated && (isConvexAuthenticated !== null && isConvexAuthenticated !== void 0 ? isConvexAuthenticated : false)\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_client_js__WEBPACK_IMPORTED_MODULE_1__.ConvexProvider, {\n        client\n    }, children));\n} //# sourceMappingURL=ConvexAuthState.js.map\n_s1(ConvexProviderWithAuth, \"jQ3+MBQZwvmAXyubuod//ijQABA=\", true);\n_c = ConvexProviderWithAuth;\nvar _c;\n$RefreshReg$(_c, \"ConvexProviderWithAuth\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vcmVhY3QvQ29udmV4QXV0aFN0YXRlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFNZTtBQUM4QjtBQUM3QyxNQUFNTSxrQ0FBb0JMLG9EQUFhQSxDQUFDLEtBQUs7QUFDdEMsU0FBU007O0lBQ2QsTUFBTUMsY0FBY04saURBQVVBLENBQUNJO0lBQy9CLElBQUlFLGdCQUFnQixLQUFLLEdBQUc7UUFDMUIsTUFBTSxJQUFJQyxNQUNSO0lBRUo7SUFDQSxPQUFPRDtBQUNUO0dBUmdCRDtBQVNULFNBQVNHLHVCQUF1QixLQUl0QztRQUpzQyxFQUNyQ0MsUUFBUSxFQUNSQyxNQUFNLEVBQ05DLE9BQU8sRUFDUixHQUpzQzs7SUFLckMsTUFBTSxFQUFFQyxTQUFTLEVBQUVDLGVBQWUsRUFBRUMsZ0JBQWdCLEVBQUUsR0FBR0g7SUFDekQsTUFBTSxDQUFDSSx1QkFBdUJDLHlCQUF5QixHQUFHZCwrQ0FBUUEsQ0FBQztJQUNuRUQsZ0RBQVNBLENBQUM7UUFDUixJQUFJZ0IsdUJBQXVCO1FBQzNCLGVBQWVDO1lBQ2JSLE9BQU9TLE9BQU8sQ0FBQ0wsa0JBQWtCLENBQUNNO2dCQUNoQyxJQUFJSCxzQkFBc0I7b0JBQ3hCRCx5QkFBeUJJO2dCQUMzQjtZQUNGO1FBQ0Y7UUFDQSxJQUFJUCxpQkFBaUI7WUFDbkIsS0FBS0s7WUFDTCxPQUFPO2dCQUNMRCx1QkFBdUI7Z0JBQ3ZCRCx5QkFDRSxDQUFDSyx5QkFBMkJBLHlCQUF5QixRQUFRO2dCQUUvRFgsT0FBT1ksU0FBUztZQUNsQjtRQUNGO0lBQ0YsR0FBRztRQUFDVDtRQUFpQkM7UUFBa0JGO1FBQVdGO0tBQU87SUFDekQsSUFBSUUsYUFBYUcsMEJBQTBCLE1BQU07UUFDL0NDLHlCQUF5QjtJQUMzQjtJQUNBLElBQUksQ0FBQ0osYUFBYSxDQUFDQyxtQkFBbUJFLDBCQUEwQixPQUFPO1FBQ3JFQyx5QkFBeUI7SUFDM0I7SUFDQSxPQUFPLGFBQWEsaUJBQUdsQixnREFBbUIsQ0FDeENNLGtCQUFrQm9CLFFBQVEsRUFDMUI7UUFDRUMsT0FBTztZQUNMYixXQUFXRywwQkFBMEI7WUFDckNGLGlCQUFpQkEsbUJBQW9CRSxDQUFBQSxrQ0FBQUEsbUNBQUFBLHdCQUF5QixLQUFJO1FBQ3BFO0lBQ0YsR0FDQSxhQUFhLGlCQUFHakIsZ0RBQW1CLENBQUNLLHNEQUFjQSxFQUFFO1FBQUVPO0lBQU8sR0FBR0Q7QUFFcEUsRUFDQSwyQ0FBMkM7SUE1QzNCRDtLQUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3JlYWN0L0NvbnZleEF1dGhTdGF0ZS5qcz9jYWE0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuaW1wb3J0IFJlYWN0LCB7XG4gIGNyZWF0ZUNvbnRleHQsXG4gIHVzZUNvbnRleHQsXG4gIHVzZUVmZmVjdCxcbiAgdXNlU3RhdGVcbn0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBDb252ZXhQcm92aWRlciB9IGZyb20gXCIuL2NsaWVudC5qc1wiO1xuY29uc3QgQ29udmV4QXV0aENvbnRleHQgPSBjcmVhdGVDb250ZXh0KHZvaWQgMCk7XG5leHBvcnQgZnVuY3Rpb24gdXNlQ29udmV4QXV0aCgpIHtcbiAgY29uc3QgYXV0aENvbnRleHQgPSB1c2VDb250ZXh0KENvbnZleEF1dGhDb250ZXh0KTtcbiAgaWYgKGF1dGhDb250ZXh0ID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBcIkNvdWxkIG5vdCBmaW5kIGBDb252ZXhQcm92aWRlcldpdGhBdXRoYCAob3IgYENvbnZleFByb3ZpZGVyV2l0aENsZXJrYCBvciBgQ29udmV4UHJvdmlkZXJXaXRoQXV0aDBgKSBhcyBhbiBhbmNlc3RvciBjb21wb25lbnQuIFRoaXMgY29tcG9uZW50IG1heSBiZSBtaXNzaW5nLCBvciB5b3UgbWlnaHQgaGF2ZSB0d28gaW5zdGFuY2VzIG9mIHRoZSBgY29udmV4L3JlYWN0YCBtb2R1bGUgbG9hZGVkIGluIHlvdXIgcHJvamVjdC5cIlxuICAgICk7XG4gIH1cbiAgcmV0dXJuIGF1dGhDb250ZXh0O1xufVxuZXhwb3J0IGZ1bmN0aW9uIENvbnZleFByb3ZpZGVyV2l0aEF1dGgoe1xuICBjaGlsZHJlbixcbiAgY2xpZW50LFxuICB1c2VBdXRoXG59KSB7XG4gIGNvbnN0IHsgaXNMb2FkaW5nLCBpc0F1dGhlbnRpY2F0ZWQsIGZldGNoQWNjZXNzVG9rZW4gfSA9IHVzZUF1dGgoKTtcbiAgY29uc3QgW2lzQ29udmV4QXV0aGVudGljYXRlZCwgc2V0SXNDb252ZXhBdXRoZW50aWNhdGVkXSA9IHVzZVN0YXRlKG51bGwpO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGxldCBpc1RoaXNFZmZlY3RSZWxldmFudCA9IHRydWU7XG4gICAgYXN5bmMgZnVuY3Rpb24gc2V0VG9rZW4oKSB7XG4gICAgICBjbGllbnQuc2V0QXV0aChmZXRjaEFjY2Vzc1Rva2VuLCAoaXNBdXRoZW50aWNhdGVkMikgPT4ge1xuICAgICAgICBpZiAoaXNUaGlzRWZmZWN0UmVsZXZhbnQpIHtcbiAgICAgICAgICBzZXRJc0NvbnZleEF1dGhlbnRpY2F0ZWQoaXNBdXRoZW50aWNhdGVkMik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaXNBdXRoZW50aWNhdGVkKSB7XG4gICAgICB2b2lkIHNldFRva2VuKCk7XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBpc1RoaXNFZmZlY3RSZWxldmFudCA9IGZhbHNlO1xuICAgICAgICBzZXRJc0NvbnZleEF1dGhlbnRpY2F0ZWQoXG4gICAgICAgICAgKGlzQ29udmV4QXV0aGVudGljYXRlZDIpID0+IGlzQ29udmV4QXV0aGVudGljYXRlZDIgPyBmYWxzZSA6IG51bGxcbiAgICAgICAgKTtcbiAgICAgICAgY2xpZW50LmNsZWFyQXV0aCgpO1xuICAgICAgfTtcbiAgICB9XG4gIH0sIFtpc0F1dGhlbnRpY2F0ZWQsIGZldGNoQWNjZXNzVG9rZW4sIGlzTG9hZGluZywgY2xpZW50XSk7XG4gIGlmIChpc0xvYWRpbmcgJiYgaXNDb252ZXhBdXRoZW50aWNhdGVkICE9PSBudWxsKSB7XG4gICAgc2V0SXNDb252ZXhBdXRoZW50aWNhdGVkKG51bGwpO1xuICB9XG4gIGlmICghaXNMb2FkaW5nICYmICFpc0F1dGhlbnRpY2F0ZWQgJiYgaXNDb252ZXhBdXRoZW50aWNhdGVkICE9PSBmYWxzZSkge1xuICAgIHNldElzQ29udmV4QXV0aGVudGljYXRlZChmYWxzZSk7XG4gIH1cbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgIENvbnZleEF1dGhDb250ZXh0LlByb3ZpZGVyLFxuICAgIHtcbiAgICAgIHZhbHVlOiB7XG4gICAgICAgIGlzTG9hZGluZzogaXNDb252ZXhBdXRoZW50aWNhdGVkID09PSBudWxsLFxuICAgICAgICBpc0F1dGhlbnRpY2F0ZWQ6IGlzQXV0aGVudGljYXRlZCAmJiAoaXNDb252ZXhBdXRoZW50aWNhdGVkID8/IGZhbHNlKVxuICAgICAgfVxuICAgIH0sXG4gICAgLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29udmV4UHJvdmlkZXIsIHsgY2xpZW50IH0sIGNoaWxkcmVuKVxuICApO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q29udmV4QXV0aFN0YXRlLmpzLm1hcFxuIl0sIm5hbWVzIjpbIlJlYWN0IiwiY3JlYXRlQ29udGV4dCIsInVzZUNvbnRleHQiLCJ1c2VFZmZlY3QiLCJ1c2VTdGF0ZSIsIkNvbnZleFByb3ZpZGVyIiwiQ29udmV4QXV0aENvbnRleHQiLCJ1c2VDb252ZXhBdXRoIiwiYXV0aENvbnRleHQiLCJFcnJvciIsIkNvbnZleFByb3ZpZGVyV2l0aEF1dGgiLCJjaGlsZHJlbiIsImNsaWVudCIsInVzZUF1dGgiLCJpc0xvYWRpbmciLCJpc0F1dGhlbnRpY2F0ZWQiLCJmZXRjaEFjY2Vzc1Rva2VuIiwiaXNDb252ZXhBdXRoZW50aWNhdGVkIiwic2V0SXNDb252ZXhBdXRoZW50aWNhdGVkIiwiaXNUaGlzRWZmZWN0UmVsZXZhbnQiLCJzZXRUb2tlbiIsInNldEF1dGgiLCJpc0F1dGhlbnRpY2F0ZWQyIiwiaXNDb252ZXhBdXRoZW50aWNhdGVkMiIsImNsZWFyQXV0aCIsImNyZWF0ZUVsZW1lbnQiLCJQcm92aWRlciIsInZhbHVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/react/ConvexAuthState.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/react/auth_helpers.js":
/*!************************************************************!*\
  !*** ./node_modules/convex/dist/esm/react/auth_helpers.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthLoading: function() { return /* binding */ AuthLoading; },\n/* harmony export */   Authenticated: function() { return /* binding */ Authenticated; },\n/* harmony export */   Unauthenticated: function() { return /* binding */ Unauthenticated; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var _ConvexAuthState_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ConvexAuthState.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/react/ConvexAuthState.js\");\nvar _s = $RefreshSig$(), _s1 = $RefreshSig$(), _s2 = $RefreshSig$();\n\"use strict\";\n\n\nfunction Authenticated(param) {\n    let { children } = param;\n    _s();\n    const { isLoading, isAuthenticated } = (0,_ConvexAuthState_js__WEBPACK_IMPORTED_MODULE_1__.useConvexAuth)();\n    if (isLoading || !isAuthenticated) {\n        return null;\n    }\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, children);\n}\n_s(Authenticated, \"5GGv9MEKRHHdPWj3ryepReKJmLE=\", false, function() {\n    return [\n        _ConvexAuthState_js__WEBPACK_IMPORTED_MODULE_1__.useConvexAuth\n    ];\n});\n_c = Authenticated;\nfunction Unauthenticated(param) {\n    let { children } = param;\n    _s1();\n    const { isLoading, isAuthenticated } = (0,_ConvexAuthState_js__WEBPACK_IMPORTED_MODULE_1__.useConvexAuth)();\n    if (isLoading || isAuthenticated) {\n        return null;\n    }\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, children);\n}\n_s1(Unauthenticated, \"5GGv9MEKRHHdPWj3ryepReKJmLE=\", false, function() {\n    return [\n        _ConvexAuthState_js__WEBPACK_IMPORTED_MODULE_1__.useConvexAuth\n    ];\n});\n_c1 = Unauthenticated;\nfunction AuthLoading(param) {\n    let { children } = param;\n    _s2();\n    const { isLoading } = (0,_ConvexAuthState_js__WEBPACK_IMPORTED_MODULE_1__.useConvexAuth)();\n    if (!isLoading) {\n        return null;\n    }\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, children);\n} //# sourceMappingURL=auth_helpers.js.map\n_s2(AuthLoading, \"T4P/uFnMPA7P+2KU5NWFLnzfLbw=\", false, function() {\n    return [\n        _ConvexAuthState_js__WEBPACK_IMPORTED_MODULE_1__.useConvexAuth\n    ];\n});\n_c2 = AuthLoading;\nvar _c, _c1, _c2;\n$RefreshReg$(_c, \"Authenticated\");\n$RefreshReg$(_c1, \"Unauthenticated\");\n$RefreshReg$(_c2, \"AuthLoading\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vcmVhY3QvYXV0aF9oZWxwZXJzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQzBCO0FBQzJCO0FBQzlDLFNBQVNFLGNBQWMsS0FBWTtRQUFaLEVBQUVDLFFBQVEsRUFBRSxHQUFaOztJQUM1QixNQUFNLEVBQUVDLFNBQVMsRUFBRUMsZUFBZSxFQUFFLEdBQUdKLGtFQUFhQTtJQUNwRCxJQUFJRyxhQUFhLENBQUNDLGlCQUFpQjtRQUNqQyxPQUFPO0lBQ1Q7SUFDQSxPQUFPLGFBQWEsaUJBQUdMLGdEQUFtQixDQUFDQSwyQ0FBYyxFQUFFLE1BQU1HO0FBQ25FO0dBTmdCRDs7UUFDeUJELDhEQUFhQTs7O0tBRHRDQztBQU9ULFNBQVNNLGdCQUFnQixLQUFZO1FBQVosRUFBRUwsUUFBUSxFQUFFLEdBQVo7O0lBQzlCLE1BQU0sRUFBRUMsU0FBUyxFQUFFQyxlQUFlLEVBQUUsR0FBR0osa0VBQWFBO0lBQ3BELElBQUlHLGFBQWFDLGlCQUFpQjtRQUNoQyxPQUFPO0lBQ1Q7SUFDQSxPQUFPLGFBQWEsaUJBQUdMLGdEQUFtQixDQUFDQSwyQ0FBYyxFQUFFLE1BQU1HO0FBQ25FO0lBTmdCSzs7UUFDeUJQLDhEQUFhQTs7O01BRHRDTztBQU9ULFNBQVNDLFlBQVksS0FBWTtRQUFaLEVBQUVOLFFBQVEsRUFBRSxHQUFaOztJQUMxQixNQUFNLEVBQUVDLFNBQVMsRUFBRSxHQUFHSCxrRUFBYUE7SUFDbkMsSUFBSSxDQUFDRyxXQUFXO1FBQ2QsT0FBTztJQUNUO0lBQ0EsT0FBTyxhQUFhLGlCQUFHSixnREFBbUIsQ0FBQ0EsMkNBQWMsRUFBRSxNQUFNRztBQUNuRSxFQUNBLHdDQUF3QztJQVB4Qk07O1FBQ1FSLDhEQUFhQTs7O01BRHJCUSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3JlYWN0L2F1dGhfaGVscGVycy5qcz9hMmRkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlQ29udmV4QXV0aCB9IGZyb20gXCIuL0NvbnZleEF1dGhTdGF0ZS5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIEF1dGhlbnRpY2F0ZWQoeyBjaGlsZHJlbiB9KSB7XG4gIGNvbnN0IHsgaXNMb2FkaW5nLCBpc0F1dGhlbnRpY2F0ZWQgfSA9IHVzZUNvbnZleEF1dGgoKTtcbiAgaWYgKGlzTG9hZGluZyB8fCAhaXNBdXRoZW50aWNhdGVkKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCBjaGlsZHJlbik7XG59XG5leHBvcnQgZnVuY3Rpb24gVW5hdXRoZW50aWNhdGVkKHsgY2hpbGRyZW4gfSkge1xuICBjb25zdCB7IGlzTG9hZGluZywgaXNBdXRoZW50aWNhdGVkIH0gPSB1c2VDb252ZXhBdXRoKCk7XG4gIGlmIChpc0xvYWRpbmcgfHwgaXNBdXRoZW50aWNhdGVkKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCBjaGlsZHJlbik7XG59XG5leHBvcnQgZnVuY3Rpb24gQXV0aExvYWRpbmcoeyBjaGlsZHJlbiB9KSB7XG4gIGNvbnN0IHsgaXNMb2FkaW5nIH0gPSB1c2VDb252ZXhBdXRoKCk7XG4gIGlmICghaXNMb2FkaW5nKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCBjaGlsZHJlbik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hdXRoX2hlbHBlcnMuanMubWFwXG4iXSwibmFtZXMiOlsiUmVhY3QiLCJ1c2VDb252ZXhBdXRoIiwiQXV0aGVudGljYXRlZCIsImNoaWxkcmVuIiwiaXNMb2FkaW5nIiwiaXNBdXRoZW50aWNhdGVkIiwiY3JlYXRlRWxlbWVudCIsIkZyYWdtZW50IiwiVW5hdXRoZW50aWNhdGVkIiwiQXV0aExvYWRpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/react/auth_helpers.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/react/client.js":
/*!******************************************************!*\
  !*** ./node_modules/convex/dist/esm/react/client.js ***!
  \******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConvexProvider: function() { return /* binding */ ConvexProvider; },\n/* harmony export */   ConvexReactClient: function() { return /* binding */ ConvexReactClient; },\n/* harmony export */   createMutation: function() { return /* binding */ createMutation; },\n/* harmony export */   useAction: function() { return /* binding */ useAction; },\n/* harmony export */   useConvex: function() { return /* binding */ useConvex; },\n/* harmony export */   useMutation: function() { return /* binding */ useMutation; },\n/* harmony export */   useQuery: function() { return /* binding */ useQuery; }\n/* harmony export */ });\n/* harmony import */ var _browser_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../browser/index.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/browser/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../values/index.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/values/index.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-dom */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react-dom/index.js\");\n/* harmony import */ var _use_queries_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./use_queries.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/react/use_queries.js\");\n/* harmony import */ var _common_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../common/index.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/common/index.js\");\n/* harmony import */ var _server_api_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../server/api.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/server/api.js\");\nvar _s = $RefreshSig$(), _s1 = $RefreshSig$(), _s2 = $RefreshSig$(), _s3 = $RefreshSig$();\n\"use strict\";\n\n\n\n\n\n\n\nif (typeof react__WEBPACK_IMPORTED_MODULE_1__ === \"undefined\") {\n    throw new Error(\"Required dependency 'react' not found\");\n}\nif (typeof react_dom__WEBPACK_IMPORTED_MODULE_3__ === \"undefined\") {\n    throw new Error(\"Required dependency 'react-dom' not found\");\n}\nfunction createMutation(mutationReference, client, update) {\n    function mutation(args) {\n        assertNotAccidentalArgument(args);\n        return client.mutation(mutationReference, args, {\n            optimisticUpdate: update\n        });\n    }\n    mutation.withOptimisticUpdate = function withOptimisticUpdate(optimisticUpdate) {\n        if (update !== void 0) {\n            throw new Error(\"Already specified optimistic update for mutation \".concat((0,_server_api_js__WEBPACK_IMPORTED_MODULE_6__.getFunctionName)(mutationReference)));\n        }\n        return createMutation(mutationReference, client, optimisticUpdate);\n    };\n    return mutation;\n}\nfunction createAction(actionReference, client) {\n    return function(args) {\n        return client.action(actionReference, args);\n    };\n}\nclass ConvexReactClient {\n    /**\n   * Lazily instantiate the `BaseConvexClient` so we don't create the WebSocket\n   * when server-side rendering.\n   *\n   * @internal\n   */ get sync() {\n        if (this.closed) {\n            throw new Error(\"ConvexReactClient has already been closed.\");\n        }\n        if (this.cachedSync) {\n            return this.cachedSync;\n        }\n        this.cachedSync = new _browser_index_js__WEBPACK_IMPORTED_MODULE_0__.BaseConvexClient(this.address, (updatedQueries)=>this.transition(updatedQueries), this.options);\n        if (this.adminAuth) {\n            this.cachedSync.setAdminAuth(this.adminAuth, this.fakeUserIdentity);\n        }\n        return this.cachedSync;\n    }\n    /**\n   * Set the authentication token to be used for subsequent queries and mutations.\n   * `fetchToken` will be called automatically again if a token expires.\n   * `fetchToken` should return `null` if the token cannot be retrieved, for example\n   * when the user's rights were permanently revoked.\n   * @param fetchToken - an async function returning the JWT-encoded OpenID Connect Identity Token\n   * @param onChange - a callback that will be called when the authentication status changes\n   */ setAuth(fetchToken, onChange) {\n        if (typeof fetchToken === \"string\") {\n            throw new Error(\"Passing a string to ConvexReactClient.setAuth is no longer supported, please upgrade to passing in an async function to handle reauthentication.\");\n        }\n        this.sync.setAuth(fetchToken, onChange !== null && onChange !== void 0 ? onChange : ()=>{});\n    }\n    /**\n   * Clear the current authentication token if set.\n   */ clearAuth() {\n        this.sync.clearAuth();\n    }\n    /**\n   * @internal\n   */ setAdminAuth(token, identity) {\n        this.adminAuth = token;\n        this.fakeUserIdentity = identity;\n        if (this.closed) {\n            throw new Error(\"ConvexReactClient has already been closed.\");\n        }\n        if (this.cachedSync) {\n            this.sync.setAdminAuth(token, identity);\n        }\n    }\n    /**\n   * Construct a new {@link Watch} on a Convex query function.\n   *\n   * **Most application code should not call this method directly. Instead use\n   * the {@link useQuery} hook.**\n   *\n   * @param query - A {@link server.FunctionReference} for the public query to run.\n   * @param args - An arguments object for the query. If this is omitted,\n   * the arguments will be `{}`.\n   * @param options - A {@link WatchQueryOptions} options object for this query.\n   *\n   * @returns The {@link Watch} object.\n   */ watchQuery(query) {\n        for(var _len = arguments.length, argsAndOptions = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            argsAndOptions[_key - 1] = arguments[_key];\n        }\n        const [args, options] = argsAndOptions;\n        const name = (0,_server_api_js__WEBPACK_IMPORTED_MODULE_6__.getFunctionName)(query);\n        return {\n            onUpdate: (callback)=>{\n                const { queryToken, unsubscribe } = this.sync.subscribe(name, args, options);\n                const currentListeners = this.listeners.get(queryToken);\n                if (currentListeners !== void 0) {\n                    currentListeners.add(callback);\n                } else {\n                    this.listeners.set(queryToken, /* @__PURE__ */ new Set([\n                        callback\n                    ]));\n                }\n                return ()=>{\n                    if (this.closed) {\n                        return;\n                    }\n                    const currentListeners2 = this.listeners.get(queryToken);\n                    currentListeners2.delete(callback);\n                    if (currentListeners2.size === 0) {\n                        this.listeners.delete(queryToken);\n                    }\n                    unsubscribe();\n                };\n            },\n            localQueryResult: ()=>{\n                if (this.cachedSync) {\n                    return this.cachedSync.localQueryResult(name, args);\n                }\n                return void 0;\n            },\n            localQueryLogs: ()=>{\n                if (this.cachedSync) {\n                    return this.cachedSync.localQueryLogs(name, args);\n                }\n                return void 0;\n            },\n            journal: ()=>{\n                if (this.cachedSync) {\n                    return this.cachedSync.queryJournal(name, args);\n                }\n                return void 0;\n            }\n        };\n    }\n    /**\n   * Execute a mutation function.\n   *\n   * @param mutation - A {@link server.FunctionReference} for the public mutation\n   * to run.\n   * @param args - An arguments object for the mutation. If this is omitted,\n   * the arguments will be `{}`.\n   * @param options - A {@link MutationOptions} options object for the mutation.\n   * @returns A promise of the mutation's result.\n   */ mutation(mutation) {\n        for(var _len = arguments.length, argsAndOptions = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            argsAndOptions[_key - 1] = arguments[_key];\n        }\n        const [args, options] = argsAndOptions;\n        const name = (0,_server_api_js__WEBPACK_IMPORTED_MODULE_6__.getFunctionName)(mutation);\n        return this.sync.mutation(name, args, options);\n    }\n    /**\n   * Execute an action function.\n   *\n   * @param action - A {@link server.FunctionReference} for the public action\n   * to run.\n   * @param args - An arguments object for the action. If this is omitted,\n   * the arguments will be `{}`.\n   * @returns A promise of the action's result.\n   */ action(action) {\n        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            args[_key - 1] = arguments[_key];\n        }\n        const name = (0,_server_api_js__WEBPACK_IMPORTED_MODULE_6__.getFunctionName)(action);\n        return this.sync.action(name, ...args);\n    }\n    /**\n   * Fetch a query result once.\n   *\n   * **Most application code should subscribe to queries instead, using\n   * the {@link useQuery} hook.**\n   *\n   * @param query - A {@link server.FunctionReference} for the public query\n   * to run.\n   * @param args - An arguments object for the query. If this is omitted,\n   * the arguments will be `{}`.\n   * @returns A promise of the query's result.\n   */ query(query) {\n        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            args[_key - 1] = arguments[_key];\n        }\n        const watch = this.watchQuery(query, ...args);\n        const existingResult = watch.localQueryResult();\n        if (existingResult !== void 0) {\n            return existingResult;\n        }\n        return new Promise((resolve, reject)=>{\n            const unsubscribe = watch.onUpdate(()=>{\n                unsubscribe();\n                try {\n                    resolve(watch.localQueryResult());\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        });\n    }\n    /**\n   * Get the current {@link ConnectionState} between the client and the Convex\n   * backend.\n   *\n   * @returns The {@link ConnectionState} with the Convex backend.\n   */ connectionState() {\n        return this.sync.connectionState();\n    }\n    /**\n   * Close any network handles associated with this client and stop all subscriptions.\n   *\n   * Call this method when you're done with a {@link ConvexReactClient} to\n   * dispose of its sockets and resources.\n   *\n   * @returns A `Promise` fulfilled when the connection has been completely closed.\n   */ async close() {\n        this.closed = true;\n        this.listeners = /* @__PURE__ */ new Map();\n        if (this.cachedSync) {\n            const sync = this.cachedSync;\n            this.cachedSync = void 0;\n            await sync.close();\n        }\n    }\n    transition(updatedQueries) {\n        react_dom__WEBPACK_IMPORTED_MODULE_3__.unstable_batchedUpdates(()=>{\n            for (const queryToken of updatedQueries){\n                const callbacks = this.listeners.get(queryToken);\n                if (callbacks) {\n                    for (const callback of callbacks){\n                        callback();\n                    }\n                }\n            }\n        });\n    }\n    /**\n   * @param address - The url of your Convex deployment, often provided\n   * by an environment variable. E.g. `https://small-mouse-123.convex.cloud`.\n   * @param options - See {@link ConvexReactClientOptions} for a full description.\n   */ constructor(address, options){\n        this.closed = false;\n        if (typeof address !== \"string\") {\n            throw new Error(\"ConvexReactClient requires a URL like 'https://happy-otter-123.convex.cloud'.\");\n        }\n        if (!address.includes(\"://\")) {\n            throw new Error(\"Provided address was not an absolute URL.\");\n        }\n        this.address = address;\n        this.listeners = /* @__PURE__ */ new Map();\n        this.options = {\n            ...options\n        };\n    }\n}\nconst ConvexContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createContext(void 0);\nfunction useConvex() {\n    _s();\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ConvexContext);\n}\n_s(useConvex, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nconst ConvexProvider = (param)=>{\n    let { client, children } = param;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(ConvexContext.Provider, {\n        value: client\n    }, children);\n};\n_c = ConvexProvider;\nfunction useQuery(query) {\n    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        args[_key - 1] = arguments[_key];\n    }\n    _s1();\n    const skip = args[0] === \"skip\";\n    const argsObject = args[0] === \"skip\" ? {} : (0,_common_index_js__WEBPACK_IMPORTED_MODULE_5__.parseArgs)(args[0]);\n    const queryReference = typeof query === \"string\" ? (0,_server_api_js__WEBPACK_IMPORTED_MODULE_6__.makeFunctionReference)(query) : query;\n    const queryName = (0,_server_api_js__WEBPACK_IMPORTED_MODULE_6__.getFunctionName)(queryReference);\n    const queries = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>skip ? {} : {\n            query: {\n                query: queryReference,\n                args: argsObject\n            }\n        }, // Stringify args so args that are semantically the same don't trigger a\n    // rerender. Saves developers from adding `useMemo` on every args usage.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n        JSON.stringify((0,_values_index_js__WEBPACK_IMPORTED_MODULE_2__.convexToJson)(argsObject)),\n        queryName,\n        skip\n    ]);\n    const results = (0,_use_queries_js__WEBPACK_IMPORTED_MODULE_4__.useQueries)(queries);\n    const result = results[\"query\"];\n    if (result instanceof Error) {\n        throw result;\n    }\n    return result;\n}\n_s1(useQuery, \"z7Sb6nP071RXggrUdLnaFm4g4u4=\", false, function() {\n    return [\n        _use_queries_js__WEBPACK_IMPORTED_MODULE_4__.useQueries\n    ];\n});\nfunction useMutation(mutation) {\n    _s2();\n    const mutationReference = typeof mutation === \"string\" ? (0,_server_api_js__WEBPACK_IMPORTED_MODULE_6__.makeFunctionReference)(mutation) : mutation;\n    const convex = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ConvexContext);\n    if (convex === void 0) {\n        throw new Error(\"Could not find Convex client! `useMutation` must be used in the React component tree under `ConvexProvider`. Did you forget it? See https://docs.convex.dev/quick-start#set-up-convex-in-your-react-app\");\n    }\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>createMutation(mutationReference, convex), // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n        convex,\n        (0,_server_api_js__WEBPACK_IMPORTED_MODULE_6__.getFunctionName)(mutationReference)\n    ]);\n}\n_s2(useMutation, \"5RcZ9S4PUI16Le2vh+CFvwKfMsk=\");\nfunction useAction(action) {\n    _s3();\n    const convex = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ConvexContext);\n    const actionReference = typeof action === \"string\" ? (0,_server_api_js__WEBPACK_IMPORTED_MODULE_6__.makeFunctionReference)(action) : action;\n    if (convex === void 0) {\n        throw new Error(\"Could not find Convex client! `useAction` must be used in the React component tree under `ConvexProvider`. Did you forget it? See https://docs.convex.dev/quick-start#set-up-convex-in-your-react-app\");\n    }\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>createAction(actionReference, convex), // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n        convex,\n        (0,_server_api_js__WEBPACK_IMPORTED_MODULE_6__.getFunctionName)(actionReference)\n    ]);\n}\n_s3(useAction, \"5RcZ9S4PUI16Le2vh+CFvwKfMsk=\");\nfunction assertNotAccidentalArgument(value) {\n    if (typeof value === \"object\" && value !== null && \"bubbles\" in value && \"persist\" in value && \"isDefaultPrevented\" in value) {\n        throw new Error(\"Convex function called with SyntheticEvent object. Did you use a Convex function as an event handler directly? Event handlers like onClick receive an event object as their first argument. These SyntheticEvent objects are not valid Convex values. Try wrapping the function like `const handler = () => myMutation();` and using `handler` in the event handler.\");\n    }\n} //# sourceMappingURL=client.js.map\nvar _c;\n$RefreshReg$(_c, \"ConvexProvider\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/react/client.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/react/hydration.js":
/*!*********************************************************!*\
  !*** ./node_modules/convex/dist/esm/react/hydration.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   usePreloadedQuery: function() { return /* binding */ usePreloadedQuery; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var _react_client_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../react/client.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/react/client.js\");\n/* harmony import */ var _server_api_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../server/api.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/server/api.js\");\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../values/index.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/values/index.js\");\nvar _s = $RefreshSig$();\n\"use strict\";\n\n\n\n\nfunction usePreloadedQuery(preloadedQuery) {\n    _s();\n    const args = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>(0,_values_index_js__WEBPACK_IMPORTED_MODULE_3__.jsonToConvex)(preloadedQuery._argsJSON), [\n        preloadedQuery._argsJSON\n    ]);\n    const preloadedResult = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>(0,_values_index_js__WEBPACK_IMPORTED_MODULE_3__.jsonToConvex)(preloadedQuery._valueJSON), [\n        preloadedQuery._valueJSON\n    ]);\n    const result = (0,_react_client_js__WEBPACK_IMPORTED_MODULE_1__.useQuery)((0,_server_api_js__WEBPACK_IMPORTED_MODULE_2__.makeFunctionReference)(preloadedQuery._name), args);\n    return result === void 0 ? preloadedResult : result;\n} //# sourceMappingURL=hydration.js.map\n_s(usePreloadedQuery, \"/cOfU2vNsyjh/rmRqgnYmz1yGAg=\", false, function() {\n    return [\n        _react_client_js__WEBPACK_IMPORTED_MODULE_1__.useQuery\n    ];\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vcmVhY3QvaHlkcmF0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ2dDO0FBQ2M7QUFDVztBQUNQO0FBQzNDLFNBQVNJLGtCQUFrQkMsY0FBYzs7SUFDOUMsTUFBTUMsT0FBT04sOENBQU9BLENBQ2xCLElBQU1HLDhEQUFZQSxDQUFDRSxlQUFlRSxTQUFTLEdBQzNDO1FBQUNGLGVBQWVFLFNBQVM7S0FBQztJQUU1QixNQUFNQyxrQkFBa0JSLDhDQUFPQSxDQUM3QixJQUFNRyw4REFBWUEsQ0FBQ0UsZUFBZUksVUFBVSxHQUM1QztRQUFDSixlQUFlSSxVQUFVO0tBQUM7SUFFN0IsTUFBTUMsU0FBU1QsMERBQVFBLENBQ3JCQyxxRUFBcUJBLENBQUNHLGVBQWVNLEtBQUssR0FDMUNMO0lBRUYsT0FBT0ksV0FBVyxLQUFLLElBQUlGLGtCQUFrQkU7QUFDL0MsRUFDQSxxQ0FBcUM7R0FmckJOOztRQVNDSCxzREFBUUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2NvbnZleC9kaXN0L2VzbS9yZWFjdC9oeWRyYXRpb24uanM/ODIxMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmltcG9ydCB7IHVzZU1lbW8gfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZVF1ZXJ5IH0gZnJvbSBcIi4uL3JlYWN0L2NsaWVudC5qc1wiO1xuaW1wb3J0IHsgbWFrZUZ1bmN0aW9uUmVmZXJlbmNlIH0gZnJvbSBcIi4uL3NlcnZlci9hcGkuanNcIjtcbmltcG9ydCB7IGpzb25Ub0NvbnZleCB9IGZyb20gXCIuLi92YWx1ZXMvaW5kZXguanNcIjtcbmV4cG9ydCBmdW5jdGlvbiB1c2VQcmVsb2FkZWRRdWVyeShwcmVsb2FkZWRRdWVyeSkge1xuICBjb25zdCBhcmdzID0gdXNlTWVtbyhcbiAgICAoKSA9PiBqc29uVG9Db252ZXgocHJlbG9hZGVkUXVlcnkuX2FyZ3NKU09OKSxcbiAgICBbcHJlbG9hZGVkUXVlcnkuX2FyZ3NKU09OXVxuICApO1xuICBjb25zdCBwcmVsb2FkZWRSZXN1bHQgPSB1c2VNZW1vKFxuICAgICgpID0+IGpzb25Ub0NvbnZleChwcmVsb2FkZWRRdWVyeS5fdmFsdWVKU09OKSxcbiAgICBbcHJlbG9hZGVkUXVlcnkuX3ZhbHVlSlNPTl1cbiAgKTtcbiAgY29uc3QgcmVzdWx0ID0gdXNlUXVlcnkoXG4gICAgbWFrZUZ1bmN0aW9uUmVmZXJlbmNlKHByZWxvYWRlZFF1ZXJ5Ll9uYW1lKSxcbiAgICBhcmdzXG4gICk7XG4gIHJldHVybiByZXN1bHQgPT09IHZvaWQgMCA/IHByZWxvYWRlZFJlc3VsdCA6IHJlc3VsdDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWh5ZHJhdGlvbi5qcy5tYXBcbiJdLCJuYW1lcyI6WyJ1c2VNZW1vIiwidXNlUXVlcnkiLCJtYWtlRnVuY3Rpb25SZWZlcmVuY2UiLCJqc29uVG9Db252ZXgiLCJ1c2VQcmVsb2FkZWRRdWVyeSIsInByZWxvYWRlZFF1ZXJ5IiwiYXJncyIsIl9hcmdzSlNPTiIsInByZWxvYWRlZFJlc3VsdCIsIl92YWx1ZUpTT04iLCJyZXN1bHQiLCJfbmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/react/hydration.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/react/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/convex/dist/esm/react/index.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthLoading: function() { return /* reexport safe */ _auth_helpers_js__WEBPACK_IMPORTED_MODULE_2__.AuthLoading; },\n/* harmony export */   Authenticated: function() { return /* reexport safe */ _auth_helpers_js__WEBPACK_IMPORTED_MODULE_2__.Authenticated; },\n/* harmony export */   ConvexProvider: function() { return /* reexport safe */ _client_js__WEBPACK_IMPORTED_MODULE_6__.ConvexProvider; },\n/* harmony export */   ConvexProviderWithAuth: function() { return /* reexport safe */ _ConvexAuthState_js__WEBPACK_IMPORTED_MODULE_3__.ConvexProviderWithAuth; },\n/* harmony export */   ConvexReactClient: function() { return /* reexport safe */ _client_js__WEBPACK_IMPORTED_MODULE_6__.ConvexReactClient; },\n/* harmony export */   Unauthenticated: function() { return /* reexport safe */ _auth_helpers_js__WEBPACK_IMPORTED_MODULE_2__.Unauthenticated; },\n/* harmony export */   optimisticallyUpdateValueInPaginatedQuery: function() { return /* reexport safe */ _use_paginated_query_js__WEBPACK_IMPORTED_MODULE_0__.optimisticallyUpdateValueInPaginatedQuery; },\n/* harmony export */   resetPaginationId: function() { return /* reexport safe */ _use_paginated_query_js__WEBPACK_IMPORTED_MODULE_0__.resetPaginationId; },\n/* harmony export */   useAction: function() { return /* reexport safe */ _client_js__WEBPACK_IMPORTED_MODULE_6__.useAction; },\n/* harmony export */   useConvex: function() { return /* reexport safe */ _client_js__WEBPACK_IMPORTED_MODULE_6__.useConvex; },\n/* harmony export */   useConvexAuth: function() { return /* reexport safe */ _ConvexAuthState_js__WEBPACK_IMPORTED_MODULE_3__.useConvexAuth; },\n/* harmony export */   useMutation: function() { return /* reexport safe */ _client_js__WEBPACK_IMPORTED_MODULE_6__.useMutation; },\n/* harmony export */   usePaginatedQuery: function() { return /* reexport safe */ _use_paginated_query_js__WEBPACK_IMPORTED_MODULE_0__.usePaginatedQuery; },\n/* harmony export */   usePreloadedQuery: function() { return /* reexport safe */ _hydration_js__WEBPACK_IMPORTED_MODULE_4__.usePreloadedQuery; },\n/* harmony export */   useQueries: function() { return /* reexport safe */ _use_queries_js__WEBPACK_IMPORTED_MODULE_1__.useQueries; },\n/* harmony export */   useQuery: function() { return /* reexport safe */ _client_js__WEBPACK_IMPORTED_MODULE_6__.useQuery; },\n/* harmony export */   useSubscription: function() { return /* reexport safe */ _use_subscription_js__WEBPACK_IMPORTED_MODULE_5__.useSubscription; }\n/* harmony export */ });\n/* harmony import */ var _use_paginated_query_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./use_paginated_query.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/react/use_paginated_query.js\");\n/* harmony import */ var _use_queries_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./use_queries.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/react/use_queries.js\");\n/* harmony import */ var _auth_helpers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./auth_helpers.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/react/auth_helpers.js\");\n/* harmony import */ var _ConvexAuthState_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ConvexAuthState.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/react/ConvexAuthState.js\");\n/* harmony import */ var _hydration_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./hydration.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/react/hydration.js\");\n/* harmony import */ var _use_subscription_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./use_subscription.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/react/use_subscription.js\");\n/* harmony import */ var _client_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./client.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/react/client.js\");\n\n\n\n\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vcmVhY3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQWE7QUFDNEI7QUFDSztBQUNaO0FBQ0c7QUFDTjtBQUN5QjtBQVFuQyxDQUNyQixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2NvbnZleC9kaXN0L2VzbS9yZWFjdC9pbmRleC5qcz8zNTViIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vdXNlX3BhZ2luYXRlZF9xdWVyeS5qc1wiO1xuZXhwb3J0IHsgdXNlUXVlcmllcyB9IGZyb20gXCIuL3VzZV9xdWVyaWVzLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9hdXRoX2hlbHBlcnMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL0NvbnZleEF1dGhTdGF0ZS5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vaHlkcmF0aW9uLmpzXCI7XG5leHBvcnQgeyB1c2VTdWJzY3JpcHRpb24gfSBmcm9tIFwiLi91c2Vfc3Vic2NyaXB0aW9uLmpzXCI7XG5leHBvcnQge1xuICBDb252ZXhSZWFjdENsaWVudCxcbiAgdXNlQ29udmV4LFxuICBDb252ZXhQcm92aWRlcixcbiAgdXNlUXVlcnksXG4gIHVzZU11dGF0aW9uLFxuICB1c2VBY3Rpb25cbn0gZnJvbSBcIi4vY2xpZW50LmpzXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJ1c2VRdWVyaWVzIiwidXNlU3Vic2NyaXB0aW9uIiwiQ29udmV4UmVhY3RDbGllbnQiLCJ1c2VDb252ZXgiLCJDb252ZXhQcm92aWRlciIsInVzZVF1ZXJ5IiwidXNlTXV0YXRpb24iLCJ1c2VBY3Rpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/react/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/react/queries_observer.js":
/*!****************************************************************!*\
  !*** ./node_modules/convex/dist/esm/react/queries_observer.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QueriesObserver: function() { return /* binding */ QueriesObserver; }\n/* harmony export */ });\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../values/index.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/values/index.js\");\n/* harmony import */ var _server_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../server/api.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/server/api.js\");\n\n\n\nclass QueriesObserver {\n    setQueries(newQueries) {\n        for (const identifier of Object.keys(newQueries)){\n            const { query, args } = newQueries[identifier];\n            (0,_server_api_js__WEBPACK_IMPORTED_MODULE_1__.getFunctionName)(query);\n            if (this.queries[identifier] === void 0) {\n                this.addQuery(identifier, query, args);\n            } else {\n                const existingInfo = this.queries[identifier];\n                if ((0,_server_api_js__WEBPACK_IMPORTED_MODULE_1__.getFunctionName)(query) !== (0,_server_api_js__WEBPACK_IMPORTED_MODULE_1__.getFunctionName)(existingInfo.query) || JSON.stringify((0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(args)) !== JSON.stringify((0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(existingInfo.args))) {\n                    this.removeQuery(identifier);\n                    this.addQuery(identifier, query, args);\n                }\n            }\n        }\n        for (const identifier of Object.keys(this.queries)){\n            if (newQueries[identifier] === void 0) {\n                this.removeQuery(identifier);\n            }\n        }\n    }\n    subscribe(listener) {\n        this.listeners.add(listener);\n        return ()=>{\n            this.listeners.delete(listener);\n        };\n    }\n    getLocalResults(queries) {\n        const result = {};\n        for (const identifier of Object.keys(queries)){\n            const { query, args } = queries[identifier];\n            (0,_server_api_js__WEBPACK_IMPORTED_MODULE_1__.getFunctionName)(query);\n            const watch = this.createWatch(query, args);\n            let value;\n            try {\n                value = watch.localQueryResult();\n            } catch (e) {\n                if (e instanceof Error) {\n                    value = e;\n                } else {\n                    throw e;\n                }\n            }\n            result[identifier] = value;\n        }\n        return result;\n    }\n    setCreateWatch(createWatch) {\n        this.createWatch = createWatch;\n        for (const identifier of Object.keys(this.queries)){\n            const { query, args, watch } = this.queries[identifier];\n            const journal = watch.journal();\n            this.removeQuery(identifier);\n            this.addQuery(identifier, query, args, journal);\n        }\n    }\n    destroy() {\n        for (const identifier of Object.keys(this.queries)){\n            this.removeQuery(identifier);\n        }\n        this.listeners = /* @__PURE__ */ new Set();\n    }\n    addQuery(identifier, query, args, journal) {\n        if (this.queries[identifier] !== void 0) {\n            throw new Error(\"Tried to add a new query with identifier \".concat(identifier, \" when it already exists.\"));\n        }\n        const watch = this.createWatch(query, args, journal);\n        const unsubscribe = watch.onUpdate(()=>this.notifyListeners());\n        this.queries[identifier] = {\n            query,\n            args,\n            watch,\n            unsubscribe\n        };\n    }\n    removeQuery(identifier) {\n        const info = this.queries[identifier];\n        if (info === void 0) {\n            throw new Error(\"No query found with identifier \".concat(identifier, \".\"));\n        }\n        info.unsubscribe();\n        delete this.queries[identifier];\n    }\n    notifyListeners() {\n        for (const listener of this.listeners){\n            listener();\n        }\n    }\n    constructor(createWatch){\n        this.createWatch = createWatch;\n        this.queries = {};\n        this.listeners = /* @__PURE__ */ new Set();\n    }\n} //# sourceMappingURL=queries_observer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/react/queries_observer.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/react/use_paginated_query.js":
/*!*******************************************************************!*\
  !*** ./node_modules/convex/dist/esm/react/use_paginated_query.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   optimisticallyUpdateValueInPaginatedQuery: function() { return /* binding */ optimisticallyUpdateValueInPaginatedQuery; },\n/* harmony export */   resetPaginationId: function() { return /* binding */ resetPaginationId; },\n/* harmony export */   usePaginatedQuery: function() { return /* binding */ usePaginatedQuery; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../values/index.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/values/index.js\");\n/* harmony import */ var _use_queries_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./use_queries.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/react/use_queries.js\");\n/* harmony import */ var _server_api_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../server/api.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/server/api.js\");\nvar _s = $RefreshSig$();\n\"use strict\";\n\n\n\n\nconst splitQuery = (key, splitCursor, continueCursor)=>(prevState)=>{\n        const queries = {\n            ...prevState.queries\n        };\n        const splitKey1 = prevState.nextPageKey;\n        const splitKey2 = prevState.nextPageKey + 1;\n        const nextPageKey = prevState.nextPageKey + 2;\n        queries[splitKey1] = {\n            query: prevState.query,\n            args: {\n                ...prevState.args,\n                paginationOpts: {\n                    ...prevState.queries[key].args.paginationOpts,\n                    endCursor: splitCursor\n                }\n            }\n        };\n        queries[splitKey2] = {\n            query: prevState.query,\n            args: {\n                ...prevState.args,\n                paginationOpts: {\n                    ...prevState.queries[key].args.paginationOpts,\n                    cursor: splitCursor,\n                    endCursor: continueCursor\n                }\n            }\n        };\n        const ongoingSplits = {\n            ...prevState.ongoingSplits\n        };\n        ongoingSplits[key] = [\n            splitKey1,\n            splitKey2\n        ];\n        return {\n            ...prevState,\n            nextPageKey,\n            queries,\n            ongoingSplits\n        };\n    };\nconst completeSplitQuery = (key)=>(prevState)=>{\n        const completedSplit = prevState.ongoingSplits[key];\n        if (completedSplit === void 0) {\n            return prevState;\n        }\n        const queries = {\n            ...prevState.queries\n        };\n        delete queries[key];\n        const ongoingSplits = {\n            ...prevState.ongoingSplits\n        };\n        delete ongoingSplits[key];\n        let pageKeys = prevState.pageKeys.slice();\n        const pageIndex = prevState.pageKeys.findIndex((v)=>v === key);\n        if (pageIndex >= 0) {\n            pageKeys = [\n                ...prevState.pageKeys.slice(0, pageIndex),\n                ...completedSplit,\n                ...prevState.pageKeys.slice(pageIndex + 1)\n            ];\n        }\n        return {\n            ...prevState,\n            queries,\n            pageKeys,\n            ongoingSplits\n        };\n    };\nfunction usePaginatedQuery(query, args, options) {\n    _s();\n    if (typeof (options === null || options === void 0 ? void 0 : options.initialNumItems) !== \"number\" || options.initialNumItems < 0) {\n        throw new Error(\"`options.initialNumItems` must be a positive number. Received `\".concat(options === null || options === void 0 ? void 0 : options.initialNumItems, \"`.\"));\n    }\n    const skip = args === \"skip\";\n    const argsObject = skip ? {} : args;\n    const queryName = (0,_server_api_js__WEBPACK_IMPORTED_MODULE_3__.getFunctionName)(query);\n    const createInitialState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        return ()=>{\n            const id = nextPaginationId();\n            return {\n                query,\n                args: argsObject,\n                id,\n                nextPageKey: 1,\n                pageKeys: skip ? [] : [\n                    0\n                ],\n                queries: skip ? {} : {\n                    0: {\n                        query,\n                        args: {\n                            ...argsObject,\n                            paginationOpts: {\n                                numItems: options.initialNumItems,\n                                cursor: null,\n                                id\n                            }\n                        }\n                    }\n                },\n                ongoingSplits: {},\n                skip\n            };\n        };\n    }, [\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        JSON.stringify((0,_values_index_js__WEBPACK_IMPORTED_MODULE_1__.convexToJson)(argsObject)),\n        queryName,\n        options.initialNumItems,\n        skip\n    ]);\n    const [state, setState] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(createInitialState);\n    let currState = state;\n    if ((0,_server_api_js__WEBPACK_IMPORTED_MODULE_3__.getFunctionName)(query) !== (0,_server_api_js__WEBPACK_IMPORTED_MODULE_3__.getFunctionName)(state.query) || JSON.stringify((0,_values_index_js__WEBPACK_IMPORTED_MODULE_1__.convexToJson)(argsObject)) !== JSON.stringify((0,_values_index_js__WEBPACK_IMPORTED_MODULE_1__.convexToJson)(state.args)) || skip !== state.skip) {\n        currState = createInitialState();\n        setState(currState);\n    }\n    const resultsObject = (0,_use_queries_js__WEBPACK_IMPORTED_MODULE_2__.useQueries)(currState.queries);\n    const [results, maybeLastResult] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        let currResult = void 0;\n        const allItems = [];\n        for (const pageKey of currState.pageKeys){\n            currResult = resultsObject[pageKey];\n            if (currResult === void 0) {\n                break;\n            }\n            if (currResult instanceof Error) {\n                if (currResult.message.includes(\"InvalidCursor\")) {\n                    console.warn(\"usePaginatedQuery hit error, resetting pagination state: \" + currResult.message);\n                    setState(createInitialState);\n                    return [\n                        [],\n                        void 0\n                    ];\n                } else {\n                    throw currResult;\n                }\n            }\n            const ongoingSplit = currState.ongoingSplits[pageKey];\n            if (ongoingSplit !== void 0) {\n                if (resultsObject[ongoingSplit[0]] !== void 0 && resultsObject[ongoingSplit[1]] !== void 0) {\n                    setState(completeSplitQuery(pageKey));\n                }\n            } else if (currResult.splitCursor && (currResult.pageStatus === \"SplitRecommended\" || currResult.pageStatus === \"SplitRequired\" || currResult.page.length > options.initialNumItems * 2)) {\n                setState(splitQuery(pageKey, currResult.splitCursor, currResult.continueCursor));\n            }\n            if (currResult.pageStatus === \"SplitRequired\") {\n                return [\n                    allItems,\n                    void 0\n                ];\n            }\n            allItems.push(...currResult.page);\n        }\n        return [\n            allItems,\n            currResult\n        ];\n    }, [\n        resultsObject,\n        currState.pageKeys,\n        currState.ongoingSplits,\n        options.initialNumItems,\n        createInitialState\n    ]);\n    const statusObject = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        if (maybeLastResult === void 0) {\n            if (currState.nextPageKey === 1) {\n                return {\n                    status: \"LoadingFirstPage\",\n                    isLoading: true,\n                    loadMore: (_numItems)=>{}\n                };\n            } else {\n                return {\n                    status: \"LoadingMore\",\n                    isLoading: true,\n                    loadMore: (_numItems)=>{}\n                };\n            }\n        }\n        if (maybeLastResult.isDone) {\n            return {\n                status: \"Exhausted\",\n                isLoading: false,\n                loadMore: (_numItems)=>{}\n            };\n        }\n        const continueCursor = maybeLastResult.continueCursor;\n        let alreadyLoadingMore = false;\n        return {\n            status: \"CanLoadMore\",\n            isLoading: false,\n            loadMore: (numItems)=>{\n                if (!alreadyLoadingMore) {\n                    alreadyLoadingMore = true;\n                    setState((prevState)=>{\n                        const pageKeys = [\n                            ...prevState.pageKeys,\n                            prevState.nextPageKey\n                        ];\n                        const queries = {\n                            ...prevState.queries\n                        };\n                        queries[prevState.nextPageKey] = {\n                            query: prevState.query,\n                            args: {\n                                ...prevState.args,\n                                paginationOpts: {\n                                    numItems,\n                                    cursor: continueCursor,\n                                    id: prevState.id\n                                }\n                            }\n                        };\n                        return {\n                            ...prevState,\n                            nextPageKey: prevState.nextPageKey + 1,\n                            pageKeys,\n                            queries\n                        };\n                    });\n                }\n            }\n        };\n    }, [\n        maybeLastResult,\n        currState.nextPageKey\n    ]);\n    return {\n        results,\n        ...statusObject\n    };\n}\n_s(usePaginatedQuery, \"uXmjoe2iiEG5eAu9idxXeiKaaMU=\", false, function() {\n    return [\n        _use_queries_js__WEBPACK_IMPORTED_MODULE_2__.useQueries\n    ];\n});\nlet paginationId = 0;\nfunction nextPaginationId() {\n    paginationId++;\n    return paginationId;\n}\nfunction resetPaginationId() {\n    paginationId = 0;\n}\nfunction optimisticallyUpdateValueInPaginatedQuery(localStore, query, args, updateValue) {\n    const expectedArgs = JSON.stringify((0,_values_index_js__WEBPACK_IMPORTED_MODULE_1__.convexToJson)(args));\n    for (const queryResult of localStore.getAllQueries(query)){\n        if (queryResult.value !== void 0) {\n            const { paginationOpts: _, ...innerArgs } = queryResult.args;\n            if (JSON.stringify((0,_values_index_js__WEBPACK_IMPORTED_MODULE_1__.convexToJson)(innerArgs)) === expectedArgs) {\n                const value = queryResult.value;\n                if (typeof value === \"object\" && value !== null && Array.isArray(value.page)) {\n                    localStore.setQuery(query, queryResult.args, {\n                        ...value,\n                        page: value.page.map(updateValue)\n                    });\n                }\n            }\n        }\n    }\n} //# sourceMappingURL=use_paginated_query.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/react/use_paginated_query.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/react/use_queries.js":
/*!***********************************************************!*\
  !*** ./node_modules/convex/dist/esm/react/use_queries.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useQueries: function() { return /* binding */ useQueries; },\n/* harmony export */   useQueriesHelper: function() { return /* binding */ useQueriesHelper; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var _client_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./client.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/react/client.js\");\n/* harmony import */ var _queries_observer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./queries_observer.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/react/queries_observer.js\");\n/* harmony import */ var _use_subscription_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./use_subscription.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/react/use_subscription.js\");\nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\"use strict\";\n\n\n\n\nfunction useQueries(queries) {\n    _s();\n    const convex = (0,_client_js__WEBPACK_IMPORTED_MODULE_1__.useConvex)();\n    if (convex === void 0) {\n        throw new Error(\"Could not find Convex client! `useQuery` must be used in the React component tree under `ConvexProvider`. Did you forget it? See https://docs.convex.dev/quick-start#set-up-convex-in-your-react-app\");\n    }\n    const createWatch = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        return (query, args, journal)=>{\n            return convex.watchQuery(query, args, {\n                journal\n            });\n        };\n    }, [\n        convex\n    ]);\n    return useQueriesHelper(queries, createWatch);\n}\n_s(useQueries, \"L8QDMxsIBv80IhJOS8T1rIETIcw=\", false, function() {\n    return [\n        _client_js__WEBPACK_IMPORTED_MODULE_1__.useConvex,\n        useQueriesHelper\n    ];\n});\nfunction useQueriesHelper(queries, createWatch) {\n    _s1();\n    const [observer] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>new _queries_observer_js__WEBPACK_IMPORTED_MODULE_2__.QueriesObserver(createWatch));\n    if (observer.createWatch !== createWatch) {\n        observer.setCreateWatch(createWatch);\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>()=>observer.destroy(), [\n        observer\n    ]);\n    const subscription = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n            getCurrentValue: ()=>{\n                return observer.getLocalResults(queries);\n            },\n            subscribe: (callback)=>{\n                observer.setQueries(queries);\n                return observer.subscribe(callback);\n            }\n        }), [\n        observer,\n        queries\n    ]);\n    return (0,_use_subscription_js__WEBPACK_IMPORTED_MODULE_3__.useSubscription)(subscription);\n} //# sourceMappingURL=use_queries.js.map\n_s1(useQueriesHelper, \"jq3pUGLtCNynNmtoDJeiAnA5YYo=\", false, function() {\n    return [\n        _use_subscription_js__WEBPACK_IMPORTED_MODULE_3__.useSubscription\n    ];\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vcmVhY3QvdXNlX3F1ZXJpZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBO0FBQ3FEO0FBQ2I7QUFDZ0I7QUFDQTtBQUNqRCxTQUFTTSxXQUFXQyxPQUFPOztJQUNoQyxNQUFNQyxTQUFTTCxxREFBU0E7SUFDeEIsSUFBSUssV0FBVyxLQUFLLEdBQUc7UUFDckIsTUFBTSxJQUFJQyxNQUNSO0lBRUo7SUFDQSxNQUFNQyxjQUFjVCw4Q0FBT0EsQ0FBQztRQUMxQixPQUFPLENBQUNVLE9BQU9DLE1BQU1DO1lBQ25CLE9BQU9MLE9BQU9NLFVBQVUsQ0FBQ0gsT0FBT0MsTUFBTTtnQkFBRUM7WUFBUTtRQUNsRDtJQUNGLEdBQUc7UUFBQ0w7S0FBTztJQUNYLE9BQU9PLGlCQUFpQlIsU0FBU0c7QUFDbkM7R0FiZ0JKOztRQUNDSCxpREFBU0E7UUFXakJZOzs7QUFFRixTQUFTQSxpQkFBaUJSLE9BQU8sRUFBRUcsV0FBVzs7SUFDbkQsTUFBTSxDQUFDTSxTQUFTLEdBQUdkLCtDQUFRQSxDQUFDLElBQU0sSUFBSUUsaUVBQWVBLENBQUNNO0lBQ3RELElBQUlNLFNBQVNOLFdBQVcsS0FBS0EsYUFBYTtRQUN4Q00sU0FBU0MsY0FBYyxDQUFDUDtJQUMxQjtJQUNBVixnREFBU0EsQ0FBQyxJQUFNLElBQU1nQixTQUFTRSxPQUFPLElBQUk7UUFBQ0Y7S0FBUztJQUNwRCxNQUFNRyxlQUFlbEIsOENBQU9BLENBQzFCLElBQU87WUFDTG1CLGlCQUFpQjtnQkFDZixPQUFPSixTQUFTSyxlQUFlLENBQUNkO1lBQ2xDO1lBQ0FlLFdBQVcsQ0FBQ0M7Z0JBQ1ZQLFNBQVNRLFVBQVUsQ0FBQ2pCO2dCQUNwQixPQUFPUyxTQUFTTSxTQUFTLENBQUNDO1lBQzVCO1FBQ0YsSUFDQTtRQUFDUDtRQUFVVDtLQUFRO0lBRXJCLE9BQU9GLHFFQUFlQSxDQUFDYztBQUN6QixFQUNBLHVDQUF1QztJQXBCdkJKOztRQWtCUFYsaUVBQWVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vcmVhY3QvdXNlX3F1ZXJpZXMuanM/OGUyYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmltcG9ydCB7IHVzZUVmZmVjdCwgdXNlTWVtbywgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZUNvbnZleCB9IGZyb20gXCIuL2NsaWVudC5qc1wiO1xuaW1wb3J0IHsgUXVlcmllc09ic2VydmVyIH0gZnJvbSBcIi4vcXVlcmllc19vYnNlcnZlci5qc1wiO1xuaW1wb3J0IHsgdXNlU3Vic2NyaXB0aW9uIH0gZnJvbSBcIi4vdXNlX3N1YnNjcmlwdGlvbi5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVF1ZXJpZXMocXVlcmllcykge1xuICBjb25zdCBjb252ZXggPSB1c2VDb252ZXgoKTtcbiAgaWYgKGNvbnZleCA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgXCJDb3VsZCBub3QgZmluZCBDb252ZXggY2xpZW50ISBgdXNlUXVlcnlgIG11c3QgYmUgdXNlZCBpbiB0aGUgUmVhY3QgY29tcG9uZW50IHRyZWUgdW5kZXIgYENvbnZleFByb3ZpZGVyYC4gRGlkIHlvdSBmb3JnZXQgaXQ/IFNlZSBodHRwczovL2RvY3MuY29udmV4LmRldi9xdWljay1zdGFydCNzZXQtdXAtY29udmV4LWluLXlvdXItcmVhY3QtYXBwXCJcbiAgICApO1xuICB9XG4gIGNvbnN0IGNyZWF0ZVdhdGNoID0gdXNlTWVtbygoKSA9PiB7XG4gICAgcmV0dXJuIChxdWVyeSwgYXJncywgam91cm5hbCkgPT4ge1xuICAgICAgcmV0dXJuIGNvbnZleC53YXRjaFF1ZXJ5KHF1ZXJ5LCBhcmdzLCB7IGpvdXJuYWwgfSk7XG4gICAgfTtcbiAgfSwgW2NvbnZleF0pO1xuICByZXR1cm4gdXNlUXVlcmllc0hlbHBlcihxdWVyaWVzLCBjcmVhdGVXYXRjaCk7XG59XG5leHBvcnQgZnVuY3Rpb24gdXNlUXVlcmllc0hlbHBlcihxdWVyaWVzLCBjcmVhdGVXYXRjaCkge1xuICBjb25zdCBbb2JzZXJ2ZXJdID0gdXNlU3RhdGUoKCkgPT4gbmV3IFF1ZXJpZXNPYnNlcnZlcihjcmVhdGVXYXRjaCkpO1xuICBpZiAob2JzZXJ2ZXIuY3JlYXRlV2F0Y2ggIT09IGNyZWF0ZVdhdGNoKSB7XG4gICAgb2JzZXJ2ZXIuc2V0Q3JlYXRlV2F0Y2goY3JlYXRlV2F0Y2gpO1xuICB9XG4gIHVzZUVmZmVjdCgoKSA9PiAoKSA9PiBvYnNlcnZlci5kZXN0cm95KCksIFtvYnNlcnZlcl0pO1xuICBjb25zdCBzdWJzY3JpcHRpb24gPSB1c2VNZW1vKFxuICAgICgpID0+ICh7XG4gICAgICBnZXRDdXJyZW50VmFsdWU6ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIG9ic2VydmVyLmdldExvY2FsUmVzdWx0cyhxdWVyaWVzKTtcbiAgICAgIH0sXG4gICAgICBzdWJzY3JpYmU6IChjYWxsYmFjaykgPT4ge1xuICAgICAgICBvYnNlcnZlci5zZXRRdWVyaWVzKHF1ZXJpZXMpO1xuICAgICAgICByZXR1cm4gb2JzZXJ2ZXIuc3Vic2NyaWJlKGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICB9KSxcbiAgICBbb2JzZXJ2ZXIsIHF1ZXJpZXNdXG4gICk7XG4gIHJldHVybiB1c2VTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZV9xdWVyaWVzLmpzLm1hcFxuIl0sIm5hbWVzIjpbInVzZUVmZmVjdCIsInVzZU1lbW8iLCJ1c2VTdGF0ZSIsInVzZUNvbnZleCIsIlF1ZXJpZXNPYnNlcnZlciIsInVzZVN1YnNjcmlwdGlvbiIsInVzZVF1ZXJpZXMiLCJxdWVyaWVzIiwiY29udmV4IiwiRXJyb3IiLCJjcmVhdGVXYXRjaCIsInF1ZXJ5IiwiYXJncyIsImpvdXJuYWwiLCJ3YXRjaFF1ZXJ5IiwidXNlUXVlcmllc0hlbHBlciIsIm9ic2VydmVyIiwic2V0Q3JlYXRlV2F0Y2giLCJkZXN0cm95Iiwic3Vic2NyaXB0aW9uIiwiZ2V0Q3VycmVudFZhbHVlIiwiZ2V0TG9jYWxSZXN1bHRzIiwic3Vic2NyaWJlIiwiY2FsbGJhY2siLCJzZXRRdWVyaWVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/react/use_queries.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/react/use_subscription.js":
/*!****************************************************************!*\
  !*** ./node_modules/convex/dist/esm/react/use_subscription.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useSubscription: function() { return /* binding */ useSubscription; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\nvar _s = $RefreshSig$();\n\"use strict\";\n\nfunction useSubscription(param) {\n    let { // (Synchronously) returns the current value of our subscription.\n    getCurrentValue, // This function is passed an event handler to attach to the subscription.\n    // It should return an unsubscribe function that removes the handler.\n    subscribe } = param;\n    _s();\n    const [state, setState] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>({\n            getCurrentValue,\n            subscribe,\n            value: getCurrentValue()\n        }));\n    let valueToReturn = state.value;\n    if (state.getCurrentValue !== getCurrentValue || state.subscribe !== subscribe) {\n        valueToReturn = getCurrentValue();\n        setState({\n            getCurrentValue,\n            subscribe,\n            value: valueToReturn\n        });\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let didUnsubscribe = false;\n        const checkForUpdates = ()=>{\n            if (didUnsubscribe) {\n                return;\n            }\n            setState((prevState)=>{\n                if (prevState.getCurrentValue !== getCurrentValue || prevState.subscribe !== subscribe) {\n                    return prevState;\n                }\n                const value = getCurrentValue();\n                if (prevState.value === value) {\n                    return prevState;\n                }\n                return {\n                    ...prevState,\n                    value\n                };\n            });\n        };\n        const unsubscribe = subscribe(checkForUpdates);\n        checkForUpdates();\n        return ()=>{\n            didUnsubscribe = true;\n            unsubscribe();\n        };\n    }, [\n        getCurrentValue,\n        subscribe\n    ]);\n    return valueToReturn;\n} //# sourceMappingURL=use_subscription.js.map\n_s(useSubscription, \"Dtm03pS3jKGb5Mj0EFZUcLolbbI=\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vcmVhY3QvdXNlX3N1YnNjcmlwdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUM0QztBQUNyQyxTQUFTRSxnQkFBZ0IsS0FNL0I7UUFOK0IsRUFDOUIsaUVBQWlFO0lBQ2pFQyxlQUFlLEVBQ2YsMEVBQTBFO0lBQzFFLHFFQUFxRTtJQUNyRUMsU0FBUyxFQUNWLEdBTitCOztJQU85QixNQUFNLENBQUNDLE9BQU9DLFNBQVMsR0FBR0wsK0NBQVFBLENBQUMsSUFBTztZQUN4Q0U7WUFDQUM7WUFDQUcsT0FBT0o7UUFDVDtJQUNBLElBQUlLLGdCQUFnQkgsTUFBTUUsS0FBSztJQUMvQixJQUFJRixNQUFNRixlQUFlLEtBQUtBLG1CQUFtQkUsTUFBTUQsU0FBUyxLQUFLQSxXQUFXO1FBQzlFSSxnQkFBZ0JMO1FBQ2hCRyxTQUFTO1lBQ1BIO1lBQ0FDO1lBQ0FHLE9BQU9DO1FBQ1Q7SUFDRjtJQUNBUixnREFBU0EsQ0FBQztRQUNSLElBQUlTLGlCQUFpQjtRQUNyQixNQUFNQyxrQkFBa0I7WUFDdEIsSUFBSUQsZ0JBQWdCO2dCQUNsQjtZQUNGO1lBQ0FILFNBQVMsQ0FBQ0s7Z0JBQ1IsSUFBSUEsVUFBVVIsZUFBZSxLQUFLQSxtQkFBbUJRLFVBQVVQLFNBQVMsS0FBS0EsV0FBVztvQkFDdEYsT0FBT087Z0JBQ1Q7Z0JBQ0EsTUFBTUosUUFBUUo7Z0JBQ2QsSUFBSVEsVUFBVUosS0FBSyxLQUFLQSxPQUFPO29CQUM3QixPQUFPSTtnQkFDVDtnQkFDQSxPQUFPO29CQUFFLEdBQUdBLFNBQVM7b0JBQUVKO2dCQUFNO1lBQy9CO1FBQ0Y7UUFDQSxNQUFNSyxjQUFjUixVQUFVTTtRQUM5QkE7UUFDQSxPQUFPO1lBQ0xELGlCQUFpQjtZQUNqQkc7UUFDRjtJQUNGLEdBQUc7UUFBQ1Q7UUFBaUJDO0tBQVU7SUFDL0IsT0FBT0k7QUFDVCxFQUNBLDRDQUE0QztHQS9DNUJOIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vcmVhY3QvdXNlX3N1YnNjcmlwdGlvbi5qcz85ZmQ1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVN1YnNjcmlwdGlvbih7XG4gIC8vIChTeW5jaHJvbm91c2x5KSByZXR1cm5zIHRoZSBjdXJyZW50IHZhbHVlIG9mIG91ciBzdWJzY3JpcHRpb24uXG4gIGdldEN1cnJlbnRWYWx1ZSxcbiAgLy8gVGhpcyBmdW5jdGlvbiBpcyBwYXNzZWQgYW4gZXZlbnQgaGFuZGxlciB0byBhdHRhY2ggdG8gdGhlIHN1YnNjcmlwdGlvbi5cbiAgLy8gSXQgc2hvdWxkIHJldHVybiBhbiB1bnN1YnNjcmliZSBmdW5jdGlvbiB0aGF0IHJlbW92ZXMgdGhlIGhhbmRsZXIuXG4gIHN1YnNjcmliZVxufSkge1xuICBjb25zdCBbc3RhdGUsIHNldFN0YXRlXSA9IHVzZVN0YXRlKCgpID0+ICh7XG4gICAgZ2V0Q3VycmVudFZhbHVlLFxuICAgIHN1YnNjcmliZSxcbiAgICB2YWx1ZTogZ2V0Q3VycmVudFZhbHVlKClcbiAgfSkpO1xuICBsZXQgdmFsdWVUb1JldHVybiA9IHN0YXRlLnZhbHVlO1xuICBpZiAoc3RhdGUuZ2V0Q3VycmVudFZhbHVlICE9PSBnZXRDdXJyZW50VmFsdWUgfHwgc3RhdGUuc3Vic2NyaWJlICE9PSBzdWJzY3JpYmUpIHtcbiAgICB2YWx1ZVRvUmV0dXJuID0gZ2V0Q3VycmVudFZhbHVlKCk7XG4gICAgc2V0U3RhdGUoe1xuICAgICAgZ2V0Q3VycmVudFZhbHVlLFxuICAgICAgc3Vic2NyaWJlLFxuICAgICAgdmFsdWU6IHZhbHVlVG9SZXR1cm5cbiAgICB9KTtcbiAgfVxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGxldCBkaWRVbnN1YnNjcmliZSA9IGZhbHNlO1xuICAgIGNvbnN0IGNoZWNrRm9yVXBkYXRlcyA9ICgpID0+IHtcbiAgICAgIGlmIChkaWRVbnN1YnNjcmliZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBzZXRTdGF0ZSgocHJldlN0YXRlKSA9PiB7XG4gICAgICAgIGlmIChwcmV2U3RhdGUuZ2V0Q3VycmVudFZhbHVlICE9PSBnZXRDdXJyZW50VmFsdWUgfHwgcHJldlN0YXRlLnN1YnNjcmliZSAhPT0gc3Vic2NyaWJlKSB7XG4gICAgICAgICAgcmV0dXJuIHByZXZTdGF0ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB2YWx1ZSA9IGdldEN1cnJlbnRWYWx1ZSgpO1xuICAgICAgICBpZiAocHJldlN0YXRlLnZhbHVlID09PSB2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBwcmV2U3RhdGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgLi4ucHJldlN0YXRlLCB2YWx1ZSB9O1xuICAgICAgfSk7XG4gICAgfTtcbiAgICBjb25zdCB1bnN1YnNjcmliZSA9IHN1YnNjcmliZShjaGVja0ZvclVwZGF0ZXMpO1xuICAgIGNoZWNrRm9yVXBkYXRlcygpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBkaWRVbnN1YnNjcmliZSA9IHRydWU7XG4gICAgICB1bnN1YnNjcmliZSgpO1xuICAgIH07XG4gIH0sIFtnZXRDdXJyZW50VmFsdWUsIHN1YnNjcmliZV0pO1xuICByZXR1cm4gdmFsdWVUb1JldHVybjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZV9zdWJzY3JpcHRpb24uanMubWFwXG4iXSwibmFtZXMiOlsidXNlRWZmZWN0IiwidXNlU3RhdGUiLCJ1c2VTdWJzY3JpcHRpb24iLCJnZXRDdXJyZW50VmFsdWUiLCJzdWJzY3JpYmUiLCJzdGF0ZSIsInNldFN0YXRlIiwidmFsdWUiLCJ2YWx1ZVRvUmV0dXJuIiwiZGlkVW5zdWJzY3JpYmUiLCJjaGVja0ZvclVwZGF0ZXMiLCJwcmV2U3RhdGUiLCJ1bnN1YnNjcmliZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/react/use_subscription.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/server/api.js":
/*!****************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/api.js ***!
  \****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   anyApi: function() { return /* binding */ anyApi; },\n/* harmony export */   filterApi: function() { return /* binding */ filterApi; },\n/* harmony export */   getFunctionName: function() { return /* binding */ getFunctionName; },\n/* harmony export */   justActions: function() { return /* binding */ justActions; },\n/* harmony export */   justInternal: function() { return /* binding */ justInternal; },\n/* harmony export */   justMutations: function() { return /* binding */ justMutations; },\n/* harmony export */   justPaginatedQueries: function() { return /* binding */ justPaginatedQueries; },\n/* harmony export */   justPublic: function() { return /* binding */ justPublic; },\n/* harmony export */   justQueries: function() { return /* binding */ justQueries; },\n/* harmony export */   justSchedulable: function() { return /* binding */ justSchedulable; },\n/* harmony export */   makeFunctionReference: function() { return /* binding */ makeFunctionReference; }\n/* harmony export */ });\n\nconst functionName = Symbol.for(\"functionName\");\nfunction getFunctionName(functionReference) {\n    if (typeof functionReference === \"string\") return functionReference;\n    const name = functionReference[functionName];\n    if (!name) {\n        throw new Error(\"\".concat(functionReference, \" is not a functionReference\"));\n    }\n    return name;\n}\nfunction makeFunctionReference(name) {\n    return {\n        [functionName]: name\n    };\n}\nfunction createApi() {\n    let pathParts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];\n    const handler = {\n        get (_, prop) {\n            if (typeof prop === \"string\") {\n                const newParts = [\n                    ...pathParts,\n                    prop\n                ];\n                return createApi(newParts);\n            } else if (prop === functionName) {\n                if (pathParts.length < 2) {\n                    const found = [\n                        \"api\",\n                        ...pathParts\n                    ].join(\".\");\n                    throw new Error(\"API path is expected to be of the form `api.moduleName.functionName`. Found: `\".concat(found, \"`\"));\n                }\n                const path = pathParts.slice(0, -1).join(\"/\");\n                const exportName = pathParts[pathParts.length - 1];\n                if (exportName === \"default\") {\n                    return path;\n                } else {\n                    return path + \":\" + exportName;\n                }\n            } else if (prop === Symbol.toStringTag) {\n                return \"FunctionReference\";\n            } else {\n                return void 0;\n            }\n        }\n    };\n    return new Proxy({}, handler);\n}\nfunction filterApi(api) {\n    return api;\n}\nfunction justInternal(api) {\n    return api;\n}\nfunction justPublic(api) {\n    return api;\n}\nfunction justQueries(api) {\n    return api;\n}\nfunction justMutations(api) {\n    return api;\n}\nfunction justActions(api) {\n    return api;\n}\nfunction justPaginatedQueries(api) {\n    return api;\n}\nfunction justSchedulable(api) {\n    return api;\n}\nconst anyApi = createApi(); //# sourceMappingURL=api.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vc2VydmVyL2FwaS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFhO0FBQ2IsTUFBTUEsZUFBZUMsT0FBT0MsR0FBRyxDQUFDO0FBQ3pCLFNBQVNDLGdCQUFnQkMsaUJBQWlCO0lBQy9DLElBQUksT0FBT0Esc0JBQXNCLFVBQy9CLE9BQU9BO0lBQ1QsTUFBTUMsT0FBT0QsaUJBQWlCLENBQUNKLGFBQWE7SUFDNUMsSUFBSSxDQUFDSyxNQUFNO1FBQ1QsTUFBTSxJQUFJQyxNQUFNLEdBQXFCLE9BQWxCRixtQkFBa0I7SUFDdkM7SUFDQSxPQUFPQztBQUNUO0FBQ08sU0FBU0Usc0JBQXNCRixJQUFJO0lBQ3hDLE9BQU87UUFBRSxDQUFDTCxhQUFhLEVBQUVLO0lBQUs7QUFDaEM7QUFDQSxTQUFTRztRQUFVQyxZQUFBQSxpRUFBWSxFQUFFO0lBQy9CLE1BQU1DLFVBQVU7UUFDZEMsS0FBSUMsQ0FBQyxFQUFFQyxJQUFJO1lBQ1QsSUFBSSxPQUFPQSxTQUFTLFVBQVU7Z0JBQzVCLE1BQU1DLFdBQVc7dUJBQUlMO29CQUFXSTtpQkFBSztnQkFDckMsT0FBT0wsVUFBVU07WUFDbkIsT0FBTyxJQUFJRCxTQUFTYixjQUFjO2dCQUNoQyxJQUFJUyxVQUFVTSxNQUFNLEdBQUcsR0FBRztvQkFDeEIsTUFBTUMsUUFBUTt3QkFBQzsyQkFBVVA7cUJBQVUsQ0FBQ1EsSUFBSSxDQUFDO29CQUN6QyxNQUFNLElBQUlYLE1BQ1IsaUZBQTBGLE9BQU5VLE9BQU07Z0JBRTlGO2dCQUNBLE1BQU1FLE9BQU9ULFVBQVVVLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBR0YsSUFBSSxDQUFDO2dCQUN6QyxNQUFNRyxhQUFhWCxTQUFTLENBQUNBLFVBQVVNLE1BQU0sR0FBRyxFQUFFO2dCQUNsRCxJQUFJSyxlQUFlLFdBQVc7b0JBQzVCLE9BQU9GO2dCQUNULE9BQU87b0JBQ0wsT0FBT0EsT0FBTyxNQUFNRTtnQkFDdEI7WUFDRixPQUFPLElBQUlQLFNBQVNaLE9BQU9vQixXQUFXLEVBQUU7Z0JBQ3RDLE9BQU87WUFDVCxPQUFPO2dCQUNMLE9BQU8sS0FBSztZQUNkO1FBQ0Y7SUFDRjtJQUNBLE9BQU8sSUFBSUMsTUFBTSxDQUFDLEdBQUdaO0FBQ3ZCO0FBQ08sU0FBU2EsVUFBVUMsR0FBRztJQUMzQixPQUFPQTtBQUNUO0FBQ08sU0FBU0MsYUFBYUQsR0FBRztJQUM5QixPQUFPQTtBQUNUO0FBQ08sU0FBU0UsV0FBV0YsR0FBRztJQUM1QixPQUFPQTtBQUNUO0FBQ08sU0FBU0csWUFBWUgsR0FBRztJQUM3QixPQUFPQTtBQUNUO0FBQ08sU0FBU0ksY0FBY0osR0FBRztJQUMvQixPQUFPQTtBQUNUO0FBQ08sU0FBU0ssWUFBWUwsR0FBRztJQUM3QixPQUFPQTtBQUNUO0FBQ08sU0FBU00scUJBQXFCTixHQUFHO0lBQ3RDLE9BQU9BO0FBQ1Q7QUFDTyxTQUFTTyxnQkFBZ0JQLEdBQUc7SUFDakMsT0FBT0E7QUFDVDtBQUNPLE1BQU1RLFNBQVN4QixZQUFZLENBQ2xDLCtCQUErQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3NlcnZlci9hcGkuanM/NmMxYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IGZ1bmN0aW9uTmFtZSA9IFN5bWJvbC5mb3IoXCJmdW5jdGlvbk5hbWVcIik7XG5leHBvcnQgZnVuY3Rpb24gZ2V0RnVuY3Rpb25OYW1lKGZ1bmN0aW9uUmVmZXJlbmNlKSB7XG4gIGlmICh0eXBlb2YgZnVuY3Rpb25SZWZlcmVuY2UgPT09IFwic3RyaW5nXCIpXG4gICAgcmV0dXJuIGZ1bmN0aW9uUmVmZXJlbmNlO1xuICBjb25zdCBuYW1lID0gZnVuY3Rpb25SZWZlcmVuY2VbZnVuY3Rpb25OYW1lXTtcbiAgaWYgKCFuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGAke2Z1bmN0aW9uUmVmZXJlbmNlfSBpcyBub3QgYSBmdW5jdGlvblJlZmVyZW5jZWApO1xuICB9XG4gIHJldHVybiBuYW1lO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VGdW5jdGlvblJlZmVyZW5jZShuYW1lKSB7XG4gIHJldHVybiB7IFtmdW5jdGlvbk5hbWVdOiBuYW1lIH07XG59XG5mdW5jdGlvbiBjcmVhdGVBcGkocGF0aFBhcnRzID0gW10pIHtcbiAgY29uc3QgaGFuZGxlciA9IHtcbiAgICBnZXQoXywgcHJvcCkge1xuICAgICAgaWYgKHR5cGVvZiBwcm9wID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGNvbnN0IG5ld1BhcnRzID0gWy4uLnBhdGhQYXJ0cywgcHJvcF07XG4gICAgICAgIHJldHVybiBjcmVhdGVBcGkobmV3UGFydHMpO1xuICAgICAgfSBlbHNlIGlmIChwcm9wID09PSBmdW5jdGlvbk5hbWUpIHtcbiAgICAgICAgaWYgKHBhdGhQYXJ0cy5sZW5ndGggPCAyKSB7XG4gICAgICAgICAgY29uc3QgZm91bmQgPSBbXCJhcGlcIiwgLi4ucGF0aFBhcnRzXS5qb2luKFwiLlwiKTtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICBgQVBJIHBhdGggaXMgZXhwZWN0ZWQgdG8gYmUgb2YgdGhlIGZvcm0gXFxgYXBpLm1vZHVsZU5hbWUuZnVuY3Rpb25OYW1lXFxgLiBGb3VuZDogXFxgJHtmb3VuZH1cXGBgXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYXRoID0gcGF0aFBhcnRzLnNsaWNlKDAsIC0xKS5qb2luKFwiL1wiKTtcbiAgICAgICAgY29uc3QgZXhwb3J0TmFtZSA9IHBhdGhQYXJ0c1twYXRoUGFydHMubGVuZ3RoIC0gMV07XG4gICAgICAgIGlmIChleHBvcnROYW1lID09PSBcImRlZmF1bHRcIikge1xuICAgICAgICAgIHJldHVybiBwYXRoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBwYXRoICsgXCI6XCIgKyBleHBvcnROYW1lO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHByb3AgPT09IFN5bWJvbC50b1N0cmluZ1RhZykge1xuICAgICAgICByZXR1cm4gXCJGdW5jdGlvblJlZmVyZW5jZVwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHJldHVybiBuZXcgUHJveHkoe30sIGhhbmRsZXIpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZpbHRlckFwaShhcGkpIHtcbiAgcmV0dXJuIGFwaTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBqdXN0SW50ZXJuYWwoYXBpKSB7XG4gIHJldHVybiBhcGk7XG59XG5leHBvcnQgZnVuY3Rpb24ganVzdFB1YmxpYyhhcGkpIHtcbiAgcmV0dXJuIGFwaTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBqdXN0UXVlcmllcyhhcGkpIHtcbiAgcmV0dXJuIGFwaTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBqdXN0TXV0YXRpb25zKGFwaSkge1xuICByZXR1cm4gYXBpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGp1c3RBY3Rpb25zKGFwaSkge1xuICByZXR1cm4gYXBpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGp1c3RQYWdpbmF0ZWRRdWVyaWVzKGFwaSkge1xuICByZXR1cm4gYXBpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGp1c3RTY2hlZHVsYWJsZShhcGkpIHtcbiAgcmV0dXJuIGFwaTtcbn1cbmV4cG9ydCBjb25zdCBhbnlBcGkgPSBjcmVhdGVBcGkoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwaS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJmdW5jdGlvbk5hbWUiLCJTeW1ib2wiLCJmb3IiLCJnZXRGdW5jdGlvbk5hbWUiLCJmdW5jdGlvblJlZmVyZW5jZSIsIm5hbWUiLCJFcnJvciIsIm1ha2VGdW5jdGlvblJlZmVyZW5jZSIsImNyZWF0ZUFwaSIsInBhdGhQYXJ0cyIsImhhbmRsZXIiLCJnZXQiLCJfIiwicHJvcCIsIm5ld1BhcnRzIiwibGVuZ3RoIiwiZm91bmQiLCJqb2luIiwicGF0aCIsInNsaWNlIiwiZXhwb3J0TmFtZSIsInRvU3RyaW5nVGFnIiwiUHJveHkiLCJmaWx0ZXJBcGkiLCJhcGkiLCJqdXN0SW50ZXJuYWwiLCJqdXN0UHVibGljIiwianVzdFF1ZXJpZXMiLCJqdXN0TXV0YXRpb25zIiwianVzdEFjdGlvbnMiLCJqdXN0UGFnaW5hdGVkUXVlcmllcyIsImp1c3RTY2hlZHVsYWJsZSIsImFueUFwaSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/server/api.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/values/base64.js":
/*!*******************************************************!*\
  !*** ./node_modules/convex/dist/esm/values/base64.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   byteLength: function() { return /* binding */ byteLength; },\n/* harmony export */   fromByteArray: function() { return /* binding */ fromByteArray; },\n/* harmony export */   toByteArray: function() { return /* binding */ toByteArray; }\n/* harmony export */ });\n\nvar lookup = [];\nvar revLookup = [];\nvar Arr = Uint8Array;\nvar code = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nfor(var i = 0, len = code.length; i < len; ++i){\n    lookup[i] = code[i];\n    revLookup[code.charCodeAt(i)] = i;\n}\nrevLookup[\"-\".charCodeAt(0)] = 62;\nrevLookup[\"_\".charCodeAt(0)] = 63;\nfunction getLens(b64) {\n    var len = b64.length;\n    if (len % 4 > 0) {\n        throw new Error(\"Invalid string. Length must be a multiple of 4\");\n    }\n    var validLen = b64.indexOf(\"=\");\n    if (validLen === -1) validLen = len;\n    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;\n    return [\n        validLen,\n        placeHoldersLen\n    ];\n}\nfunction byteLength(b64) {\n    var lens = getLens(b64);\n    var validLen = lens[0];\n    var placeHoldersLen = lens[1];\n    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n}\nfunction _byteLength(_b64, validLen, placeHoldersLen) {\n    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n}\nfunction toByteArray(b64) {\n    var tmp;\n    var lens = getLens(b64);\n    var validLen = lens[0];\n    var placeHoldersLen = lens[1];\n    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));\n    var curByte = 0;\n    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;\n    var i;\n    for(i = 0; i < len; i += 4){\n        tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];\n        arr[curByte++] = tmp >> 16 & 255;\n        arr[curByte++] = tmp >> 8 & 255;\n        arr[curByte++] = tmp & 255;\n    }\n    if (placeHoldersLen === 2) {\n        tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;\n        arr[curByte++] = tmp & 255;\n    }\n    if (placeHoldersLen === 1) {\n        tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;\n        arr[curByte++] = tmp >> 8 & 255;\n        arr[curByte++] = tmp & 255;\n    }\n    return arr;\n}\nfunction tripletToBase64(num) {\n    return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];\n}\nfunction encodeChunk(uint8, start, end) {\n    var tmp;\n    var output = [];\n    for(var i = start; i < end; i += 3){\n        tmp = (uint8[i] << 16 & 16711680) + (uint8[i + 1] << 8 & 65280) + (uint8[i + 2] & 255);\n        output.push(tripletToBase64(tmp));\n    }\n    return output.join(\"\");\n}\nfunction fromByteArray(uint8) {\n    var tmp;\n    var len = uint8.length;\n    var extraBytes = len % 3;\n    var parts = [];\n    var maxChunkLength = 16383;\n    for(var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength){\n        parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));\n    }\n    if (extraBytes === 1) {\n        tmp = uint8[len - 1];\n        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 63] + \"==\");\n    } else if (extraBytes === 2) {\n        tmp = (uint8[len - 2] << 8) + uint8[len - 1];\n        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + \"=\");\n    }\n    return parts.join(\"\");\n} //# sourceMappingURL=base64.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/values/base64.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/values/errors.js":
/*!*******************************************************!*\
  !*** ./node_modules/convex/dist/esm/values/errors.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConvexError: function() { return /* binding */ ConvexError; }\n/* harmony export */ });\n/* harmony import */ var _value_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./value.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/values/value.js\");\n\nvar _a;\n\nconst IDENTIFYING_FIELD = Symbol.for(\"ConvexError\");\nclass ConvexError extends Error {\n    constructor(data){\n        super(typeof data === \"string\" ? data : (0,_value_js__WEBPACK_IMPORTED_MODULE_0__.stringifyValueForError)(data));\n        this.name = \"ConvexError\";\n        this[_a] = true;\n        this.data = data;\n    }\n}\n_a = IDENTIFYING_FIELD; //# sourceMappingURL=errors.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vdmFsdWVzL2Vycm9ycy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFhO0FBQ2IsSUFBSUE7QUFDZ0Q7QUFDcEQsTUFBTUUsb0JBQW9CQyxPQUFPQyxHQUFHLENBQUM7QUFDOUIsTUFBTUMsb0JBQW9CQztJQUMvQkMsWUFBWUMsSUFBSSxDQUFFO1FBQ2hCLEtBQUssQ0FBQyxPQUFPQSxTQUFTLFdBQVdBLE9BQU9QLGlFQUFzQkEsQ0FBQ087UUFDL0QsSUFBSSxDQUFDQyxJQUFJLEdBQUc7UUFDWixJQUFJLENBQUNULEdBQUcsR0FBRztRQUNYLElBQUksQ0FBQ1EsSUFBSSxHQUFHQTtJQUNkO0FBQ0Y7QUFDQVIsS0FBS0UsbUJBQ0wsa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vdmFsdWVzL2Vycm9ycy5qcz81OWQ4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9hO1xuaW1wb3J0IHsgc3RyaW5naWZ5VmFsdWVGb3JFcnJvciB9IGZyb20gXCIuL3ZhbHVlLmpzXCI7XG5jb25zdCBJREVOVElGWUlOR19GSUVMRCA9IFN5bWJvbC5mb3IoXCJDb252ZXhFcnJvclwiKTtcbmV4cG9ydCBjbGFzcyBDb252ZXhFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IoZGF0YSkge1xuICAgIHN1cGVyKHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiID8gZGF0YSA6IHN0cmluZ2lmeVZhbHVlRm9yRXJyb3IoZGF0YSkpO1xuICAgIHRoaXMubmFtZSA9IFwiQ29udmV4RXJyb3JcIjtcbiAgICB0aGlzW19hXSA9IHRydWU7XG4gICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgfVxufVxuX2EgPSBJREVOVElGWUlOR19GSUVMRDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9ycy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJfYSIsInN0cmluZ2lmeVZhbHVlRm9yRXJyb3IiLCJJREVOVElGWUlOR19GSUVMRCIsIlN5bWJvbCIsImZvciIsIkNvbnZleEVycm9yIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsImRhdGEiLCJuYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/values/errors.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/values/index.js":
/*!******************************************************!*\
  !*** ./node_modules/convex/dist/esm/values/index.js ***!
  \******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Base64: function() { return /* reexport module object */ _base64_js__WEBPACK_IMPORTED_MODULE_2__; },\n/* harmony export */   ConvexError: function() { return /* reexport safe */ _errors_js__WEBPACK_IMPORTED_MODULE_3__.ConvexError; },\n/* harmony export */   Validator: function() { return /* reexport safe */ _validator_js__WEBPACK_IMPORTED_MODULE_1__.Validator; },\n/* harmony export */   convexToJson: function() { return /* reexport safe */ _value_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson; },\n/* harmony export */   jsonToConvex: function() { return /* reexport safe */ _value_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex; },\n/* harmony export */   v: function() { return /* reexport safe */ _validator_js__WEBPACK_IMPORTED_MODULE_1__.v; }\n/* harmony export */ });\n/* harmony import */ var _value_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./value.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/values/value.js\");\n/* harmony import */ var _validator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./validator.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/values/validator.js\");\n/* harmony import */ var _base64_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./base64.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/values/base64.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./errors.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/values/errors.js\");\n\n\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vdmFsdWVzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBYTtBQUMyQztBQUNWO0FBQ1I7QUFDcEI7QUFDVSxDQUM1QixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2NvbnZleC9kaXN0L2VzbS92YWx1ZXMvaW5kZXguanM/NDA1MiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmV4cG9ydCB7IGNvbnZleFRvSnNvbiwganNvblRvQ29udmV4IH0gZnJvbSBcIi4vdmFsdWUuanNcIjtcbmV4cG9ydCB7IHYsIFZhbGlkYXRvciB9IGZyb20gXCIuL3ZhbGlkYXRvci5qc1wiO1xuaW1wb3J0ICogYXMgQmFzZTY0IGZyb20gXCIuL2Jhc2U2NC5qc1wiO1xuZXhwb3J0IHsgQmFzZTY0IH07XG5leHBvcnQgKiBmcm9tIFwiLi9lcnJvcnMuanNcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbImNvbnZleFRvSnNvbiIsImpzb25Ub0NvbnZleCIsInYiLCJWYWxpZGF0b3IiLCJCYXNlNjQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/values/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/values/validator.js":
/*!**********************************************************!*\
  !*** ./node_modules/convex/dist/esm/values/validator.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Validator: function() { return /* binding */ Validator; },\n/* harmony export */   v: function() { return /* binding */ v; }\n/* harmony export */ });\n/* harmony import */ var _value_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./value.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/values/value.js\");\n\n\nclass Validator {\n    /**\n   * @internal\n   */ constructor(json, optional){\n        this.json = json;\n        this.optional = optional;\n    }\n}\nconst v = {\n    id (tableName) {\n        return new Validator({\n            type: \"id\",\n            tableName\n        }, false);\n    },\n    null () {\n        return new Validator({\n            type: \"null\"\n        }, false);\n    },\n    /**\n   * Alias for `v.float64()`\n   */ number () {\n        return new Validator({\n            type: \"number\"\n        }, false);\n    },\n    float64 () {\n        return new Validator({\n            type: \"number\"\n        }, false);\n    },\n    /**\n   * @deprecated Use `v.int64()` instead\n   */ bigint () {\n        return new Validator({\n            type: \"bigint\"\n        }, false);\n    },\n    int64 () {\n        return new Validator({\n            type: \"bigint\"\n        }, false);\n    },\n    boolean () {\n        return new Validator({\n            type: \"boolean\"\n        }, false);\n    },\n    string () {\n        return new Validator({\n            type: \"string\"\n        }, false);\n    },\n    bytes () {\n        return new Validator({\n            type: \"bytes\"\n        }, false);\n    },\n    literal (literal) {\n        const value = (0,_value_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(literal);\n        return new Validator({\n            type: \"literal\",\n            value\n        }, false);\n    },\n    array (values) {\n        return new Validator({\n            type: \"array\",\n            value: values.json\n        }, false);\n    },\n    object (schema) {\n        return new Validator({\n            type: \"object\",\n            value: Object.fromEntries(Object.entries(schema).map((param)=>{\n                let [k, v2] = param;\n                return [\n                    k,\n                    {\n                        fieldType: v2.json,\n                        optional: v2.optional\n                    }\n                ];\n            }))\n        }, false);\n    },\n    /** @internal */ record (keys, values) {\n        return new Validator({\n            type: \"record\",\n            keys: keys.json,\n            values: {\n                fieldType: values.json,\n                optional: values.optional\n            }\n        }, false);\n    },\n    union () {\n        for(var _len = arguments.length, schemaTypes = new Array(_len), _key = 0; _key < _len; _key++){\n            schemaTypes[_key] = arguments[_key];\n        }\n        return new Validator({\n            type: \"union\",\n            value: schemaTypes.map((t)=>t.json)\n        }, false);\n    },\n    any () {\n        return new Validator({\n            type: \"any\"\n        }, false);\n    },\n    optional (inner) {\n        return new Validator(inner.json, true);\n    }\n}; //# sourceMappingURL=validator.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vdmFsdWVzL3ZhbGlkYXRvci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBYTtBQUM2QjtBQUNuQyxNQUFNQztJQUNYOztHQUVDLEdBQ0RDLFlBQVlDLElBQUksRUFBRUMsUUFBUSxDQUFFO1FBQzFCLElBQUksQ0FBQ0QsSUFBSSxHQUFHQTtRQUNaLElBQUksQ0FBQ0MsUUFBUSxHQUFHQTtJQUNsQjtBQUNGO0FBQ08sTUFBTUMsSUFBSTtJQUNmQyxJQUFHQyxTQUFTO1FBQ1YsT0FBTyxJQUFJTixVQUFVO1lBQUVPLE1BQU07WUFBTUQ7UUFBVSxHQUFHO0lBQ2xEO0lBQ0FFO1FBQ0UsT0FBTyxJQUFJUixVQUFVO1lBQUVPLE1BQU07UUFBTyxHQUFHO0lBQ3pDO0lBQ0E7O0dBRUMsR0FDREU7UUFDRSxPQUFPLElBQUlULFVBQVU7WUFBRU8sTUFBTTtRQUFTLEdBQUc7SUFDM0M7SUFDQUc7UUFDRSxPQUFPLElBQUlWLFVBQVU7WUFBRU8sTUFBTTtRQUFTLEdBQUc7SUFDM0M7SUFDQTs7R0FFQyxHQUNESTtRQUNFLE9BQU8sSUFBSVgsVUFBVTtZQUFFTyxNQUFNO1FBQVMsR0FBRztJQUMzQztJQUNBSztRQUNFLE9BQU8sSUFBSVosVUFBVTtZQUFFTyxNQUFNO1FBQVMsR0FBRztJQUMzQztJQUNBTTtRQUNFLE9BQU8sSUFBSWIsVUFBVTtZQUFFTyxNQUFNO1FBQVUsR0FBRztJQUM1QztJQUNBTztRQUNFLE9BQU8sSUFBSWQsVUFBVTtZQUFFTyxNQUFNO1FBQVMsR0FBRztJQUMzQztJQUNBUTtRQUNFLE9BQU8sSUFBSWYsVUFBVTtZQUFFTyxNQUFNO1FBQVEsR0FBRztJQUMxQztJQUNBUyxTQUFRQSxPQUFPO1FBQ2IsTUFBTUMsUUFBUWxCLHVEQUFZQSxDQUFDaUI7UUFDM0IsT0FBTyxJQUFJaEIsVUFBVTtZQUFFTyxNQUFNO1lBQVdVO1FBQU0sR0FBRztJQUNuRDtJQUNBQyxPQUFNQyxNQUFNO1FBQ1YsT0FBTyxJQUFJbkIsVUFBVTtZQUFFTyxNQUFNO1lBQVNVLE9BQU9FLE9BQU9qQixJQUFJO1FBQUMsR0FBRztJQUM5RDtJQUNBa0IsUUFBT0MsTUFBTTtRQUNYLE9BQU8sSUFBSXJCLFVBQ1Q7WUFDRU8sTUFBTTtZQUNOVSxPQUFPSyxPQUFPQyxXQUFXLENBQ3ZCRCxPQUFPRSxPQUFPLENBQUNILFFBQVFJLEdBQUcsQ0FBQztvQkFBQyxDQUFDQyxHQUFHQyxHQUFHO3VCQUFLO29CQUN0Q0Q7b0JBQ0E7d0JBQUVFLFdBQVdELEdBQUd6QixJQUFJO3dCQUFFQyxVQUFVd0IsR0FBR3hCLFFBQVE7b0JBQUM7aUJBQzdDOztRQUVMLEdBQ0E7SUFFSjtJQUNBLGNBQWMsR0FDZDBCLFFBQU9DLElBQUksRUFBRVgsTUFBTTtRQUNqQixPQUFPLElBQUluQixVQUNUO1lBQ0VPLE1BQU07WUFDTnVCLE1BQU1BLEtBQUs1QixJQUFJO1lBQ2ZpQixRQUFRO2dCQUFFUyxXQUFXVCxPQUFPakIsSUFBSTtnQkFBRUMsVUFBVWdCLE9BQU9oQixRQUFRO1lBQUM7UUFDOUQsR0FDQTtJQUVKO0lBQ0E0QjtRQUFNO1lBQUdDLFlBQUgsdUJBQWM7O1FBQ2xCLE9BQU8sSUFBSWhDLFVBQ1Q7WUFDRU8sTUFBTTtZQUNOVSxPQUFPZSxZQUFZUCxHQUFHLENBQUMsQ0FBQ1EsSUFBTUEsRUFBRS9CLElBQUk7UUFDdEMsR0FDQTtJQUVKO0lBQ0FnQztRQUNFLE9BQU8sSUFBSWxDLFVBQVU7WUFBRU8sTUFBTTtRQUFNLEdBQUc7SUFDeEM7SUFDQUosVUFBU2dDLEtBQUs7UUFDWixPQUFPLElBQUluQyxVQUFVbUMsTUFBTWpDLElBQUksRUFBRTtJQUNuQztBQUNGLEVBQUUsQ0FDRixxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2NvbnZleC9kaXN0L2VzbS92YWx1ZXMvdmFsaWRhdG9yLmpzP2Q1OTkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5pbXBvcnQgeyBjb252ZXhUb0pzb24gfSBmcm9tIFwiLi92YWx1ZS5qc1wiO1xuZXhwb3J0IGNsYXNzIFZhbGlkYXRvciB7XG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGNvbnN0cnVjdG9yKGpzb24sIG9wdGlvbmFsKSB7XG4gICAgdGhpcy5qc29uID0ganNvbjtcbiAgICB0aGlzLm9wdGlvbmFsID0gb3B0aW9uYWw7XG4gIH1cbn1cbmV4cG9ydCBjb25zdCB2ID0ge1xuICBpZCh0YWJsZU5hbWUpIHtcbiAgICByZXR1cm4gbmV3IFZhbGlkYXRvcih7IHR5cGU6IFwiaWRcIiwgdGFibGVOYW1lIH0sIGZhbHNlKTtcbiAgfSxcbiAgbnVsbCgpIHtcbiAgICByZXR1cm4gbmV3IFZhbGlkYXRvcih7IHR5cGU6IFwibnVsbFwiIH0sIGZhbHNlKTtcbiAgfSxcbiAgLyoqXG4gICAqIEFsaWFzIGZvciBgdi5mbG9hdDY0KClgXG4gICAqL1xuICBudW1iZXIoKSB7XG4gICAgcmV0dXJuIG5ldyBWYWxpZGF0b3IoeyB0eXBlOiBcIm51bWJlclwiIH0sIGZhbHNlKTtcbiAgfSxcbiAgZmxvYXQ2NCgpIHtcbiAgICByZXR1cm4gbmV3IFZhbGlkYXRvcih7IHR5cGU6IFwibnVtYmVyXCIgfSwgZmFsc2UpO1xuICB9LFxuICAvKipcbiAgICogQGRlcHJlY2F0ZWQgVXNlIGB2LmludDY0KClgIGluc3RlYWRcbiAgICovXG4gIGJpZ2ludCgpIHtcbiAgICByZXR1cm4gbmV3IFZhbGlkYXRvcih7IHR5cGU6IFwiYmlnaW50XCIgfSwgZmFsc2UpO1xuICB9LFxuICBpbnQ2NCgpIHtcbiAgICByZXR1cm4gbmV3IFZhbGlkYXRvcih7IHR5cGU6IFwiYmlnaW50XCIgfSwgZmFsc2UpO1xuICB9LFxuICBib29sZWFuKCkge1xuICAgIHJldHVybiBuZXcgVmFsaWRhdG9yKHsgdHlwZTogXCJib29sZWFuXCIgfSwgZmFsc2UpO1xuICB9LFxuICBzdHJpbmcoKSB7XG4gICAgcmV0dXJuIG5ldyBWYWxpZGF0b3IoeyB0eXBlOiBcInN0cmluZ1wiIH0sIGZhbHNlKTtcbiAgfSxcbiAgYnl0ZXMoKSB7XG4gICAgcmV0dXJuIG5ldyBWYWxpZGF0b3IoeyB0eXBlOiBcImJ5dGVzXCIgfSwgZmFsc2UpO1xuICB9LFxuICBsaXRlcmFsKGxpdGVyYWwpIHtcbiAgICBjb25zdCB2YWx1ZSA9IGNvbnZleFRvSnNvbihsaXRlcmFsKTtcbiAgICByZXR1cm4gbmV3IFZhbGlkYXRvcih7IHR5cGU6IFwibGl0ZXJhbFwiLCB2YWx1ZSB9LCBmYWxzZSk7XG4gIH0sXG4gIGFycmF5KHZhbHVlcykge1xuICAgIHJldHVybiBuZXcgVmFsaWRhdG9yKHsgdHlwZTogXCJhcnJheVwiLCB2YWx1ZTogdmFsdWVzLmpzb24gfSwgZmFsc2UpO1xuICB9LFxuICBvYmplY3Qoc2NoZW1hKSB7XG4gICAgcmV0dXJuIG5ldyBWYWxpZGF0b3IoXG4gICAgICB7XG4gICAgICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgICAgIHZhbHVlOiBPYmplY3QuZnJvbUVudHJpZXMoXG4gICAgICAgICAgT2JqZWN0LmVudHJpZXMoc2NoZW1hKS5tYXAoKFtrLCB2Ml0pID0+IFtcbiAgICAgICAgICAgIGssXG4gICAgICAgICAgICB7IGZpZWxkVHlwZTogdjIuanNvbiwgb3B0aW9uYWw6IHYyLm9wdGlvbmFsIH1cbiAgICAgICAgICBdKVxuICAgICAgICApXG4gICAgICB9LFxuICAgICAgZmFsc2VcbiAgICApO1xuICB9LFxuICAvKiogQGludGVybmFsICovXG4gIHJlY29yZChrZXlzLCB2YWx1ZXMpIHtcbiAgICByZXR1cm4gbmV3IFZhbGlkYXRvcihcbiAgICAgIHtcbiAgICAgICAgdHlwZTogXCJyZWNvcmRcIixcbiAgICAgICAga2V5czoga2V5cy5qc29uLFxuICAgICAgICB2YWx1ZXM6IHsgZmllbGRUeXBlOiB2YWx1ZXMuanNvbiwgb3B0aW9uYWw6IHZhbHVlcy5vcHRpb25hbCB9XG4gICAgICB9LFxuICAgICAgZmFsc2VcbiAgICApO1xuICB9LFxuICB1bmlvbiguLi5zY2hlbWFUeXBlcykge1xuICAgIHJldHVybiBuZXcgVmFsaWRhdG9yKFxuICAgICAge1xuICAgICAgICB0eXBlOiBcInVuaW9uXCIsXG4gICAgICAgIHZhbHVlOiBzY2hlbWFUeXBlcy5tYXAoKHQpID0+IHQuanNvbilcbiAgICAgIH0sXG4gICAgICBmYWxzZVxuICAgICk7XG4gIH0sXG4gIGFueSgpIHtcbiAgICByZXR1cm4gbmV3IFZhbGlkYXRvcih7IHR5cGU6IFwiYW55XCIgfSwgZmFsc2UpO1xuICB9LFxuICBvcHRpb25hbChpbm5lcikge1xuICAgIHJldHVybiBuZXcgVmFsaWRhdG9yKGlubmVyLmpzb24sIHRydWUpO1xuICB9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmFsaWRhdG9yLmpzLm1hcFxuIl0sIm5hbWVzIjpbImNvbnZleFRvSnNvbiIsIlZhbGlkYXRvciIsImNvbnN0cnVjdG9yIiwianNvbiIsIm9wdGlvbmFsIiwidiIsImlkIiwidGFibGVOYW1lIiwidHlwZSIsIm51bGwiLCJudW1iZXIiLCJmbG9hdDY0IiwiYmlnaW50IiwiaW50NjQiLCJib29sZWFuIiwic3RyaW5nIiwiYnl0ZXMiLCJsaXRlcmFsIiwidmFsdWUiLCJhcnJheSIsInZhbHVlcyIsIm9iamVjdCIsInNjaGVtYSIsIk9iamVjdCIsImZyb21FbnRyaWVzIiwiZW50cmllcyIsIm1hcCIsImsiLCJ2MiIsImZpZWxkVHlwZSIsInJlY29yZCIsImtleXMiLCJ1bmlvbiIsInNjaGVtYVR5cGVzIiwidCIsImFueSIsImlubmVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/values/validator.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/values/value.js":
/*!******************************************************!*\
  !*** ./node_modules/convex/dist/esm/values/value.js ***!
  \******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base64ToBigInt: function() { return /* binding */ base64ToBigInt; },\n/* harmony export */   bigIntToBase64: function() { return /* binding */ bigIntToBase64; },\n/* harmony export */   convexOrUndefinedToJson: function() { return /* binding */ convexOrUndefinedToJson; },\n/* harmony export */   convexToJson: function() { return /* binding */ convexToJson; },\n/* harmony export */   jsonToConvex: function() { return /* binding */ jsonToConvex; },\n/* harmony export */   modernBase64ToBigInt: function() { return /* binding */ modernBase64ToBigInt; },\n/* harmony export */   modernBigIntToBase64: function() { return /* binding */ modernBigIntToBase64; },\n/* harmony export */   patchValueToJson: function() { return /* binding */ patchValueToJson; },\n/* harmony export */   slowBase64ToBigInt: function() { return /* binding */ slowBase64ToBigInt; },\n/* harmony export */   slowBigIntToBase64: function() { return /* binding */ slowBigIntToBase64; },\n/* harmony export */   stringifyValueForError: function() { return /* binding */ stringifyValueForError; }\n/* harmony export */ });\n/* harmony import */ var _base64_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base64.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/values/base64.js\");\n/* harmony import */ var _common_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/index.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/common/index.js\");\n\n\n\nconst LITTLE_ENDIAN = true;\nconst MIN_INT64 = BigInt(\"-9223372036854775808\");\nconst MAX_INT64 = BigInt(\"9223372036854775807\");\nconst ZERO = BigInt(\"0\");\nconst EIGHT = BigInt(\"8\");\nconst TWOFIFTYSIX = BigInt(\"256\");\nfunction isSpecial(n) {\n    return Number.isNaN(n) || !Number.isFinite(n) || Object.is(n, -0);\n}\nfunction slowBigIntToBase64(value) {\n    if (value < ZERO) {\n        value -= MIN_INT64 + MIN_INT64;\n    }\n    let hex = value.toString(16);\n    if (hex.length % 2 === 1) hex = \"0\" + hex;\n    const bytes = new Uint8Array(new ArrayBuffer(8));\n    let i = 0;\n    for (const hexByte of hex.match(/.{2}/g).reverse()){\n        bytes.set([\n            parseInt(hexByte, 16)\n        ], i++);\n        value >>= EIGHT;\n    }\n    return _base64_js__WEBPACK_IMPORTED_MODULE_0__.fromByteArray(bytes);\n}\nfunction slowBase64ToBigInt(encoded) {\n    const integerBytes = _base64_js__WEBPACK_IMPORTED_MODULE_0__.toByteArray(encoded);\n    if (integerBytes.byteLength !== 8) {\n        throw new Error(\"Received \".concat(integerBytes.byteLength, \" bytes, expected 8 for $integer\"));\n    }\n    let value = ZERO;\n    let power = ZERO;\n    for (const byte of integerBytes){\n        value += BigInt(byte) * TWOFIFTYSIX ** power;\n        power++;\n    }\n    if (value > MAX_INT64) {\n        value += MIN_INT64 + MIN_INT64;\n    }\n    return value;\n}\nfunction modernBigIntToBase64(value) {\n    if (value < MIN_INT64 || MAX_INT64 < value) {\n        throw new Error(\"BigInt \".concat(value, \" does not fit into a 64-bit signed integer.\"));\n    }\n    const buffer = new ArrayBuffer(8);\n    new DataView(buffer).setBigInt64(0, value, true);\n    return _base64_js__WEBPACK_IMPORTED_MODULE_0__.fromByteArray(new Uint8Array(buffer));\n}\nfunction modernBase64ToBigInt(encoded) {\n    const integerBytes = _base64_js__WEBPACK_IMPORTED_MODULE_0__.toByteArray(encoded);\n    if (integerBytes.byteLength !== 8) {\n        throw new Error(\"Received \".concat(integerBytes.byteLength, \" bytes, expected 8 for $integer\"));\n    }\n    const intBytesView = new DataView(integerBytes.buffer);\n    return intBytesView.getBigInt64(0, true);\n}\nconst bigIntToBase64 = DataView.prototype.setBigInt64 ? modernBigIntToBase64 : slowBigIntToBase64;\nconst base64ToBigInt = DataView.prototype.getBigInt64 ? modernBase64ToBigInt : slowBase64ToBigInt;\nconst MAX_IDENTIFIER_LEN = 1024;\nfunction validateObjectField(k) {\n    if (k.length === 0) {\n        throw new Error(\"Empty field names are disallowed.\");\n    }\n    if (k.length > MAX_IDENTIFIER_LEN) {\n        throw new Error(\"Field name \".concat(k, \" exceeds maximum field name length \").concat(MAX_IDENTIFIER_LEN, \".\"));\n    }\n    if (k.startsWith(\"$\")) {\n        throw new Error(\"Field name \".concat(k, \" starts with a '$', which is reserved.\"));\n    }\n    for(let i = 0; i < k.length; i += 1){\n        const charCode = k.charCodeAt(i);\n        if (charCode < 32 || charCode >= 127) {\n            throw new Error(\"Field name \".concat(k, \" has invalid character '\").concat(k[i], \"': Field names can only contain non-control ASCII characters\"));\n        }\n    }\n}\nfunction jsonToConvexInternal(value, allowMapsAndSets) {\n    if (value === null) {\n        return value;\n    }\n    if (typeof value === \"boolean\") {\n        return value;\n    }\n    if (typeof value === \"number\") {\n        return value;\n    }\n    if (typeof value === \"string\") {\n        return value;\n    }\n    if (Array.isArray(value)) {\n        return value.map((value2)=>jsonToConvexInternal(value2, allowMapsAndSets));\n    }\n    if (typeof value !== \"object\") {\n        throw new Error(\"Unexpected type of \".concat(value));\n    }\n    const entries = Object.entries(value);\n    if (entries.length === 1) {\n        const key = entries[0][0];\n        if (key === \"$bytes\") {\n            if (typeof value.$bytes !== \"string\") {\n                throw new Error(\"Malformed $bytes field on \".concat(value));\n            }\n            return _base64_js__WEBPACK_IMPORTED_MODULE_0__.toByteArray(value.$bytes).buffer;\n        }\n        if (key === \"$integer\") {\n            if (typeof value.$integer !== \"string\") {\n                throw new Error(\"Malformed $integer field on \".concat(value));\n            }\n            return base64ToBigInt(value.$integer);\n        }\n        if (key === \"$float\") {\n            if (typeof value.$float !== \"string\") {\n                throw new Error(\"Malformed $float field on \".concat(value));\n            }\n            const floatBytes = _base64_js__WEBPACK_IMPORTED_MODULE_0__.toByteArray(value.$float);\n            if (floatBytes.byteLength !== 8) {\n                throw new Error(\"Received \".concat(floatBytes.byteLength, \" bytes, expected 8 for $float\"));\n            }\n            const floatBytesView = new DataView(floatBytes.buffer);\n            const float = floatBytesView.getFloat64(0, LITTLE_ENDIAN);\n            if (!isSpecial(float)) {\n                throw new Error(\"Float \".concat(float, \" should be encoded as a number\"));\n            }\n            return float;\n        }\n        if (key === \"$set\") {\n            if (!Array.isArray(value.$set)) {\n                throw new Error(\"Malformed $set field on \".concat(value));\n            }\n            if (!allowMapsAndSets) {\n                throw new Error(\"Received a Set which is no longer supported as a Convex type, with values: \".concat(value.$set.join(\", \"), \".\"));\n            }\n            return new Set(value.$set.map((value2)=>jsonToConvexInternal(value2, allowMapsAndSets)));\n        }\n        if (key === \"$map\") {\n            if (!Array.isArray(value.$map)) {\n                throw new Error(\"Malformed $map field on \".concat(value));\n            }\n            if (!allowMapsAndSets) {\n                throw new Error(\"Received a Map which is no longer supported as a Convex type, with entries: \".concat(value.$map.join(\", \"), \".\"));\n            }\n            const map = /* @__PURE__ */ new Map();\n            for (const pair of value.$map){\n                if (!Array.isArray(pair) || pair.length !== 2) {\n                    throw new Error(\"Malformed pair in $map \".concat(value));\n                }\n                const k = jsonToConvexInternal(pair[0], allowMapsAndSets);\n                const v = jsonToConvexInternal(pair[1], allowMapsAndSets);\n                map.set(k, v);\n            }\n            return map;\n        }\n    }\n    const out = {};\n    for (const [k, v] of Object.entries(value)){\n        validateObjectField(k);\n        out[k] = jsonToConvexInternal(v, allowMapsAndSets);\n    }\n    return out;\n}\nfunction jsonToConvex(value) {\n    let allowMapsAndSets = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n    return jsonToConvexInternal(value, allowMapsAndSets);\n}\nfunction stringifyValueForError(value) {\n    return JSON.stringify(value, (_key, value2)=>{\n        if (value2 === void 0) {\n            return \"undefined\";\n        }\n        if (typeof value2 === \"bigint\") {\n            return \"\".concat(value2.toString(), \"n\");\n        }\n        return value2;\n    });\n}\nfunction convexToJsonInternal(value, originalValue, context, includeTopLevelUndefined, allowMapsAndSets) {\n    if (value === void 0) {\n        const contextText = context && \" (present at path \".concat(context, \" in original object \").concat(stringifyValueForError(originalValue), \")\");\n        throw new Error(\"undefined is not a valid Convex value\".concat(contextText, \". To learn about Convex's supported types, see https://docs.convex.dev/using/types.\"));\n    }\n    if (value === null) {\n        return value;\n    }\n    if (typeof value === \"bigint\") {\n        if (value < MIN_INT64 || MAX_INT64 < value) {\n            throw new Error(\"BigInt \".concat(value, \" does not fit into a 64-bit signed integer.\"));\n        }\n        return {\n            $integer: bigIntToBase64(value)\n        };\n    }\n    if (typeof value === \"number\") {\n        if (isSpecial(value)) {\n            const buffer = new ArrayBuffer(8);\n            new DataView(buffer).setFloat64(0, value, LITTLE_ENDIAN);\n            return {\n                $float: _base64_js__WEBPACK_IMPORTED_MODULE_0__.fromByteArray(new Uint8Array(buffer))\n            };\n        } else {\n            return value;\n        }\n    }\n    if (typeof value === \"boolean\") {\n        return value;\n    }\n    if (typeof value === \"string\") {\n        return value;\n    }\n    if (value instanceof ArrayBuffer) {\n        return {\n            $bytes: _base64_js__WEBPACK_IMPORTED_MODULE_0__.fromByteArray(new Uint8Array(value))\n        };\n    }\n    if (Array.isArray(value)) {\n        return value.map((value2, i)=>convexToJsonInternal(value2, originalValue, context + \"[\".concat(i, \"]\"), false, allowMapsAndSets));\n    }\n    if (value instanceof Set) {\n        if (!allowMapsAndSets) {\n            throw new Error(errorMessageForUnsupportedType(context, \"Set\", [\n                ...value\n            ], originalValue));\n        }\n        return {\n            $set: [\n                ...value\n            ].map((value2, i)=>convexToJsonInternal(value2, originalValue, context + \".keys()[\".concat(i, \"]\"), false, allowMapsAndSets))\n        };\n    }\n    if (value instanceof Map) {\n        if (!allowMapsAndSets) {\n            throw new Error(errorMessageForUnsupportedType(context, \"Map\", [\n                ...value\n            ], originalValue));\n        }\n        return {\n            $map: [\n                ...value\n            ].map((param, i)=>{\n                let [k, v] = param;\n                const jsonKey = convexToJsonInternal(k, originalValue, context + \".keys()[\".concat(i, \"]\"), false, allowMapsAndSets);\n                const jsonValue = convexToJsonInternal(v, originalValue, context + \".values()[\".concat(i, \"]\"), false, allowMapsAndSets);\n                return [\n                    jsonKey,\n                    jsonValue\n                ];\n            })\n        };\n    }\n    if (!(0,_common_index_js__WEBPACK_IMPORTED_MODULE_1__.isSimpleObject)(value)) {\n        var _value_constructor;\n        const theType = value === null || value === void 0 ? void 0 : (_value_constructor = value.constructor) === null || _value_constructor === void 0 ? void 0 : _value_constructor.name;\n        const typeName = theType ? \"\".concat(theType, \" \") : \"\";\n        throw new Error(errorMessageForUnsupportedType(context, typeName, value, originalValue));\n    }\n    const out = {};\n    const entries = Object.entries(value);\n    entries.sort((param, param1)=>{\n        let [k1, _v1] = param, [k2, _v2] = param1;\n        return k1 === k2 ? 0 : k1 < k2 ? -1 : 1;\n    });\n    for (const [k, v] of entries){\n        if (v !== void 0) {\n            validateObjectField(k);\n            out[k] = convexToJsonInternal(v, originalValue, context + \".\".concat(k), false, allowMapsAndSets);\n        } else if (includeTopLevelUndefined) {\n            validateObjectField(k);\n            out[k] = convexOrUndefinedToJsonInternal(v, originalValue, context + \".\".concat(k));\n        }\n    }\n    return out;\n}\nfunction errorMessageForUnsupportedType(context, typeName, value, originalValue) {\n    if (context) {\n        return \"\".concat(typeName).concat(stringifyValueForError(value), \" is not a supported Convex type (present at path \").concat(context, \" in original object \").concat(stringifyValueForError(originalValue), \"). To learn about Convex's supported types, see https://docs.convex.dev/using/types.\");\n    } else {\n        return \"\".concat(typeName).concat(stringifyValueForError(value), \" is not a supported Convex type.\");\n    }\n}\nfunction convexOrUndefinedToJsonInternal(value, originalValue, context) {\n    if (value === void 0) {\n        return {\n            $undefined: null\n        };\n    } else {\n        if (originalValue === void 0) {\n            throw new Error(\"Programming error. Current value is \".concat(stringifyValueForError(value), \" but original value is undefined\"));\n        }\n        return convexToJsonInternal(value, originalValue, context, false, false);\n    }\n}\nfunction convexToJson(value) {\n    let allowMapsAndSets = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n    return convexToJsonInternal(value, value, \"\", false, allowMapsAndSets);\n}\nfunction convexOrUndefinedToJson(value) {\n    return convexOrUndefinedToJsonInternal(value, value, \"\");\n}\nfunction patchValueToJson(value) {\n    return convexToJsonInternal(value, value, \"\", true, false);\n} //# sourceMappingURL=value.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/values/value.js\n"));

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["main-app"], function() { return __webpack_exec__("(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2FUsers%2Fsathviknallamalli%2Fholistichealth%2Fholisticreact%2Fapp%2FConvexClientProvider.jsx&modules=%2FUsers%2Fsathviknallamalli%2Fholistichealth%2Fholisticreact%2Fapp%2Fglobals.css&modules=%2FUsers%2Fsathviknallamalli%2Fholistichealth%2Fholisticreact%2Fnode_modules%2Fnext%2Ffont%2Fgoogle%2Ftarget.css%3F%7B%22path%22%3A%22app%2Flayout.js%22%2C%22import%22%3A%22Inter%22%2C%22arguments%22%3A%5B%7B%22subsets%22%3A%5B%22latin%22%5D%7D%5D%2C%22variableName%22%3A%22inter%22%7D&server=false!"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);